//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Thu Mar 26 13:21:09 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 7
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_main_BB_0_1 = 7'd1;
parameter [6:0] LEGUP_F_main_BB__backedge_2 = 7'd2;
parameter [6:0] LEGUP_F_main_BB__backedge_backedge_3 = 7'd3;
parameter [6:0] LEGUP_F_main_BB__preheader29_4 = 7'd4;
parameter [6:0] LEGUP_F_main_BB__preheader29_5 = 7'd5;
parameter [6:0] LEGUP_F_main_BB__preheader29_6 = 7'd6;
parameter [6:0] LEGUP_F_main_BB__preheader29_7 = 7'd7;
parameter [6:0] LEGUP_F_main_BB__preheader29_8 = 7'd8;
parameter [6:0] LEGUP_F_main_BB__preheader29_9 = 7'd9;
parameter [6:0] LEGUP_F_main_BB__preheader29_10 = 7'd10;
parameter [6:0] LEGUP_F_main_BB__preheader29_11 = 7'd11;
parameter [6:0] LEGUP_F_main_BB__preheader29_12 = 7'd12;
parameter [6:0] LEGUP_F_main_BB__preheader31_13 = 7'd13;
parameter [6:0] LEGUP_F_main_BB__preheader31_14 = 7'd14;
parameter [6:0] LEGUP_F_main_BB__preheader31_15 = 7'd15;
parameter [6:0] LEGUP_F_main_BB__preheader31_16 = 7'd16;
parameter [6:0] LEGUP_F_main_BB__preheader31_17 = 7'd17;
parameter [6:0] LEGUP_F_main_BB__preheader31_18 = 7'd18;
parameter [6:0] LEGUP_F_main_BB__preheader31_19 = 7'd19;
parameter [6:0] LEGUP_F_main_BB__preheader31_20 = 7'd20;
parameter [6:0] LEGUP_F_main_BB__preheader31_21 = 7'd21;
parameter [6:0] LEGUP_F_main_BB__preheader31_22 = 7'd22;
parameter [6:0] LEGUP_F_main_BB__preheader31_23 = 7'd23;
parameter [6:0] LEGUP_F_main_BB__preheader31_24 = 7'd24;
parameter [6:0] LEGUP_F_main_BB__preheader31_25 = 7'd25;
parameter [6:0] LEGUP_F_main_BB__preheader31_26 = 7'd26;
parameter [6:0] LEGUP_F_main_BB__preheader31_27 = 7'd27;
parameter [6:0] LEGUP_F_main_BB_119_28 = 7'd28;
parameter [6:0] LEGUP_F_main_BB_122_29 = 7'd29;
parameter [6:0] LEGUP_F_main_BB_122_30 = 7'd30;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4_exit_31 = 7'd31;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4_exit_32 = 7'd32;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4_exit_33 = 7'd33;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4_exit_34 = 7'd34;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4_exit_35 = 7'd35;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4_exit_36 = 7'd36;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4_exit_37 = 7'd37;
parameter [6:0] LEGUP_F_main_BB_125_38 = 7'd38;
parameter [6:0] LEGUP_F_main_BB_127_39 = 7'd39;
parameter [6:0] LEGUP_F_main_BB_127_40 = 7'd40;
parameter [6:0] LEGUP_F_main_BB_127_41 = 7'd41;
parameter [6:0] LEGUP_F_main_BB_139_42 = 7'd42;
parameter [6:0] LEGUP_F_main_BB_141_43 = 7'd43;
parameter [6:0] LEGUP_F_main_BB_141_44 = 7'd44;
parameter [6:0] LEGUP_F_main_BB_141_45 = 7'd45;
parameter [6:0] LEGUP_F_main_BB_141_46 = 7'd46;
parameter [6:0] LEGUP_F_main_BB_141_47 = 7'd47;
parameter [6:0] LEGUP_F_main_BB_161_48 = 7'd48;
parameter [6:0] LEGUP_F_main_BB_161_49 = 7'd49;
parameter [6:0] LEGUP_F_main_BB_162_50 = 7'd50;
parameter [6:0] LEGUP_F_main_BB_164_51 = 7'd51;
parameter [6:0] LEGUP_F_main_BB_166_52 = 7'd52;
parameter [6:0] LEGUP_F_main_BB_168_53 = 7'd53;
parameter [6:0] LEGUP_F_main_BB_170_54 = 7'd54;
parameter [6:0] LEGUP_F_main_BB_172_55 = 7'd55;
parameter [6:0] LEGUP_F_main_BB_172_56 = 7'd56;
parameter [6:0] LEGUP_F_main_BB_172_57 = 7'd57;
parameter [6:0] LEGUP_F_main_BB_172_58 = 7'd58;
parameter [6:0] LEGUP_F_main_BB_185_59 = 7'd59;
parameter [6:0] LEGUP_F_main_BB_185_60 = 7'd60;
parameter [6:0] LEGUP_F_main_BB_189_61 = 7'd61;
parameter [6:0] LEGUP_F_main_BB_191_62 = 7'd62;
parameter [6:0] LEGUP_F_main_BB_193_63 = 7'd63;
parameter [6:0] LEGUP_F_main_BB_196_64 = 7'd64;
parameter [6:0] LEGUP_F_main_BB_197_65 = 7'd65;
parameter [6:0] LEGUP_F_main_BB_199_66 = 7'd66;
parameter [6:0] LEGUP_F_main_BB_199_67 = 7'd67;
parameter [6:0] LEGUP_F_main_BB_199_68 = 7'd68;
parameter [6:0] LEGUP_F_main_BB_199_69 = 7'd69;
parameter [6:0] LEGUP_F_main_BB_199_70 = 7'd70;
parameter [6:0] LEGUP_F_main_BB_199_71 = 7'd71;
parameter [6:0] LEGUP_F_main_BB_199_72 = 7'd72;
parameter [6:0] LEGUP_F_main_BB_199_73 = 7'd73;
parameter [6:0] LEGUP_F_main_BB_199_74 = 7'd74;
parameter [6:0] LEGUP_F_main_BB_199_75 = 7'd75;
parameter [6:0] LEGUP_F_main_BB_199_76 = 7'd76;
parameter [6:0] LEGUP_F_main_BB_199_77 = 7'd77;
parameter [6:0] LEGUP_F_main_BB_199_78 = 7'd78;
parameter [6:0] LEGUP_F_main_BB_199_79 = 7'd79;
parameter [6:0] LEGUP_F_main_BB_199_80 = 7'd80;
parameter [6:0] LEGUP_F_main_BB_199_81 = 7'd81;
parameter [6:0] LEGUP_F_main_BB_199_82 = 7'd82;
parameter [6:0] LEGUP_F_main_BB_199_83 = 7'd83;
parameter [6:0] LEGUP_F_main_BB_199_84 = 7'd84;
parameter [6:0] LEGUP_F_main_BB_199_85 = 7'd85;
parameter [6:0] LEGUP_F_main_BB_199_86 = 7'd86;
parameter [6:0] LEGUP_F_main_BB_199_87 = 7'd87;
parameter [6:0] LEGUP_F_main_BB_199_88 = 7'd88;
parameter [6:0] LEGUP_F_main_BB_199_89 = 7'd89;
parameter [6:0] LEGUP_F_main_BB_199_90 = 7'd90;
parameter [6:0] LEGUP_F_main_BB_199_91 = 7'd91;
parameter [6:0] LEGUP_F_main_BB_199_92 = 7'd92;
parameter [6:0] LEGUP_F_main_BB_199_93 = 7'd93;
parameter [6:0] LEGUP_F_main_BB_199_94 = 7'd94;
parameter [6:0] LEGUP_F_main_BB_199_95 = 7'd95;
parameter [6:0] LEGUP_F_main_BB_199_96 = 7'd96;
parameter [6:0] LEGUP_F_main_BB_199_97 = 7'd97;
parameter [6:0] LEGUP_F_main_BB_199_98 = 7'd98;
parameter [6:0] LEGUP_F_main_BB_199_99 = 7'd99;
parameter [6:0] LEGUP_F_main_BB_199_100 = 7'd100;
parameter [6:0] LEGUP_F_main_BB_199_101 = 7'd101;
parameter [6:0] LEGUP_F_main_BB_231_102 = 7'd102;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [6:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_43_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_46_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_47;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_53;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_53_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_55_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_56_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_57_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_59_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_62_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_66_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_67;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_67_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_68;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_70_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_72_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_74;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_75_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_76_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_77;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_77_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_79_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_80;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_80_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_81_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep64_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep64_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep65_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep65_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep64_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep64_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep65_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep65_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep64_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep64_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep65_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep65_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep64_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep64_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep65_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep65_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep64_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep64_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep65_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep65_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep64_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep64_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep65_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep65_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep64_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep64_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep65_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep65_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep64_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep64_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep65_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep65_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep64_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep64_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep65_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep65_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep64_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep64_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep65_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep65_10_reg;
reg [31:0] main__backedge_sum_0;
reg [31:0] main__backedge_sum_0_reg;
reg [31:0] main__backedge_b_0;
reg [31:0] main__backedge_b_0_reg;
reg [31:0] main__backedge_a_0;
reg [31:0] main__backedge_a_0_reg;
reg [31:0] main__backedge_pos_b_X_0;
reg [31:0] main__backedge_pos_b_X_0_reg;
reg [31:0] main__backedge_pos_a_Y_0;
reg [31:0] main__backedge_pos_a_Y_0_reg;
reg [31:0] main__backedge_pos_a_X_0;
reg [31:0] main__backedge_pos_a_X_0_reg;
reg [31:0] main__backedge_j_0;
reg [31:0] main__backedge_j_0_reg;
reg [31:0] main__backedge_i_0;
reg [31:0] main__backedge_i_0_reg;
reg [31:0] main__backedge_state_0;
reg [31:0] main__backedge_state_0_reg;
reg [31:0] main__backedge_sum_1hop_0;
reg [31:0] main__backedge_sum_1hop_0_reg;
reg [31:0] main__backedge_backedge_sum_0_be;
reg [31:0] main__backedge_backedge_sum_0_be_reg;
reg [31:0] main__backedge_backedge_b_0_be;
reg [31:0] main__backedge_backedge_b_0_be_reg;
reg [31:0] main__backedge_backedge_a_0_be;
reg [31:0] main__backedge_backedge_a_0_be_reg;
reg [31:0] main__backedge_backedge_pos_b_X_0_be;
reg [31:0] main__backedge_backedge_pos_b_X_0_be_reg;
reg [31:0] main__backedge_backedge_pos_a_Y_0_be;
reg [31:0] main__backedge_backedge_pos_a_Y_0_be_reg;
reg [31:0] main__backedge_backedge_pos_a_X_0_be;
reg [31:0] main__backedge_backedge_pos_a_X_0_be_reg;
reg [31:0] main__backedge_backedge_j_0_be;
reg [31:0] main__backedge_backedge_j_0_be_reg;
reg [31:0] main__backedge_backedge_i_0_be;
reg [31:0] main__backedge_backedge_i_0_be_reg;
reg [31:0] main__backedge_backedge_state_0_be;
reg [31:0] main__backedge_backedge_state_0_be_reg;
reg [31:0] main__backedge_backedge_sum_1hop_0_be;
reg [31:0] main__backedge_backedge_sum_1hop_0_be_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_3_reg;
reg [31:0] main__preheader29_82;
reg [31:0] main__preheader29_82_reg;
reg [31:0] main__preheader29_84;
reg [31:0] main__preheader29_84_reg;
reg [31:0] main__preheader29_86;
reg [31:0] main__preheader29_86_reg;
reg [31:0] main__preheader29_88;
reg [31:0] main__preheader29_88_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_1_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_1_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_2_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_2_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_3_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_3_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_148;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_148_reg;
reg [31:0] main__preheader29_91;
reg [31:0] main__preheader29_91_reg;
reg [31:0] main__preheader29_93;
reg [31:0] main__preheader29_93_reg;
reg [31:0] main__preheader29_95;
reg [31:0] main__preheader29_95_reg;
reg [31:0] main__preheader29_97;
reg [31:0] main__preheader29_97_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_1_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_1_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_2_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_2_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_3_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_3_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_249;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_249_reg;
reg [31:0] main__preheader29_100;
reg [31:0] main__preheader29_100_reg;
reg [31:0] main__preheader29_102;
reg [31:0] main__preheader29_102_reg;
reg [31:0] main__preheader29_104;
reg [31:0] main__preheader29_104_reg;
reg [31:0] main__preheader29_106;
reg [31:0] main__preheader29_106_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_1_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_1_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_2_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_2_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_3_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_3_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_350;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader29_scevgep_350_reg;
reg [31:0] main__preheader29_109;
reg [31:0] main__preheader29_109_reg;
reg [31:0] main__preheader29_111;
reg [31:0] main__preheader29_111_reg;
reg [31:0] main__preheader29_113;
reg [31:0] main__preheader29_113_reg;
reg [31:0] main__preheader29_115;
reg [31:0] main__preheader29_115_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_s_i_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_s_i_0_reg;
reg [31:0] main_119_120;
reg [31:0] main_119_120_reg;
reg  main_119_121;
reg  main_119_121_reg;
reg [31:0] main_122_123;
reg [31:0] main_122_123_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_122_124;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_122_124_reg;
reg  main_125_126;
reg  main_125_126_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_127_128;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_127_128_reg;
reg [31:0] main_127_129;
reg [31:0] main_127_129_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_127_130;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_127_130_reg;
reg [31:0] main_127_131;
reg [31:0] main_127_131_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_127_132;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_127_132_reg;
reg [31:0] main_127_133;
reg [31:0] main_127_133_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_127_134;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_127_134_reg;
reg [31:0] main_127_135;
reg [31:0] main_127_135_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_127_136;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_127_136_reg;
reg [31:0] main_127_137;
reg [31:0] main_127_137_reg;
reg  main_127_138;
reg  main_127_138_reg;
reg [31:0] main_127__;
reg [31:0] main_127___reg;
reg  main_139_140;
reg  main_139_140_reg;
reg [31:0] main_141_142;
reg [31:0] main_141_142_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_141_143;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_141_143_reg;
reg [31:0] main_141_144;
reg [31:0] main_141_144_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_141_145;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_141_145_reg;
reg [31:0] main_141_146;
reg [31:0] main_141_146_reg;
reg [31:0] main_141_147;
reg [31:0] main_141_147_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_141_148;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_141_148_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_141_149;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_141_149_reg;
reg [31:0] main_141_150;
reg [31:0] main_141_150_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_141_151;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_141_151_reg;
reg [31:0] main_141_152;
reg [31:0] main_141_152_reg;
reg [31:0] main_141_153;
reg [31:0] main_141_153_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_141_154;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_141_154_reg;
reg [31:0] main_141_155;
reg [31:0] main_141_155_reg;
reg [31:0] main_141_idxscale17;
reg [31:0] main_141_idxscale17_reg;
reg [31:0] main_141__sum18;
reg [31:0] main_141__sum18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_141_156;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_141_156_reg;
reg [31:0] main_141_157;
reg [31:0] main_141_157_reg;
reg  main_141_158;
reg  main_141_158_reg;
reg  main_141_159;
reg  main_141_159_reg;
reg  main_141_or_cond;
reg  main_141_or_cond_reg;
reg  main_141_160;
reg  main_141_160_reg;
reg  main_141_or_cond22;
reg  main_141_or_cond22_reg;
reg  main_162_163;
reg  main_162_163_reg;
reg [31:0] main_166_pos_a_Y_1;
reg [31:0] main_166_pos_a_Y_1_reg;
reg [31:0] main_166_pos_a_X_1;
reg [31:0] main_166_pos_a_X_1_reg;
reg  main_166_167;
reg  main_166_167_reg;
reg [31:0] main_166__23;
reg [31:0] main_166__23_reg;
reg [31:0] main_166__24;
reg [31:0] main_166__24_reg;
reg  main_168_169;
reg  main_168_169_reg;
reg [31:0] main_170_171;
reg [31:0] main_170_171_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_172_173;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_172_173_reg;
reg [31:0] main_172_174;
reg [31:0] main_172_174_reg;
reg [31:0] main_172_175;
reg [31:0] main_172_175_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_172_176;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_172_176_reg;
reg [31:0] main_172_177;
reg [31:0] main_172_177_reg;
reg [31:0] main_172_178;
reg [31:0] main_172_178_reg;
reg [31:0] main_172_179;
reg [31:0] main_172_179_reg;
reg [31:0] main_172_idxscale15;
reg [31:0] main_172_idxscale15_reg;
reg [31:0] main_172__sum16;
reg [31:0] main_172__sum16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_172_180;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_172_180_reg;
reg [31:0] main_172_181;
reg [31:0] main_172_181_reg;
reg  main_172_182;
reg  main_172_182_reg;
reg  main_172_183;
reg  main_172_183_reg;
reg  main_172_or_cond25;
reg  main_172_or_cond25_reg;
reg  main_172_184;
reg  main_172_184_reg;
reg  main_172_or_cond26;
reg  main_172_or_cond26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_185_186;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_185_186_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_185_187;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_185_187_reg;
reg [31:0] main_185_188;
reg [31:0] main_185_188_reg;
reg  main_189_190;
reg  main_189_190_reg;
reg [31:0] main_193_194;
reg [31:0] main_193_194_reg;
reg [31:0] main_193_195;
reg [31:0] main_193_195_reg;
reg [31:0] main_193_i_0_;
reg [31:0] main_193_i_0__reg;
reg  main_197_198;
reg  main_197_198_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_199_200;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_199_200_reg;
reg [31:0] main_199_201;
reg [31:0] main_199_201_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_199_202;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_199_202_reg;
reg [31:0] main_199_203;
reg [31:0] main_199_203_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_199_204;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_199_204_reg;
reg [31:0] main_199_205;
reg [31:0] main_199_205_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_199_206;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_199_206_reg;
reg [31:0] main_199_207;
reg [31:0] main_199_207_reg;
reg [31:0] main_199_208;
reg [31:0] main_199_208_reg;
reg [31:0] main_199_209;
reg [31:0] main_199_209_reg;
reg  main_199_210;
reg  main_199_210_reg;
reg [31:0] main_199__27;
reg [31:0] main_199__27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_199_211;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_199_211_reg;
reg [31:0] main_199_212;
reg [31:0] main_199_212_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_199_213;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_199_213_reg;
reg [31:0] main_199_214;
reg [31:0] main_199_214_reg;
reg [31:0] main_199_215;
reg [31:0] main_199_215_reg;
reg  main_199_216;
reg  main_199_216_reg;
reg [31:0] main_199_217;
reg [31:0] main_199_217_reg;
reg [31:0] main_199_diff_pos_y_0;
reg [31:0] main_199_diff_pos_y_0_reg;
reg [31:0] main_199_218;
reg [31:0] main_199_218_reg;
reg [31:0] main_199_219;
reg [31:0] main_199_219_reg;
reg [31:0] main_199_220;
reg [31:0] main_199_220_reg;
reg [31:0] main_199_221;
reg [31:0] main_199_221_reg;
reg [31:0] main_199_222;
reg [31:0] main_199_222_reg;
reg [31:0] main_199_223;
reg [31:0] main_199_223_reg;
reg [31:0] main_199_224;
reg [31:0] main_199_224_reg;
reg [31:0] main_199_225;
reg [31:0] main_199_225_reg;
reg [31:0] main_199_226;
reg [31:0] main_199_226_reg;
reg [31:0] main_199_227;
reg [31:0] main_199_227_reg;
reg [31:0] main_199_228;
reg [31:0] main_199_228_reg;
reg [31:0] main_199_229;
reg [31:0] main_199_229_reg;
reg [31:0] main_199_230;
reg [31:0] main_199_230_reg;
reg [31:0] main_231__0;
reg [31:0] main_231__0_reg;
reg [3:0] main_0_1_address_a;
reg  main_0_1_write_enable_a;
reg [31:0] main_0_1_in_a;
wire [31:0] main_0_1_out_a;
reg [3:0] main_0_1_address_b;
reg  main_0_1_write_enable_b;
reg [31:0] main_0_1_in_b;
wire [31:0] main_0_1_out_b;
reg [3:0] main_0_2_address_a;
reg  main_0_2_write_enable_a;
reg [31:0] main_0_2_in_a;
wire [31:0] main_0_2_out_a;
reg [3:0] main_0_2_address_b;
reg  main_0_2_write_enable_b;
reg [31:0] main_0_2_in_b;
wire [31:0] main_0_2_out_b;
reg [3:0] main_0_3_address_a;
reg  main_0_3_write_enable_a;
reg [31:0] main_0_3_in_a;
wire [31:0] main_0_3_out_a;
reg [3:0] main_0_3_address_b;
reg  main_0_3_write_enable_b;
reg [31:0] main_0_3_in_b;
wire [31:0] main_0_3_out_b;
reg [3:0] main_0_4_address_a;
reg  main_0_4_write_enable_a;
reg [31:0] main_0_4_in_a;
wire [31:0] main_0_4_out_a;
reg [3:0] main_0_4_address_b;
reg  main_0_4_write_enable_b;
reg [31:0] main_0_4_in_b;
wire [31:0] main_0_4_out_b;
reg [3:0] main_0_5_address_a;
reg  main_0_5_write_enable_a;
reg [31:0] main_0_5_in_a;
wire [31:0] main_0_5_out_a;
reg [3:0] main_0_5_address_b;
reg  main_0_5_write_enable_b;
reg [31:0] main_0_5_in_b;
wire [31:0] main_0_5_out_b;
reg [4:0] main_0_6_address_a;
reg  main_0_6_write_enable_a;
reg [31:0] main_0_6_in_a;
wire [31:0] main_0_6_out_a;
reg [4:0] main_0_6_address_b;
reg  main_0_6_write_enable_b;
reg [31:0] main_0_6_in_b;
wire [31:0] main_0_6_out_b;
reg [4:0] main_0_7_address_a;
reg  main_0_7_write_enable_a;
reg [31:0] main_0_7_in_a;
wire [31:0] main_0_7_out_a;
reg [4:0] main_0_7_address_b;
reg  main_0_7_write_enable_b;
reg [31:0] main_0_7_in_b;
wire [31:0] main_0_7_out_b;
wire [15:0] legup_pthreadpoll_threadID;
reg [31:0] main_signed_divide_32_0_op0;
reg [31:0] main_signed_divide_32_0_op1;
wire [31:0] lpm_divide_main_199_221_temp_out;
wire [31:0] main_199_221_unused;
reg  lpm_divide_main_199_221_en;
reg [31:0] lpm_divide_main_199_221_out;
reg [31:0] main_signed_divide_32_0;
reg [31:0] main_signed_modulus_32_0_op0;
reg [31:0] main_signed_modulus_32_0_op1;
wire [31:0] lpm_divide_main_199_222_temp_out;
wire [31:0] main_199_222_unused;
reg  lpm_divide_main_199_222_en;
reg [31:0] lpm_divide_main_199_222_out;
reg [31:0] main_signed_modulus_32_0;
reg [31:0] main_signed_modulus_32_1_op0;
reg [31:0] main_signed_modulus_32_1_op1;
wire [31:0] lpm_divide_main_199_224_temp_out;
wire [31:0] main_199_224_unused;
reg  lpm_divide_main_199_224_en;
reg [31:0] lpm_divide_main_199_224_out;
reg [31:0] main_signed_modulus_32_1;
reg  lpm_divide_main_199_223_en;

/*   %221 = sdiv i32 %.27, 2*/
lpm_divide lpm_divide_main_199_221 (
	.quotient (lpm_divide_main_199_221_temp_out),
	.remain (main_199_221_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_199_221_en),
	.numer (main_signed_divide_32_0_op0),
	.denom (main_signed_divide_32_0_op1)
);

defparam
	lpm_divide_main_199_221.lpm_pipeline = 32,
	lpm_divide_main_199_221.lpm_widthn = 32,
	lpm_divide_main_199_221.lpm_widthd = 32,
	lpm_divide_main_199_221.lpm_drepresentation = "SIGNED",
	lpm_divide_main_199_221.lpm_nrepresentation = "SIGNED",
	lpm_divide_main_199_221.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

/*   %222 = srem i32 %.27, 2*/
lpm_divide lpm_divide_main_199_222 (
	.quotient (main_199_222_unused),
	.remain (lpm_divide_main_199_222_temp_out),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_199_222_en),
	.numer (main_signed_modulus_32_0_op0),
	.denom (main_signed_modulus_32_0_op1)
);

defparam
	lpm_divide_main_199_222.lpm_pipeline = 32,
	lpm_divide_main_199_222.lpm_widthn = 32,
	lpm_divide_main_199_222.lpm_widthd = 32,
	lpm_divide_main_199_222.lpm_drepresentation = "SIGNED",
	lpm_divide_main_199_222.lpm_nrepresentation = "SIGNED",
	lpm_divide_main_199_222.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

/*   %224 = srem i32 %diff_pos_y.0, 2*/
lpm_divide lpm_divide_main_199_224 (
	.quotient (main_199_224_unused),
	.remain (lpm_divide_main_199_224_temp_out),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_199_224_en),
	.numer (main_signed_modulus_32_1_op0),
	.denom (main_signed_modulus_32_1_op1)
);

defparam
	lpm_divide_main_199_224.lpm_pipeline = 32,
	lpm_divide_main_199_224.lpm_widthn = 32,
	lpm_divide_main_199_224.lpm_widthd = 32,
	lpm_divide_main_199_224.lpm_drepresentation = "SIGNED",
	lpm_divide_main_199_224.lpm_nrepresentation = "SIGNED",
	lpm_divide_main_199_224.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

// Local Rams

//   %1 = alloca [11 x i32], align 4
ram_dual_port main_0_1 (
	.clk( clk ),
	.address_a( main_0_1_address_a ),
	.address_b( main_0_1_address_b ),
	.wren_a( main_0_1_write_enable_a ),
	.wren_b( main_0_1_write_enable_b ),
	.data_a( main_0_1_in_a ),
	.data_b( main_0_1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_1_out_a ),
	.q_b( main_0_1_out_b)
);
defparam main_0_1.width_a = 32;
defparam main_0_1.width_b = 32;
defparam main_0_1.widthad_a = 4;
defparam main_0_1.widthad_b = 4;
defparam main_0_1.width_be_a = 1;
defparam main_0_1.width_be_b = 1;
defparam main_0_1.numwords_a = 11;
defparam main_0_1.numwords_b = 11;
defparam main_0_1.latency = 1;

//   %2 = alloca [11 x i32], align 4
ram_dual_port main_0_2 (
	.clk( clk ),
	.address_a( main_0_2_address_a ),
	.address_b( main_0_2_address_b ),
	.wren_a( main_0_2_write_enable_a ),
	.wren_b( main_0_2_write_enable_b ),
	.data_a( main_0_2_in_a ),
	.data_b( main_0_2_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_2_out_a ),
	.q_b( main_0_2_out_b)
);
defparam main_0_2.width_a = 32;
defparam main_0_2.width_b = 32;
defparam main_0_2.widthad_a = 4;
defparam main_0_2.widthad_b = 4;
defparam main_0_2.width_be_a = 1;
defparam main_0_2.width_be_b = 1;
defparam main_0_2.numwords_a = 11;
defparam main_0_2.numwords_b = 11;
defparam main_0_2.latency = 1;

//   %3 = alloca [11 x i32], align 4
ram_dual_port main_0_3 (
	.clk( clk ),
	.address_a( main_0_3_address_a ),
	.address_b( main_0_3_address_b ),
	.wren_a( main_0_3_write_enable_a ),
	.wren_b( main_0_3_write_enable_b ),
	.data_a( main_0_3_in_a ),
	.data_b( main_0_3_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_3_out_a ),
	.q_b( main_0_3_out_b)
);
defparam main_0_3.width_a = 32;
defparam main_0_3.width_b = 32;
defparam main_0_3.widthad_a = 4;
defparam main_0_3.widthad_b = 4;
defparam main_0_3.width_be_a = 1;
defparam main_0_3.width_be_b = 1;
defparam main_0_3.numwords_a = 11;
defparam main_0_3.numwords_b = 11;
defparam main_0_3.latency = 1;

//   %4 = alloca [11 x i32], align 4
ram_dual_port main_0_4 (
	.clk( clk ),
	.address_a( main_0_4_address_a ),
	.address_b( main_0_4_address_b ),
	.wren_a( main_0_4_write_enable_a ),
	.wren_b( main_0_4_write_enable_b ),
	.data_a( main_0_4_in_a ),
	.data_b( main_0_4_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_4_out_a ),
	.q_b( main_0_4_out_b)
);
defparam main_0_4.width_a = 32;
defparam main_0_4.width_b = 32;
defparam main_0_4.widthad_a = 4;
defparam main_0_4.widthad_b = 4;
defparam main_0_4.width_be_a = 1;
defparam main_0_4.width_be_b = 1;
defparam main_0_4.numwords_a = 11;
defparam main_0_4.numwords_b = 11;
defparam main_0_4.latency = 1;

//   %5 = alloca [16 x i32], align 4
ram_dual_port main_0_5 (
	.clk( clk ),
	.address_a( main_0_5_address_a ),
	.address_b( main_0_5_address_b ),
	.wren_a( main_0_5_write_enable_a ),
	.wren_b( main_0_5_write_enable_b ),
	.data_a( main_0_5_in_a ),
	.data_b( main_0_5_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_5_out_a ),
	.q_b( main_0_5_out_b)
);
defparam main_0_5.width_a = 32;
defparam main_0_5.width_b = 32;
defparam main_0_5.widthad_a = 4;
defparam main_0_5.widthad_b = 4;
defparam main_0_5.width_be_a = 1;
defparam main_0_5.width_be_b = 1;
defparam main_0_5.numwords_a = 16;
defparam main_0_5.numwords_b = 16;
defparam main_0_5.latency = 1;

//   %6 = alloca [28 x i32], align 4
ram_dual_port main_0_6 (
	.clk( clk ),
	.address_a( main_0_6_address_a ),
	.address_b( main_0_6_address_b ),
	.wren_a( main_0_6_write_enable_a ),
	.wren_b( main_0_6_write_enable_b ),
	.data_a( main_0_6_in_a ),
	.data_b( main_0_6_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_6_out_a ),
	.q_b( main_0_6_out_b)
);
defparam main_0_6.width_a = 32;
defparam main_0_6.width_b = 32;
defparam main_0_6.widthad_a = 5;
defparam main_0_6.widthad_b = 5;
defparam main_0_6.width_be_a = 1;
defparam main_0_6.width_be_b = 1;
defparam main_0_6.numwords_a = 28;
defparam main_0_6.numwords_b = 28;
defparam main_0_6.latency = 1;

//   %7 = alloca [28 x i32], align 4
ram_dual_port main_0_7 (
	.clk( clk ),
	.address_a( main_0_7_address_a ),
	.address_b( main_0_7_address_b ),
	.wren_a( main_0_7_write_enable_a ),
	.wren_b( main_0_7_write_enable_b ),
	.data_a( main_0_7_in_a ),
	.data_b( main_0_7_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_7_out_a ),
	.q_b( main_0_7_out_b)
);
defparam main_0_7.width_a = 32;
defparam main_0_7.width_b = 32;
defparam main_0_7.widthad_a = 5;
defparam main_0_7.widthad_b = 5;
defparam main_0_7.width_be_a = 1;
defparam main_0_7.width_be_b = 1;
defparam main_0_7.numwords_a = 28;
defparam main_0_7.numwords_b = 28;
defparam main_0_7.latency = 1;


/* Unsynthesizable Statements */
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %90 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str2, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader29_4))
begin
$write("\n");
end
/* main: %.preheader29*/
/*   %99 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str2, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader29_4))
begin
$write("\n");
end
/* main: %.preheader29*/
/*   %108 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str2, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader29_4))
begin
$write("\n");
end
/* main: %.preheader29*/
/*   %117 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str2, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader29_4))
begin
$write("\n");
end
/* main: %.preheader29*/
/*   %118 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([40 x i8]* @.str3, i32 0, i32 0), i32 %sum.0, i32 %sum_1hop.0) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader29_4))
begin
$write("\nEvaluation = %d\nEvaluation 1-hop = %d\n", $signed(main__backedge_sum_0_reg), $signed(main__backedge_sum_1hop_0_reg));
// to fix quartus warning
if (reset == 1'b0 && ^(main__backedge_sum_0_reg) === 1'bX) finish <= 0;
if (reset == 1'b0 && ^(main__backedge_sum_1hop_0_reg) === 1'bX) finish <= 0;
end
/* main: %.preheader29*/
/*   %83 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %82) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader29_5))
begin
$write("%3d ", $signed(main__preheader29_82));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader29_82) === 1'bX) finish <= 0;
end
/* main: %.preheader29*/
/*   %85 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %84) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader29_5))
begin
$write("%3d ", $signed(main__preheader29_84));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader29_84) === 1'bX) finish <= 0;
end
/* main: %.preheader29*/
/*   %87 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %86) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader29_6))
begin
$write("%3d ", $signed(main__preheader29_86));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader29_86) === 1'bX) finish <= 0;
end
/* main: %.preheader29*/
/*   %89 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %88) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader29_6))
begin
$write("%3d ", $signed(main__preheader29_88));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader29_88) === 1'bX) finish <= 0;
end
/* main: %.preheader29*/
/*   %92 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %91) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader29_7))
begin
$write("%3d ", $signed(main__preheader29_91));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader29_91) === 1'bX) finish <= 0;
end
/* main: %.preheader29*/
/*   %94 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %93) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader29_7))
begin
$write("%3d ", $signed(main__preheader29_93));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader29_93) === 1'bX) finish <= 0;
end
/* main: %.preheader29*/
/*   %96 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %95) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader29_8))
begin
$write("%3d ", $signed(main__preheader29_95));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader29_95) === 1'bX) finish <= 0;
end
/* main: %.preheader29*/
/*   %98 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %97) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader29_8))
begin
$write("%3d ", $signed(main__preheader29_97));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader29_97) === 1'bX) finish <= 0;
end
/* main: %.preheader29*/
/*   %101 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %100) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader29_9))
begin
$write("%3d ", $signed(main__preheader29_100));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader29_100) === 1'bX) finish <= 0;
end
/* main: %.preheader29*/
/*   %103 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %102) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader29_9))
begin
$write("%3d ", $signed(main__preheader29_102));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader29_102) === 1'bX) finish <= 0;
end
/* main: %.preheader29*/
/*   %105 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %104) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader29_10))
begin
$write("%3d ", $signed(main__preheader29_104));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader29_104) === 1'bX) finish <= 0;
end
/* main: %.preheader29*/
/*   %107 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %106) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader29_10))
begin
$write("%3d ", $signed(main__preheader29_106));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader29_106) === 1'bX) finish <= 0;
end
/* main: %.preheader29*/
/*   %110 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %109) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader29_11))
begin
$write("%3d ", $signed(main__preheader29_109));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader29_109) === 1'bX) finish <= 0;
end
/* main: %.preheader29*/
/*   %112 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %111) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader29_11))
begin
$write("%3d ", $signed(main__preheader29_111));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader29_111) === 1'bX) finish <= 0;
end
/* main: %.preheader29*/
/*   %114 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %113) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader29_12))
begin
$write("%3d ", $signed(main__preheader29_113));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader29_113) === 1'bX) finish <= 0;
end
/* main: %.preheader29*/
/*   %116 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %115) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader29_12))
begin
$write("%3d ", $signed(main__preheader29_115));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader29_115) === 1'bX) finish <= 0;
end
/* main: %164*/
/*   %165 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB_164_51))
begin
$write("No solution\n");
end
/* main: %191*/
/*   %192 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB_191_62))
begin
$write("No solution\n");
end
end
always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_2;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__backedge_2;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg == 32'd5)))
begin
cur_state <= LEGUP_F_main_BB__preheader29_4;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader29_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg == 32'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_13;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg == 32'd1)))
begin
cur_state <= LEGUP_F_main_BB_125_38;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_125_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg == 32'd2)))
begin
cur_state <= LEGUP_F_main_BB_139_42;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_139_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg == 32'd3)))
begin
cur_state <= LEGUP_F_main_BB_168_53;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_168_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg == 32'd4)))
begin
cur_state <= LEGUP_F_main_BB_197_65;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_197_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_2;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader29_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader29_4;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader29_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader29_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader29_5;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader29_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader29_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader29_5;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader29_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader29_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader29_6;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader29_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader29_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader29_6;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader29_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader29_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader29_7;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader29_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader29_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader29_7;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader29_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader29_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader29_8;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader29_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader29_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader29_8;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader29_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader29_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader29_9;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader29_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader29_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader29_9;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader29_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader29_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader29_10;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader29_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader29_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader29_10;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader29_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader29_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader29_11;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader29_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader29_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader29_11;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader29_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader29_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader29_12;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader29_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader29_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader29_12;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader29_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader29_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_231_102;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_231_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_13;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_14;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_14;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_15;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_15;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_16;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_16;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_17;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_17;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_18;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_18;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_19;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_19;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_20;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_20;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_21;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_21;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_22;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_22;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_23;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_23;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_24;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_24;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_25;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_25;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_26;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_26;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_27;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_27;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_119_28;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_119_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_119_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_119_28;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_119_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_119_28) & (memory_controller_waitrequest == 1'd0)) & (main_119_121 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_31;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_119_28) & (memory_controller_waitrequest == 1'd0)) & (main_119_121 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_29;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_122_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_29;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_122_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_30;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_122_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_30;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_122_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_119_28;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_119_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_31;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_32;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_32;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_33;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_33;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_34;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_34;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_35;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_35;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_36;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_36;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_37;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_37;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_125_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_125_38;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_125_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_125_38) & (memory_controller_waitrequest == 1'd0)) & (main_125_126 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_125_38) & (memory_controller_waitrequest == 1'd0)) & (main_125_126 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_127_39;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_127_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_127_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_127_39;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_127_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_127_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_127_40;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_127_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_127_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_127_40;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_127_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_127_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_127_41;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_127_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_127_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_127_41;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_127_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_127_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_139_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_139_42;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_139_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_139_42) & (memory_controller_waitrequest == 1'd0)) & (main_139_140 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_141_43;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_141_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_139_42) & (memory_controller_waitrequest == 1'd0)) & (main_139_140 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_141_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_141_43;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_141_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_141_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_141_44;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_141_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_141_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_141_44;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_141_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_141_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_141_45;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_141_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_141_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_141_45;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_141_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_141_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_141_46;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_141_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_141_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_141_46;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_141_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_141_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_141_47;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_141_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_141_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_141_47;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_141_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_141_47) & (memory_controller_waitrequest == 1'd0)) & (main_141_or_cond22 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_161_48;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_161_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_141_47) & (memory_controller_waitrequest == 1'd0)) & (main_141_or_cond22 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_162_50;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_162_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_161_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_161_48;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_161_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_161_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_161_49;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_161_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_161_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_161_49;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_161_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_161_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_166_52;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_166_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_162_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_162_50;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_162_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_162_50) & (memory_controller_waitrequest == 1'd0)) & (main_162_163 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_164_51;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_164_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_162_50) & (memory_controller_waitrequest == 1'd0)) & (main_162_163 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_166_52;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_166_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_164_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_164_51;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_164_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_164_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_231_102;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_231_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_166_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_166_52;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_166_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_166_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_168_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_168_53;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_168_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_168_53) & (memory_controller_waitrequest == 1'd0)) & (main_168_169 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_172_55;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_172_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_168_53) & (memory_controller_waitrequest == 1'd0)) & (main_168_169 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_170_54;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_170_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_170_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_170_54;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_170_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_170_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_172_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_172_55;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_172_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_172_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_172_56;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_172_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_172_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_172_56;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_172_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_172_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_172_57;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_172_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_172_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_172_57;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_172_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_172_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_172_58;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_172_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_172_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_172_58;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_172_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_172_58) & (memory_controller_waitrequest == 1'd0)) & (main_172_or_cond26 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_185_59;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_185_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_172_58) & (memory_controller_waitrequest == 1'd0)) & (main_172_or_cond26 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_189_61;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_189_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_185_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_185_59;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_185_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_185_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_185_60;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_185_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_185_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_185_60;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_185_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_185_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_189_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_189_61;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_189_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_189_61) & (memory_controller_waitrequest == 1'd0)) & (main_189_190 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_191_62;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_191_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_189_61) & (memory_controller_waitrequest == 1'd0)) & (main_189_190 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_193_63;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_193_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_191_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_191_62;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_191_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_191_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_231_102;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_231_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_193_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_193_63;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_193_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_193_63) & (memory_controller_waitrequest == 1'd0)) & (main_168_169_reg == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_193_63) & (memory_controller_waitrequest == 1'd0)) & (main_168_169_reg == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_196_64;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_196_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_196_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_196_64;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_196_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_196_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_197_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_197_65;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_197_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_197_65) & (memory_controller_waitrequest == 1'd0)) & (main_197_198 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_197_65) & (memory_controller_waitrequest == 1'd0)) & (main_197_198 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_66;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_66;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_67;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_67;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_68;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_68;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_69;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_69;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_70;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_70;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_71;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_71;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_72;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_72;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_73;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_73;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_74;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_74;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_75;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_75;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_76;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_76;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_77;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_77;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_78;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_78;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_79;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_79;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_80;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_80;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_81;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_81;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_82;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_82;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_83;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_83;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_84;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_84;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_85;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_85;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_86;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_86;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_87;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_87;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_88;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_88;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_89;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_89;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_90;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_90;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_91;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_91;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_92;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_92;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_93;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_93;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_94;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_94;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_95;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_95;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_96;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_96;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_97;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_97;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_98;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_98;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_99;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_99;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_100;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_100;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_199_101;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_199_101;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_199_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_199_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_231_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_231_102;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_231_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_231_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 7'd0;
if (reset == 1'b0 && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %.sub8 = getelementptr inbounds [11 x i32]* %1, i32 0, i32 0*/
if (reset) begin main_0__sub8 = 0; end
begin
main_0__sub8 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %.sub8 = getelementptr inbounds [11 x i32]* %1, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0__sub8_reg <= main_0__sub8;
if (reset == 1'b0 && ^(main_0__sub8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0__sub8_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %.sub9 = getelementptr inbounds [11 x i32]* %2, i32 0, i32 0*/
if (reset) begin main_0__sub9 = 0; end
begin
main_0__sub9 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %.sub9 = getelementptr inbounds [11 x i32]* %2, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0__sub9_reg <= main_0__sub9;
if (reset == 1'b0 && ^(main_0__sub9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0__sub9_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %.sub13 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 0*/
if (reset) begin main_0__sub13 = 0; end
begin
main_0__sub13 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %.sub13 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0__sub13_reg <= main_0__sub13;
if (reset == 1'b0 && ^(main_0__sub13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0__sub13_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %.sub14 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 0*/
if (reset) begin main_0__sub14 = 0; end
begin
main_0__sub14 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %.sub14 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0__sub14_reg <= main_0__sub14;
if (reset == 1'b0 && ^(main_0__sub14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0__sub14_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %8 = getelementptr inbounds [11 x i32]* %1, i32 0, i32 1*/
if (reset) begin main_0_8 = 0; end
begin
main_0_8 = (1'd0 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %8 = getelementptr inbounds [11 x i32]* %1, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_8_reg <= main_0_8;
if (reset == 1'b0 && ^(main_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_8_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %9 = getelementptr inbounds [11 x i32]* %2, i32 0, i32 1*/
if (reset) begin main_0_9 = 0; end
begin
main_0_9 = (1'd0 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %9 = getelementptr inbounds [11 x i32]* %2, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_9_reg <= main_0_9;
if (reset == 1'b0 && ^(main_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_9_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %10 = getelementptr inbounds [11 x i32]* %1, i32 0, i32 2*/
if (reset) begin main_0_10 = 0; end
begin
main_0_10 = (1'd0 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %10 = getelementptr inbounds [11 x i32]* %1, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_10_reg <= main_0_10;
if (reset == 1'b0 && ^(main_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_10_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %11 = getelementptr inbounds [11 x i32]* %2, i32 0, i32 2*/
if (reset) begin main_0_11 = 0; end
begin
main_0_11 = (1'd0 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %11 = getelementptr inbounds [11 x i32]* %2, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_11_reg <= main_0_11;
if (reset == 1'b0 && ^(main_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_11_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %12 = getelementptr inbounds [11 x i32]* %1, i32 0, i32 3*/
if (reset) begin main_0_12 = 0; end
begin
main_0_12 = (1'd0 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %12 = getelementptr inbounds [11 x i32]* %1, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_12_reg <= main_0_12;
if (reset == 1'b0 && ^(main_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_12_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %13 = getelementptr inbounds [11 x i32]* %2, i32 0, i32 3*/
if (reset) begin main_0_13 = 0; end
begin
main_0_13 = (1'd0 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %13 = getelementptr inbounds [11 x i32]* %2, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_13_reg <= main_0_13;
if (reset == 1'b0 && ^(main_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_13_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %14 = getelementptr inbounds [11 x i32]* %1, i32 0, i32 4*/
if (reset) begin main_0_14 = 0; end
begin
main_0_14 = (1'd0 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %14 = getelementptr inbounds [11 x i32]* %1, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_14_reg <= main_0_14;
if (reset == 1'b0 && ^(main_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_14_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %15 = getelementptr inbounds [11 x i32]* %2, i32 0, i32 4*/
if (reset) begin main_0_15 = 0; end
begin
main_0_15 = (1'd0 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %15 = getelementptr inbounds [11 x i32]* %2, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_15_reg <= main_0_15;
if (reset == 1'b0 && ^(main_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_15_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %16 = getelementptr inbounds [11 x i32]* %1, i32 0, i32 5*/
if (reset) begin main_0_16 = 0; end
begin
main_0_16 = (1'd0 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %16 = getelementptr inbounds [11 x i32]* %1, i32 0, i32 5*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_16_reg <= main_0_16;
if (reset == 1'b0 && ^(main_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_16_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %17 = getelementptr inbounds [11 x i32]* %2, i32 0, i32 5*/
if (reset) begin main_0_17 = 0; end
begin
main_0_17 = (1'd0 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %17 = getelementptr inbounds [11 x i32]* %2, i32 0, i32 5*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_17_reg <= main_0_17;
if (reset == 1'b0 && ^(main_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_17_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %18 = getelementptr inbounds [11 x i32]* %1, i32 0, i32 6*/
if (reset) begin main_0_18 = 0; end
begin
main_0_18 = (1'd0 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %18 = getelementptr inbounds [11 x i32]* %1, i32 0, i32 6*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_18_reg <= main_0_18;
if (reset == 1'b0 && ^(main_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_18_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %19 = getelementptr inbounds [11 x i32]* %2, i32 0, i32 6*/
if (reset) begin main_0_19 = 0; end
begin
main_0_19 = (1'd0 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %19 = getelementptr inbounds [11 x i32]* %2, i32 0, i32 6*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_19_reg <= main_0_19;
if (reset == 1'b0 && ^(main_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_19_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %20 = getelementptr inbounds [11 x i32]* %1, i32 0, i32 7*/
if (reset) begin main_0_20 = 0; end
begin
main_0_20 = (1'd0 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %20 = getelementptr inbounds [11 x i32]* %1, i32 0, i32 7*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_20_reg <= main_0_20;
if (reset == 1'b0 && ^(main_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_20_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %21 = getelementptr inbounds [11 x i32]* %2, i32 0, i32 7*/
if (reset) begin main_0_21 = 0; end
begin
main_0_21 = (1'd0 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %21 = getelementptr inbounds [11 x i32]* %2, i32 0, i32 7*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_21_reg <= main_0_21;
if (reset == 1'b0 && ^(main_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_21_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %22 = getelementptr inbounds [11 x i32]* %1, i32 0, i32 8*/
if (reset) begin main_0_22 = 0; end
begin
main_0_22 = (1'd0 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %22 = getelementptr inbounds [11 x i32]* %1, i32 0, i32 8*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_22_reg <= main_0_22;
if (reset == 1'b0 && ^(main_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_22_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %23 = getelementptr inbounds [11 x i32]* %2, i32 0, i32 8*/
if (reset) begin main_0_23 = 0; end
begin
main_0_23 = (1'd0 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %23 = getelementptr inbounds [11 x i32]* %2, i32 0, i32 8*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_23_reg <= main_0_23;
if (reset == 1'b0 && ^(main_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_23_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %24 = getelementptr inbounds [11 x i32]* %1, i32 0, i32 9*/
if (reset) begin main_0_24 = 0; end
begin
main_0_24 = (1'd0 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %24 = getelementptr inbounds [11 x i32]* %1, i32 0, i32 9*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_24_reg <= main_0_24;
if (reset == 1'b0 && ^(main_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_24_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %25 = getelementptr inbounds [11 x i32]* %2, i32 0, i32 9*/
if (reset) begin main_0_25 = 0; end
begin
main_0_25 = (1'd0 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %25 = getelementptr inbounds [11 x i32]* %2, i32 0, i32 9*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_25_reg <= main_0_25;
if (reset == 1'b0 && ^(main_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_25_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %26 = getelementptr inbounds [11 x i32]* %1, i32 0, i32 10*/
if (reset) begin main_0_26 = 0; end
begin
main_0_26 = (1'd0 + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %26 = getelementptr inbounds [11 x i32]* %1, i32 0, i32 10*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_26_reg <= main_0_26;
if (reset == 1'b0 && ^(main_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_26_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %27 = getelementptr inbounds [11 x i32]* %2, i32 0, i32 10*/
if (reset) begin main_0_27 = 0; end
begin
main_0_27 = (1'd0 + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %27 = getelementptr inbounds [11 x i32]* %2, i32 0, i32 10*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_27_reg <= main_0_27;
if (reset == 1'b0 && ^(main_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_27_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %28 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 1*/
if (reset) begin main_0_28 = 0; end
begin
main_0_28 = (1'd0 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %28 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_28_reg <= main_0_28;
if (reset == 1'b0 && ^(main_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_28_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %29 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 1*/
if (reset) begin main_0_29 = 0; end
begin
main_0_29 = (1'd0 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %29 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_29_reg <= main_0_29;
if (reset == 1'b0 && ^(main_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_29_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %30 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 2*/
if (reset) begin main_0_30 = 0; end
begin
main_0_30 = (1'd0 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %30 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_30_reg <= main_0_30;
if (reset == 1'b0 && ^(main_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_30_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %31 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 2*/
if (reset) begin main_0_31 = 0; end
begin
main_0_31 = (1'd0 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %31 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_31_reg <= main_0_31;
if (reset == 1'b0 && ^(main_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_31_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %32 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 3*/
if (reset) begin main_0_32 = 0; end
begin
main_0_32 = (1'd0 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %32 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_32_reg <= main_0_32;
if (reset == 1'b0 && ^(main_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_32_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %33 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 3*/
if (reset) begin main_0_33 = 0; end
begin
main_0_33 = (1'd0 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %33 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_33_reg <= main_0_33;
if (reset == 1'b0 && ^(main_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_33_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %34 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 4*/
if (reset) begin main_0_34 = 0; end
begin
main_0_34 = (1'd0 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %34 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_34_reg <= main_0_34;
if (reset == 1'b0 && ^(main_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_34_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %35 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 4*/
if (reset) begin main_0_35 = 0; end
begin
main_0_35 = (1'd0 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %35 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_35_reg <= main_0_35;
if (reset == 1'b0 && ^(main_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_35_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %36 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 5*/
if (reset) begin main_0_36 = 0; end
begin
main_0_36 = (1'd0 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %36 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 5*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_36_reg <= main_0_36;
if (reset == 1'b0 && ^(main_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_36_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %37 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 5*/
if (reset) begin main_0_37 = 0; end
begin
main_0_37 = (1'd0 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %37 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 5*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_37_reg <= main_0_37;
if (reset == 1'b0 && ^(main_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_37_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %38 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 6*/
if (reset) begin main_0_38 = 0; end
begin
main_0_38 = (1'd0 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %38 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 6*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_38_reg <= main_0_38;
if (reset == 1'b0 && ^(main_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_38_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %39 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 6*/
if (reset) begin main_0_39 = 0; end
begin
main_0_39 = (1'd0 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %39 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 6*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_39_reg <= main_0_39;
if (reset == 1'b0 && ^(main_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_39_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %40 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 7*/
if (reset) begin main_0_40 = 0; end
begin
main_0_40 = (1'd0 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %40 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 7*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_40_reg <= main_0_40;
if (reset == 1'b0 && ^(main_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_40_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %41 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 7*/
if (reset) begin main_0_41 = 0; end
begin
main_0_41 = (1'd0 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %41 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 7*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_41_reg <= main_0_41;
if (reset == 1'b0 && ^(main_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_41_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %42 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 8*/
if (reset) begin main_0_42 = 0; end
begin
main_0_42 = (1'd0 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %42 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 8*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_42_reg <= main_0_42;
if (reset == 1'b0 && ^(main_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_42_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %43 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 8*/
if (reset) begin main_0_43 = 0; end
begin
main_0_43 = (1'd0 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %43 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 8*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_43_reg <= main_0_43;
if (reset == 1'b0 && ^(main_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_43_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %44 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 9*/
if (reset) begin main_0_44 = 0; end
begin
main_0_44 = (1'd0 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %44 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 9*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_44_reg <= main_0_44;
if (reset == 1'b0 && ^(main_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_44_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %45 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 9*/
if (reset) begin main_0_45 = 0; end
begin
main_0_45 = (1'd0 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %45 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 9*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_45_reg <= main_0_45;
if (reset == 1'b0 && ^(main_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_45_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %46 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 10*/
if (reset) begin main_0_46 = 0; end
begin
main_0_46 = (1'd0 + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %46 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 10*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_46_reg <= main_0_46;
if (reset == 1'b0 && ^(main_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_46_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %47 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 10*/
if (reset) begin main_0_47 = 0; end
begin
main_0_47 = (1'd0 + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %47 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 10*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_47_reg <= main_0_47;
if (reset == 1'b0 && ^(main_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_47_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %48 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 11*/
if (reset) begin main_0_48 = 0; end
begin
main_0_48 = (1'd0 + (4 * 32'd11));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %48 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 11*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_48_reg <= main_0_48;
if (reset == 1'b0 && ^(main_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_48_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %49 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 11*/
if (reset) begin main_0_49 = 0; end
begin
main_0_49 = (1'd0 + (4 * 32'd11));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %49 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 11*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_49_reg <= main_0_49;
if (reset == 1'b0 && ^(main_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_49_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %50 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 12*/
if (reset) begin main_0_50 = 0; end
begin
main_0_50 = (1'd0 + (4 * 32'd12));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %50 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 12*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_50_reg <= main_0_50;
if (reset == 1'b0 && ^(main_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_50_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %51 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 12*/
if (reset) begin main_0_51 = 0; end
begin
main_0_51 = (1'd0 + (4 * 32'd12));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %51 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 12*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_51_reg <= main_0_51;
if (reset == 1'b0 && ^(main_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_51_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %52 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 13*/
if (reset) begin main_0_52 = 0; end
begin
main_0_52 = (1'd0 + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %52 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 13*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_52_reg <= main_0_52;
if (reset == 1'b0 && ^(main_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_52_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %53 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 13*/
if (reset) begin main_0_53 = 0; end
begin
main_0_53 = (1'd0 + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %53 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 13*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_53_reg <= main_0_53;
if (reset == 1'b0 && ^(main_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_53_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %54 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 14*/
if (reset) begin main_0_54 = 0; end
begin
main_0_54 = (1'd0 + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %54 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 14*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_54_reg <= main_0_54;
if (reset == 1'b0 && ^(main_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_54_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %55 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 14*/
if (reset) begin main_0_55 = 0; end
begin
main_0_55 = (1'd0 + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %55 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 14*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_55_reg <= main_0_55;
if (reset == 1'b0 && ^(main_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_55_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %56 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 15*/
if (reset) begin main_0_56 = 0; end
begin
main_0_56 = (1'd0 + (4 * 32'd15));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %56 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 15*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_56_reg <= main_0_56;
if (reset == 1'b0 && ^(main_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_56_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %57 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 15*/
if (reset) begin main_0_57 = 0; end
begin
main_0_57 = (1'd0 + (4 * 32'd15));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %57 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 15*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_57_reg <= main_0_57;
if (reset == 1'b0 && ^(main_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_57_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %58 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 16*/
if (reset) begin main_0_58 = 0; end
begin
main_0_58 = (1'd0 + (4 * 32'd16));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %58 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 16*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_58_reg <= main_0_58;
if (reset == 1'b0 && ^(main_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_58_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %59 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 16*/
if (reset) begin main_0_59 = 0; end
begin
main_0_59 = (1'd0 + (4 * 32'd16));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %59 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 16*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_59_reg <= main_0_59;
if (reset == 1'b0 && ^(main_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_59_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %60 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 17*/
if (reset) begin main_0_60 = 0; end
begin
main_0_60 = (1'd0 + (4 * 32'd17));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %60 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 17*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_60_reg <= main_0_60;
if (reset == 1'b0 && ^(main_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_60_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %61 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 17*/
if (reset) begin main_0_61 = 0; end
begin
main_0_61 = (1'd0 + (4 * 32'd17));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %61 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 17*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_61_reg <= main_0_61;
if (reset == 1'b0 && ^(main_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_61_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %62 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 18*/
if (reset) begin main_0_62 = 0; end
begin
main_0_62 = (1'd0 + (4 * 32'd18));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %62 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 18*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_62_reg <= main_0_62;
if (reset == 1'b0 && ^(main_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_62_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %63 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 18*/
if (reset) begin main_0_63 = 0; end
begin
main_0_63 = (1'd0 + (4 * 32'd18));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %63 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 18*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_63_reg <= main_0_63;
if (reset == 1'b0 && ^(main_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_63_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %64 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 19*/
if (reset) begin main_0_64 = 0; end
begin
main_0_64 = (1'd0 + (4 * 32'd19));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %64 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 19*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_64_reg <= main_0_64;
if (reset == 1'b0 && ^(main_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_64_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %65 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 19*/
if (reset) begin main_0_65 = 0; end
begin
main_0_65 = (1'd0 + (4 * 32'd19));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %65 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 19*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_65_reg <= main_0_65;
if (reset == 1'b0 && ^(main_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_65_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %66 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 20*/
if (reset) begin main_0_66 = 0; end
begin
main_0_66 = (1'd0 + (4 * 32'd20));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %66 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 20*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_66_reg <= main_0_66;
if (reset == 1'b0 && ^(main_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_66_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %67 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 20*/
if (reset) begin main_0_67 = 0; end
begin
main_0_67 = (1'd0 + (4 * 32'd20));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %67 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 20*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_67_reg <= main_0_67;
if (reset == 1'b0 && ^(main_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_67_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %68 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 21*/
if (reset) begin main_0_68 = 0; end
begin
main_0_68 = (1'd0 + (4 * 32'd21));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %68 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 21*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_68_reg <= main_0_68;
if (reset == 1'b0 && ^(main_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_68_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %69 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 21*/
if (reset) begin main_0_69 = 0; end
begin
main_0_69 = (1'd0 + (4 * 32'd21));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %69 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 21*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_69_reg <= main_0_69;
if (reset == 1'b0 && ^(main_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_69_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %70 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 22*/
if (reset) begin main_0_70 = 0; end
begin
main_0_70 = (1'd0 + (4 * 32'd22));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %70 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 22*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_70_reg <= main_0_70;
if (reset == 1'b0 && ^(main_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_70_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %71 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 22*/
if (reset) begin main_0_71 = 0; end
begin
main_0_71 = (1'd0 + (4 * 32'd22));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %71 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 22*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_71_reg <= main_0_71;
if (reset == 1'b0 && ^(main_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_71_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %72 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 23*/
if (reset) begin main_0_72 = 0; end
begin
main_0_72 = (1'd0 + (4 * 32'd23));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %72 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 23*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_72_reg <= main_0_72;
if (reset == 1'b0 && ^(main_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_72_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %73 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 23*/
if (reset) begin main_0_73 = 0; end
begin
main_0_73 = (1'd0 + (4 * 32'd23));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %73 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 23*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_73_reg <= main_0_73;
if (reset == 1'b0 && ^(main_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_73_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %74 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 24*/
if (reset) begin main_0_74 = 0; end
begin
main_0_74 = (1'd0 + (4 * 32'd24));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %74 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 24*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_74_reg <= main_0_74;
if (reset == 1'b0 && ^(main_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_74_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %75 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 24*/
if (reset) begin main_0_75 = 0; end
begin
main_0_75 = (1'd0 + (4 * 32'd24));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %75 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 24*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_75_reg <= main_0_75;
if (reset == 1'b0 && ^(main_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_75_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %76 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 25*/
if (reset) begin main_0_76 = 0; end
begin
main_0_76 = (1'd0 + (4 * 32'd25));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %76 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 25*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_76_reg <= main_0_76;
if (reset == 1'b0 && ^(main_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_76_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %77 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 25*/
if (reset) begin main_0_77 = 0; end
begin
main_0_77 = (1'd0 + (4 * 32'd25));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %77 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 25*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_77_reg <= main_0_77;
if (reset == 1'b0 && ^(main_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_77_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %78 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 26*/
if (reset) begin main_0_78 = 0; end
begin
main_0_78 = (1'd0 + (4 * 32'd26));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %78 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 26*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_78_reg <= main_0_78;
if (reset == 1'b0 && ^(main_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_78_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %79 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 26*/
if (reset) begin main_0_79 = 0; end
begin
main_0_79 = (1'd0 + (4 * 32'd26));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %79 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 26*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_79_reg <= main_0_79;
if (reset == 1'b0 && ^(main_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_79_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %80 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 27*/
if (reset) begin main_0_80 = 0; end
begin
main_0_80 = (1'd0 + (4 * 32'd27));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %80 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 27*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_80_reg <= main_0_80;
if (reset == 1'b0 && ^(main_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_80_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %81 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 27*/
if (reset) begin main_0_81 = 0; end
begin
main_0_81 = (1'd0 + (4 * 32'd27));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %81 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 27*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_81_reg <= main_0_81;
if (reset == 1'b0 && ^(main_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_81_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep52 = getelementptr [16 x i32]* %5, i32 0, i32 0*/
if (reset) begin main_0_scevgep52 = 0; end
begin
main_0_scevgep52 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep52 = getelementptr [16 x i32]* %5, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep52_reg <= main_0_scevgep52;
if (reset == 1'b0 && ^(main_0_scevgep52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep52_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep64 = getelementptr [11 x i32]* %3, i32 0, i32 0*/
if (reset) begin main_0_scevgep64 = 0; end
begin
main_0_scevgep64 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep64 = getelementptr [11 x i32]* %3, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep64_reg <= main_0_scevgep64;
if (reset == 1'b0 && ^(main_0_scevgep64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep64_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep65 = getelementptr [11 x i32]* %4, i32 0, i32 0*/
if (reset) begin main_0_scevgep65 = 0; end
begin
main_0_scevgep65 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep65 = getelementptr [11 x i32]* %4, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep65_reg <= main_0_scevgep65;
if (reset == 1'b0 && ^(main_0_scevgep65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep65_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep64.1 = getelementptr [11 x i32]* %3, i32 0, i32 1*/
if (reset) begin main_0_scevgep64_1 = 0; end
begin
main_0_scevgep64_1 = (1'd0 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep64.1 = getelementptr [11 x i32]* %3, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep64_1_reg <= main_0_scevgep64_1;
if (reset == 1'b0 && ^(main_0_scevgep64_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep64_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep65.1 = getelementptr [11 x i32]* %4, i32 0, i32 1*/
if (reset) begin main_0_scevgep65_1 = 0; end
begin
main_0_scevgep65_1 = (1'd0 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep65.1 = getelementptr [11 x i32]* %4, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep65_1_reg <= main_0_scevgep65_1;
if (reset == 1'b0 && ^(main_0_scevgep65_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep65_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep64.2 = getelementptr [11 x i32]* %3, i32 0, i32 2*/
if (reset) begin main_0_scevgep64_2 = 0; end
begin
main_0_scevgep64_2 = (1'd0 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep64.2 = getelementptr [11 x i32]* %3, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep64_2_reg <= main_0_scevgep64_2;
if (reset == 1'b0 && ^(main_0_scevgep64_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep64_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep65.2 = getelementptr [11 x i32]* %4, i32 0, i32 2*/
if (reset) begin main_0_scevgep65_2 = 0; end
begin
main_0_scevgep65_2 = (1'd0 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep65.2 = getelementptr [11 x i32]* %4, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep65_2_reg <= main_0_scevgep65_2;
if (reset == 1'b0 && ^(main_0_scevgep65_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep65_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep64.3 = getelementptr [11 x i32]* %3, i32 0, i32 3*/
if (reset) begin main_0_scevgep64_3 = 0; end
begin
main_0_scevgep64_3 = (1'd0 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep64.3 = getelementptr [11 x i32]* %3, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep64_3_reg <= main_0_scevgep64_3;
if (reset == 1'b0 && ^(main_0_scevgep64_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep64_3_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep65.3 = getelementptr [11 x i32]* %4, i32 0, i32 3*/
if (reset) begin main_0_scevgep65_3 = 0; end
begin
main_0_scevgep65_3 = (1'd0 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep65.3 = getelementptr [11 x i32]* %4, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep65_3_reg <= main_0_scevgep65_3;
if (reset == 1'b0 && ^(main_0_scevgep65_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep65_3_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep64.4 = getelementptr [11 x i32]* %3, i32 0, i32 4*/
if (reset) begin main_0_scevgep64_4 = 0; end
begin
main_0_scevgep64_4 = (1'd0 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep64.4 = getelementptr [11 x i32]* %3, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep64_4_reg <= main_0_scevgep64_4;
if (reset == 1'b0 && ^(main_0_scevgep64_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep64_4_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep65.4 = getelementptr [11 x i32]* %4, i32 0, i32 4*/
if (reset) begin main_0_scevgep65_4 = 0; end
begin
main_0_scevgep65_4 = (1'd0 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep65.4 = getelementptr [11 x i32]* %4, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep65_4_reg <= main_0_scevgep65_4;
if (reset == 1'b0 && ^(main_0_scevgep65_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep65_4_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep64.5 = getelementptr [11 x i32]* %3, i32 0, i32 5*/
if (reset) begin main_0_scevgep64_5 = 0; end
begin
main_0_scevgep64_5 = (1'd0 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep64.5 = getelementptr [11 x i32]* %3, i32 0, i32 5*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep64_5_reg <= main_0_scevgep64_5;
if (reset == 1'b0 && ^(main_0_scevgep64_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep64_5_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep65.5 = getelementptr [11 x i32]* %4, i32 0, i32 5*/
if (reset) begin main_0_scevgep65_5 = 0; end
begin
main_0_scevgep65_5 = (1'd0 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep65.5 = getelementptr [11 x i32]* %4, i32 0, i32 5*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep65_5_reg <= main_0_scevgep65_5;
if (reset == 1'b0 && ^(main_0_scevgep65_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep65_5_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep64.6 = getelementptr [11 x i32]* %3, i32 0, i32 6*/
if (reset) begin main_0_scevgep64_6 = 0; end
begin
main_0_scevgep64_6 = (1'd0 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep64.6 = getelementptr [11 x i32]* %3, i32 0, i32 6*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep64_6_reg <= main_0_scevgep64_6;
if (reset == 1'b0 && ^(main_0_scevgep64_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep64_6_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep65.6 = getelementptr [11 x i32]* %4, i32 0, i32 6*/
if (reset) begin main_0_scevgep65_6 = 0; end
begin
main_0_scevgep65_6 = (1'd0 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep65.6 = getelementptr [11 x i32]* %4, i32 0, i32 6*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep65_6_reg <= main_0_scevgep65_6;
if (reset == 1'b0 && ^(main_0_scevgep65_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep65_6_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep64.7 = getelementptr [11 x i32]* %3, i32 0, i32 7*/
if (reset) begin main_0_scevgep64_7 = 0; end
begin
main_0_scevgep64_7 = (1'd0 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep64.7 = getelementptr [11 x i32]* %3, i32 0, i32 7*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep64_7_reg <= main_0_scevgep64_7;
if (reset == 1'b0 && ^(main_0_scevgep64_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep64_7_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep65.7 = getelementptr [11 x i32]* %4, i32 0, i32 7*/
if (reset) begin main_0_scevgep65_7 = 0; end
begin
main_0_scevgep65_7 = (1'd0 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep65.7 = getelementptr [11 x i32]* %4, i32 0, i32 7*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep65_7_reg <= main_0_scevgep65_7;
if (reset == 1'b0 && ^(main_0_scevgep65_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep65_7_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep64.8 = getelementptr [11 x i32]* %3, i32 0, i32 8*/
if (reset) begin main_0_scevgep64_8 = 0; end
begin
main_0_scevgep64_8 = (1'd0 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep64.8 = getelementptr [11 x i32]* %3, i32 0, i32 8*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep64_8_reg <= main_0_scevgep64_8;
if (reset == 1'b0 && ^(main_0_scevgep64_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep64_8_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep65.8 = getelementptr [11 x i32]* %4, i32 0, i32 8*/
if (reset) begin main_0_scevgep65_8 = 0; end
begin
main_0_scevgep65_8 = (1'd0 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep65.8 = getelementptr [11 x i32]* %4, i32 0, i32 8*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep65_8_reg <= main_0_scevgep65_8;
if (reset == 1'b0 && ^(main_0_scevgep65_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep65_8_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep64.9 = getelementptr [11 x i32]* %3, i32 0, i32 9*/
if (reset) begin main_0_scevgep64_9 = 0; end
begin
main_0_scevgep64_9 = (1'd0 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep64.9 = getelementptr [11 x i32]* %3, i32 0, i32 9*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep64_9_reg <= main_0_scevgep64_9;
if (reset == 1'b0 && ^(main_0_scevgep64_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep64_9_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep65.9 = getelementptr [11 x i32]* %4, i32 0, i32 9*/
if (reset) begin main_0_scevgep65_9 = 0; end
begin
main_0_scevgep65_9 = (1'd0 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep65.9 = getelementptr [11 x i32]* %4, i32 0, i32 9*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep65_9_reg <= main_0_scevgep65_9;
if (reset == 1'b0 && ^(main_0_scevgep65_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep65_9_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep64.10 = getelementptr [11 x i32]* %3, i32 0, i32 10*/
if (reset) begin main_0_scevgep64_10 = 0; end
begin
main_0_scevgep64_10 = (1'd0 + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep64.10 = getelementptr [11 x i32]* %3, i32 0, i32 10*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep64_10_reg <= main_0_scevgep64_10;
if (reset == 1'b0 && ^(main_0_scevgep64_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep64_10_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep65.10 = getelementptr [11 x i32]* %4, i32 0, i32 10*/
if (reset) begin main_0_scevgep65_10 = 0; end
begin
main_0_scevgep65_10 = (1'd0 + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep65.10 = getelementptr [11 x i32]* %4, i32 0, i32 10*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep65_10_reg <= main_0_scevgep65_10;
if (reset == 1'b0 && ^(main_0_scevgep65_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep65_10_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %sum.0 = phi i32 [ 0, %0 ], [ %sum.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_sum_0 = 32'd0;
end
/* main: %.backedge*/
/*   %sum.0 = phi i32 [ 0, %0 ], [ %sum.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_sum_0 = main__backedge_backedge_sum_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %sum.0 = phi i32 [ 0, %0 ], [ %sum.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_sum_0_reg <= main__backedge_sum_0;
if (reset == 1'b0 && ^(main__backedge_sum_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_sum_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %sum.0 = phi i32 [ 0, %0 ], [ %sum.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_sum_0_reg <= main__backedge_sum_0;
if (reset == 1'b0 && ^(main__backedge_sum_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_sum_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %b.0 = phi i32 [ undef, %0 ], [ %b.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_b_0 = 0;
end
/* main: %.backedge*/
/*   %b.0 = phi i32 [ undef, %0 ], [ %b.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_b_0 = main__backedge_backedge_b_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %b.0 = phi i32 [ undef, %0 ], [ %b.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_b_0_reg <= main__backedge_b_0;
if (reset == 1'b0 && ^(main__backedge_b_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_b_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %b.0 = phi i32 [ undef, %0 ], [ %b.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_b_0_reg <= main__backedge_b_0;
if (reset == 1'b0 && ^(main__backedge_b_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_b_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %a.0 = phi i32 [ undef, %0 ], [ %a.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_a_0 = 0;
end
/* main: %.backedge*/
/*   %a.0 = phi i32 [ undef, %0 ], [ %a.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_a_0 = main__backedge_backedge_a_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %a.0 = phi i32 [ undef, %0 ], [ %a.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_a_0_reg <= main__backedge_a_0;
if (reset == 1'b0 && ^(main__backedge_a_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_a_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %a.0 = phi i32 [ undef, %0 ], [ %a.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_a_0_reg <= main__backedge_a_0;
if (reset == 1'b0 && ^(main__backedge_a_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_a_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %pos_b_X.0 = phi i32 [ undef, %0 ], [ %pos_b_X.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_b_X_0 = 0;
end
/* main: %.backedge*/
/*   %pos_b_X.0 = phi i32 [ undef, %0 ], [ %pos_b_X.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_pos_b_X_0 = main__backedge_backedge_pos_b_X_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %pos_b_X.0 = phi i32 [ undef, %0 ], [ %pos_b_X.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_b_X_0_reg <= main__backedge_pos_b_X_0;
if (reset == 1'b0 && ^(main__backedge_pos_b_X_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_pos_b_X_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %pos_b_X.0 = phi i32 [ undef, %0 ], [ %pos_b_X.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_b_X_0_reg <= main__backedge_pos_b_X_0;
if (reset == 1'b0 && ^(main__backedge_pos_b_X_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_pos_b_X_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %pos_a_Y.0 = phi i32 [ undef, %0 ], [ %pos_a_Y.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_a_Y_0 = 0;
end
/* main: %.backedge*/
/*   %pos_a_Y.0 = phi i32 [ undef, %0 ], [ %pos_a_Y.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_pos_a_Y_0 = main__backedge_backedge_pos_a_Y_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %pos_a_Y.0 = phi i32 [ undef, %0 ], [ %pos_a_Y.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_a_Y_0_reg <= main__backedge_pos_a_Y_0;
if (reset == 1'b0 && ^(main__backedge_pos_a_Y_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_pos_a_Y_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %pos_a_Y.0 = phi i32 [ undef, %0 ], [ %pos_a_Y.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_a_Y_0_reg <= main__backedge_pos_a_Y_0;
if (reset == 1'b0 && ^(main__backedge_pos_a_Y_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_pos_a_Y_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %pos_a_X.0 = phi i32 [ undef, %0 ], [ %pos_a_X.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_a_X_0 = 0;
end
/* main: %.backedge*/
/*   %pos_a_X.0 = phi i32 [ undef, %0 ], [ %pos_a_X.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_pos_a_X_0 = main__backedge_backedge_pos_a_X_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %pos_a_X.0 = phi i32 [ undef, %0 ], [ %pos_a_X.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_a_X_0_reg <= main__backedge_pos_a_X_0;
if (reset == 1'b0 && ^(main__backedge_pos_a_X_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_pos_a_X_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %pos_a_X.0 = phi i32 [ undef, %0 ], [ %pos_a_X.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_a_X_0_reg <= main__backedge_pos_a_X_0;
if (reset == 1'b0 && ^(main__backedge_pos_a_X_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_pos_a_X_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %j.0 = phi i32 [ undef, %0 ], [ %j.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_j_0 = 0;
end
/* main: %.backedge*/
/*   %j.0 = phi i32 [ undef, %0 ], [ %j.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_j_0 = main__backedge_backedge_j_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %j.0 = phi i32 [ undef, %0 ], [ %j.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_j_0_reg <= main__backedge_j_0;
if (reset == 1'b0 && ^(main__backedge_j_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_j_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %j.0 = phi i32 [ undef, %0 ], [ %j.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_j_0_reg <= main__backedge_j_0;
if (reset == 1'b0 && ^(main__backedge_j_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_j_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %i.0 = phi i32 [ undef, %0 ], [ %i.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_i_0 = 0;
end
/* main: %.backedge*/
/*   %i.0 = phi i32 [ undef, %0 ], [ %i.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_i_0 = main__backedge_backedge_i_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %i.0 = phi i32 [ undef, %0 ], [ %i.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_i_0_reg <= main__backedge_i_0;
if (reset == 1'b0 && ^(main__backedge_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %i.0 = phi i32 [ undef, %0 ], [ %i.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_i_0_reg <= main__backedge_i_0;
if (reset == 1'b0 && ^(main__backedge_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %state.0 = phi i32 [ 0, %0 ], [ %state.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_state_0 = 32'd0;
end
/* main: %.backedge*/
/*   %state.0 = phi i32 [ 0, %0 ], [ %state.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_state_0 = main__backedge_backedge_state_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %state.0 = phi i32 [ 0, %0 ], [ %state.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_state_0_reg <= main__backedge_state_0;
if (reset == 1'b0 && ^(main__backedge_state_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_state_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %state.0 = phi i32 [ 0, %0 ], [ %state.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_state_0_reg <= main__backedge_state_0;
if (reset == 1'b0 && ^(main__backedge_state_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_state_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %sum_1hop.0 = phi i32 [ 0, %0 ], [ %sum_1hop.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_sum_1hop_0 = 32'd0;
end
/* main: %.backedge*/
/*   %sum_1hop.0 = phi i32 [ 0, %0 ], [ %sum_1hop.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_sum_1hop_0 = main__backedge_backedge_sum_1hop_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %sum_1hop.0 = phi i32 [ 0, %0 ], [ %sum_1hop.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_sum_1hop_0_reg <= main__backedge_sum_1hop_0;
if (reset == 1'b0 && ^(main__backedge_sum_1hop_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_sum_1hop_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %sum_1hop.0 = phi i32 [ 0, %0 ], [ %sum_1hop.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_sum_1hop_0_reg <= main__backedge_sum_1hop_0;
if (reset == 1'b0 && ^(main__backedge_sum_1hop_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_sum_1hop_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %220, %199 ], [ %sum.0, %170 ], [ %sum.0, %185 ], [ %sum.0, %196 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %125 ], [ %sum.0, %127 ], [ %sum.0, %139 ], [ %sum.0, %166 ], [ %sum.0, %193 ], [ %sum.0, %197 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %220, %199 ], [ %sum.0, %170 ], [ %sum.0, %185 ], [ %sum.0, %196 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %125 ], [ %sum.0, %127 ], [ %sum.0, %139 ], [ %sum.0, %166 ], [ %sum.0, %193 ], [ %sum.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %220, %199 ], [ %sum.0, %170 ], [ %sum.0, %185 ], [ %sum.0, %196 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %125 ], [ %sum.0, %127 ], [ %sum.0, %139 ], [ %sum.0, %166 ], [ %sum.0, %193 ], [ %sum.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_125_38) & (memory_controller_waitrequest == 1'd0)) & (main_125_126 == 1'd1)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %220, %199 ], [ %sum.0, %170 ], [ %sum.0, %185 ], [ %sum.0, %196 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %125 ], [ %sum.0, %127 ], [ %sum.0, %139 ], [ %sum.0, %166 ], [ %sum.0, %193 ], [ %sum.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_127_41) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %220, %199 ], [ %sum.0, %170 ], [ %sum.0, %185 ], [ %sum.0, %196 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %125 ], [ %sum.0, %127 ], [ %sum.0, %139 ], [ %sum.0, %166 ], [ %sum.0, %193 ], [ %sum.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_139_42) & (memory_controller_waitrequest == 1'd0)) & (main_139_140 == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %220, %199 ], [ %sum.0, %170 ], [ %sum.0, %185 ], [ %sum.0, %196 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %125 ], [ %sum.0, %127 ], [ %sum.0, %139 ], [ %sum.0, %166 ], [ %sum.0, %193 ], [ %sum.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_166_52) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %220, %199 ], [ %sum.0, %170 ], [ %sum.0, %185 ], [ %sum.0, %196 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %125 ], [ %sum.0, %127 ], [ %sum.0, %139 ], [ %sum.0, %166 ], [ %sum.0, %193 ], [ %sum.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_170_54) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %220, %199 ], [ %sum.0, %170 ], [ %sum.0, %185 ], [ %sum.0, %196 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %125 ], [ %sum.0, %127 ], [ %sum.0, %139 ], [ %sum.0, %166 ], [ %sum.0, %193 ], [ %sum.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_185_60) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %220, %199 ], [ %sum.0, %170 ], [ %sum.0, %185 ], [ %sum.0, %196 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %125 ], [ %sum.0, %127 ], [ %sum.0, %139 ], [ %sum.0, %166 ], [ %sum.0, %193 ], [ %sum.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_193_63) & (memory_controller_waitrequest == 1'd0)) & (main_168_169_reg == 1'd1)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %220, %199 ], [ %sum.0, %170 ], [ %sum.0, %185 ], [ %sum.0, %196 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %125 ], [ %sum.0, %127 ], [ %sum.0, %139 ], [ %sum.0, %166 ], [ %sum.0, %193 ], [ %sum.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_196_64) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %220, %199 ], [ %sum.0, %170 ], [ %sum.0, %185 ], [ %sum.0, %196 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %125 ], [ %sum.0, %127 ], [ %sum.0, %139 ], [ %sum.0, %166 ], [ %sum.0, %193 ], [ %sum.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_197_65) & (memory_controller_waitrequest == 1'd0)) & (main_197_198 == 1'd1)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %220, %199 ], [ %sum.0, %170 ], [ %sum.0, %185 ], [ %sum.0, %196 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %125 ], [ %sum.0, %127 ], [ %sum.0, %139 ], [ %sum.0, %166 ], [ %sum.0, %193 ], [ %sum.0, %197 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_199_101) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_sum_0_be = main_199_220_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %220, %199 ], [ %sum.0, %170 ], [ %sum.0, %185 ], [ %sum.0, %196 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %125 ], [ %sum.0, %127 ], [ %sum.0, %139 ], [ %sum.0, %166 ], [ %sum.0, %193 ], [ %sum.0, %197 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %220, %199 ], [ %sum.0, %170 ], [ %sum.0, %185 ], [ %sum.0, %196 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %125 ], [ %sum.0, %127 ], [ %sum.0, %139 ], [ %sum.0, %166 ], [ %sum.0, %193 ], [ %sum.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %220, %199 ], [ %sum.0, %170 ], [ %sum.0, %185 ], [ %sum.0, %196 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %125 ], [ %sum.0, %127 ], [ %sum.0, %139 ], [ %sum.0, %166 ], [ %sum.0, %193 ], [ %sum.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_125_38) & (memory_controller_waitrequest == 1'd0)) & (main_125_126 == 1'd1)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %220, %199 ], [ %sum.0, %170 ], [ %sum.0, %185 ], [ %sum.0, %196 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %125 ], [ %sum.0, %127 ], [ %sum.0, %139 ], [ %sum.0, %166 ], [ %sum.0, %193 ], [ %sum.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_127_41) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %220, %199 ], [ %sum.0, %170 ], [ %sum.0, %185 ], [ %sum.0, %196 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %125 ], [ %sum.0, %127 ], [ %sum.0, %139 ], [ %sum.0, %166 ], [ %sum.0, %193 ], [ %sum.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_139_42) & (memory_controller_waitrequest == 1'd0)) & (main_139_140 == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %220, %199 ], [ %sum.0, %170 ], [ %sum.0, %185 ], [ %sum.0, %196 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %125 ], [ %sum.0, %127 ], [ %sum.0, %139 ], [ %sum.0, %166 ], [ %sum.0, %193 ], [ %sum.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_166_52) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %220, %199 ], [ %sum.0, %170 ], [ %sum.0, %185 ], [ %sum.0, %196 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %125 ], [ %sum.0, %127 ], [ %sum.0, %139 ], [ %sum.0, %166 ], [ %sum.0, %193 ], [ %sum.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_170_54) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %220, %199 ], [ %sum.0, %170 ], [ %sum.0, %185 ], [ %sum.0, %196 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %125 ], [ %sum.0, %127 ], [ %sum.0, %139 ], [ %sum.0, %166 ], [ %sum.0, %193 ], [ %sum.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_185_60) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %220, %199 ], [ %sum.0, %170 ], [ %sum.0, %185 ], [ %sum.0, %196 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %125 ], [ %sum.0, %127 ], [ %sum.0, %139 ], [ %sum.0, %166 ], [ %sum.0, %193 ], [ %sum.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_193_63) & (memory_controller_waitrequest == 1'd0)) & (main_168_169_reg == 1'd1)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %220, %199 ], [ %sum.0, %170 ], [ %sum.0, %185 ], [ %sum.0, %196 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %125 ], [ %sum.0, %127 ], [ %sum.0, %139 ], [ %sum.0, %166 ], [ %sum.0, %193 ], [ %sum.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_196_64) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %220, %199 ], [ %sum.0, %170 ], [ %sum.0, %185 ], [ %sum.0, %196 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %125 ], [ %sum.0, %127 ], [ %sum.0, %139 ], [ %sum.0, %166 ], [ %sum.0, %193 ], [ %sum.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_197_65) & (memory_controller_waitrequest == 1'd0)) & (main_197_198 == 1'd1)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %220, %199 ], [ %sum.0, %170 ], [ %sum.0, %185 ], [ %sum.0, %196 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %125 ], [ %sum.0, %127 ], [ %sum.0, %139 ], [ %sum.0, %166 ], [ %sum.0, %193 ], [ %sum.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_199_101) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %203, %199 ], [ %b.0, %170 ], [ %b.0, %185 ], [ %b.0, %196 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %125 ], [ %131, %127 ], [ %b.0, %139 ], [ %b.0, %166 ], [ %b.0, %193 ], [ %b.0, %197 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %203, %199 ], [ %b.0, %170 ], [ %b.0, %185 ], [ %b.0, %196 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %125 ], [ %131, %127 ], [ %b.0, %139 ], [ %b.0, %166 ], [ %b.0, %193 ], [ %b.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %203, %199 ], [ %b.0, %170 ], [ %b.0, %185 ], [ %b.0, %196 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %125 ], [ %131, %127 ], [ %b.0, %139 ], [ %b.0, %166 ], [ %b.0, %193 ], [ %b.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_125_38) & (memory_controller_waitrequest == 1'd0)) & (main_125_126 == 1'd1)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %203, %199 ], [ %b.0, %170 ], [ %b.0, %185 ], [ %b.0, %196 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %125 ], [ %131, %127 ], [ %b.0, %139 ], [ %b.0, %166 ], [ %b.0, %193 ], [ %b.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_127_41) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be = main_127_131_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %203, %199 ], [ %b.0, %170 ], [ %b.0, %185 ], [ %b.0, %196 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %125 ], [ %131, %127 ], [ %b.0, %139 ], [ %b.0, %166 ], [ %b.0, %193 ], [ %b.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_139_42) & (memory_controller_waitrequest == 1'd0)) & (main_139_140 == 1'd0)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %203, %199 ], [ %b.0, %170 ], [ %b.0, %185 ], [ %b.0, %196 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %125 ], [ %131, %127 ], [ %b.0, %139 ], [ %b.0, %166 ], [ %b.0, %193 ], [ %b.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_166_52) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %203, %199 ], [ %b.0, %170 ], [ %b.0, %185 ], [ %b.0, %196 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %125 ], [ %131, %127 ], [ %b.0, %139 ], [ %b.0, %166 ], [ %b.0, %193 ], [ %b.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_170_54) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %203, %199 ], [ %b.0, %170 ], [ %b.0, %185 ], [ %b.0, %196 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %125 ], [ %131, %127 ], [ %b.0, %139 ], [ %b.0, %166 ], [ %b.0, %193 ], [ %b.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_185_60) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %203, %199 ], [ %b.0, %170 ], [ %b.0, %185 ], [ %b.0, %196 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %125 ], [ %131, %127 ], [ %b.0, %139 ], [ %b.0, %166 ], [ %b.0, %193 ], [ %b.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_193_63) & (memory_controller_waitrequest == 1'd0)) & (main_168_169_reg == 1'd1)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %203, %199 ], [ %b.0, %170 ], [ %b.0, %185 ], [ %b.0, %196 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %125 ], [ %131, %127 ], [ %b.0, %139 ], [ %b.0, %166 ], [ %b.0, %193 ], [ %b.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_196_64) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %203, %199 ], [ %b.0, %170 ], [ %b.0, %185 ], [ %b.0, %196 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %125 ], [ %131, %127 ], [ %b.0, %139 ], [ %b.0, %166 ], [ %b.0, %193 ], [ %b.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_197_65) & (memory_controller_waitrequest == 1'd0)) & (main_197_198 == 1'd1)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %203, %199 ], [ %b.0, %170 ], [ %b.0, %185 ], [ %b.0, %196 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %125 ], [ %131, %127 ], [ %b.0, %139 ], [ %b.0, %166 ], [ %b.0, %193 ], [ %b.0, %197 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_199_101) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_b_0_be = main_199_203_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %203, %199 ], [ %b.0, %170 ], [ %b.0, %185 ], [ %b.0, %196 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %125 ], [ %131, %127 ], [ %b.0, %139 ], [ %b.0, %166 ], [ %b.0, %193 ], [ %b.0, %197 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %203, %199 ], [ %b.0, %170 ], [ %b.0, %185 ], [ %b.0, %196 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %125 ], [ %131, %127 ], [ %b.0, %139 ], [ %b.0, %166 ], [ %b.0, %193 ], [ %b.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %203, %199 ], [ %b.0, %170 ], [ %b.0, %185 ], [ %b.0, %196 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %125 ], [ %131, %127 ], [ %b.0, %139 ], [ %b.0, %166 ], [ %b.0, %193 ], [ %b.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_125_38) & (memory_controller_waitrequest == 1'd0)) & (main_125_126 == 1'd1)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %203, %199 ], [ %b.0, %170 ], [ %b.0, %185 ], [ %b.0, %196 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %125 ], [ %131, %127 ], [ %b.0, %139 ], [ %b.0, %166 ], [ %b.0, %193 ], [ %b.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_127_41) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %203, %199 ], [ %b.0, %170 ], [ %b.0, %185 ], [ %b.0, %196 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %125 ], [ %131, %127 ], [ %b.0, %139 ], [ %b.0, %166 ], [ %b.0, %193 ], [ %b.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_139_42) & (memory_controller_waitrequest == 1'd0)) & (main_139_140 == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %203, %199 ], [ %b.0, %170 ], [ %b.0, %185 ], [ %b.0, %196 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %125 ], [ %131, %127 ], [ %b.0, %139 ], [ %b.0, %166 ], [ %b.0, %193 ], [ %b.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_166_52) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %203, %199 ], [ %b.0, %170 ], [ %b.0, %185 ], [ %b.0, %196 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %125 ], [ %131, %127 ], [ %b.0, %139 ], [ %b.0, %166 ], [ %b.0, %193 ], [ %b.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_170_54) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %203, %199 ], [ %b.0, %170 ], [ %b.0, %185 ], [ %b.0, %196 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %125 ], [ %131, %127 ], [ %b.0, %139 ], [ %b.0, %166 ], [ %b.0, %193 ], [ %b.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_185_60) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %203, %199 ], [ %b.0, %170 ], [ %b.0, %185 ], [ %b.0, %196 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %125 ], [ %131, %127 ], [ %b.0, %139 ], [ %b.0, %166 ], [ %b.0, %193 ], [ %b.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_193_63) & (memory_controller_waitrequest == 1'd0)) & (main_168_169_reg == 1'd1)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %203, %199 ], [ %b.0, %170 ], [ %b.0, %185 ], [ %b.0, %196 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %125 ], [ %131, %127 ], [ %b.0, %139 ], [ %b.0, %166 ], [ %b.0, %193 ], [ %b.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_196_64) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %203, %199 ], [ %b.0, %170 ], [ %b.0, %185 ], [ %b.0, %196 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %125 ], [ %131, %127 ], [ %b.0, %139 ], [ %b.0, %166 ], [ %b.0, %193 ], [ %b.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_197_65) & (memory_controller_waitrequest == 1'd0)) & (main_197_198 == 1'd1)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %203, %199 ], [ %b.0, %170 ], [ %b.0, %185 ], [ %b.0, %196 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %125 ], [ %131, %127 ], [ %b.0, %139 ], [ %b.0, %166 ], [ %b.0, %193 ], [ %b.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_199_101) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %201, %199 ], [ %a.0, %170 ], [ %a.0, %185 ], [ %a.0, %196 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %125 ], [ %129, %127 ], [ %a.0, %139 ], [ %a.0, %166 ], [ %a.0, %193 ], [ %a.0, %197 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %201, %199 ], [ %a.0, %170 ], [ %a.0, %185 ], [ %a.0, %196 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %125 ], [ %129, %127 ], [ %a.0, %139 ], [ %a.0, %166 ], [ %a.0, %193 ], [ %a.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %201, %199 ], [ %a.0, %170 ], [ %a.0, %185 ], [ %a.0, %196 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %125 ], [ %129, %127 ], [ %a.0, %139 ], [ %a.0, %166 ], [ %a.0, %193 ], [ %a.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_125_38) & (memory_controller_waitrequest == 1'd0)) & (main_125_126 == 1'd1)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %201, %199 ], [ %a.0, %170 ], [ %a.0, %185 ], [ %a.0, %196 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %125 ], [ %129, %127 ], [ %a.0, %139 ], [ %a.0, %166 ], [ %a.0, %193 ], [ %a.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_127_41) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be = main_127_129_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %201, %199 ], [ %a.0, %170 ], [ %a.0, %185 ], [ %a.0, %196 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %125 ], [ %129, %127 ], [ %a.0, %139 ], [ %a.0, %166 ], [ %a.0, %193 ], [ %a.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_139_42) & (memory_controller_waitrequest == 1'd0)) & (main_139_140 == 1'd0)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %201, %199 ], [ %a.0, %170 ], [ %a.0, %185 ], [ %a.0, %196 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %125 ], [ %129, %127 ], [ %a.0, %139 ], [ %a.0, %166 ], [ %a.0, %193 ], [ %a.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_166_52) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %201, %199 ], [ %a.0, %170 ], [ %a.0, %185 ], [ %a.0, %196 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %125 ], [ %129, %127 ], [ %a.0, %139 ], [ %a.0, %166 ], [ %a.0, %193 ], [ %a.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_170_54) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %201, %199 ], [ %a.0, %170 ], [ %a.0, %185 ], [ %a.0, %196 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %125 ], [ %129, %127 ], [ %a.0, %139 ], [ %a.0, %166 ], [ %a.0, %193 ], [ %a.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_185_60) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %201, %199 ], [ %a.0, %170 ], [ %a.0, %185 ], [ %a.0, %196 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %125 ], [ %129, %127 ], [ %a.0, %139 ], [ %a.0, %166 ], [ %a.0, %193 ], [ %a.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_193_63) & (memory_controller_waitrequest == 1'd0)) & (main_168_169_reg == 1'd1)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %201, %199 ], [ %a.0, %170 ], [ %a.0, %185 ], [ %a.0, %196 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %125 ], [ %129, %127 ], [ %a.0, %139 ], [ %a.0, %166 ], [ %a.0, %193 ], [ %a.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_196_64) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %201, %199 ], [ %a.0, %170 ], [ %a.0, %185 ], [ %a.0, %196 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %125 ], [ %129, %127 ], [ %a.0, %139 ], [ %a.0, %166 ], [ %a.0, %193 ], [ %a.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_197_65) & (memory_controller_waitrequest == 1'd0)) & (main_197_198 == 1'd1)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %201, %199 ], [ %a.0, %170 ], [ %a.0, %185 ], [ %a.0, %196 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %125 ], [ %129, %127 ], [ %a.0, %139 ], [ %a.0, %166 ], [ %a.0, %193 ], [ %a.0, %197 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_199_101) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_a_0_be = main_199_201_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %201, %199 ], [ %a.0, %170 ], [ %a.0, %185 ], [ %a.0, %196 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %125 ], [ %129, %127 ], [ %a.0, %139 ], [ %a.0, %166 ], [ %a.0, %193 ], [ %a.0, %197 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %201, %199 ], [ %a.0, %170 ], [ %a.0, %185 ], [ %a.0, %196 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %125 ], [ %129, %127 ], [ %a.0, %139 ], [ %a.0, %166 ], [ %a.0, %193 ], [ %a.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %201, %199 ], [ %a.0, %170 ], [ %a.0, %185 ], [ %a.0, %196 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %125 ], [ %129, %127 ], [ %a.0, %139 ], [ %a.0, %166 ], [ %a.0, %193 ], [ %a.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_125_38) & (memory_controller_waitrequest == 1'd0)) & (main_125_126 == 1'd1)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %201, %199 ], [ %a.0, %170 ], [ %a.0, %185 ], [ %a.0, %196 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %125 ], [ %129, %127 ], [ %a.0, %139 ], [ %a.0, %166 ], [ %a.0, %193 ], [ %a.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_127_41) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %201, %199 ], [ %a.0, %170 ], [ %a.0, %185 ], [ %a.0, %196 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %125 ], [ %129, %127 ], [ %a.0, %139 ], [ %a.0, %166 ], [ %a.0, %193 ], [ %a.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_139_42) & (memory_controller_waitrequest == 1'd0)) & (main_139_140 == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %201, %199 ], [ %a.0, %170 ], [ %a.0, %185 ], [ %a.0, %196 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %125 ], [ %129, %127 ], [ %a.0, %139 ], [ %a.0, %166 ], [ %a.0, %193 ], [ %a.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_166_52) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %201, %199 ], [ %a.0, %170 ], [ %a.0, %185 ], [ %a.0, %196 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %125 ], [ %129, %127 ], [ %a.0, %139 ], [ %a.0, %166 ], [ %a.0, %193 ], [ %a.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_170_54) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %201, %199 ], [ %a.0, %170 ], [ %a.0, %185 ], [ %a.0, %196 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %125 ], [ %129, %127 ], [ %a.0, %139 ], [ %a.0, %166 ], [ %a.0, %193 ], [ %a.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_185_60) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %201, %199 ], [ %a.0, %170 ], [ %a.0, %185 ], [ %a.0, %196 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %125 ], [ %129, %127 ], [ %a.0, %139 ], [ %a.0, %166 ], [ %a.0, %193 ], [ %a.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_193_63) & (memory_controller_waitrequest == 1'd0)) & (main_168_169_reg == 1'd1)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %201, %199 ], [ %a.0, %170 ], [ %a.0, %185 ], [ %a.0, %196 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %125 ], [ %129, %127 ], [ %a.0, %139 ], [ %a.0, %166 ], [ %a.0, %193 ], [ %a.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_196_64) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %201, %199 ], [ %a.0, %170 ], [ %a.0, %185 ], [ %a.0, %196 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %125 ], [ %129, %127 ], [ %a.0, %139 ], [ %a.0, %166 ], [ %a.0, %193 ], [ %a.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_197_65) & (memory_controller_waitrequest == 1'd0)) & (main_197_198 == 1'd1)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %201, %199 ], [ %a.0, %170 ], [ %a.0, %185 ], [ %a.0, %196 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %125 ], [ %129, %127 ], [ %a.0, %139 ], [ %a.0, %166 ], [ %a.0, %193 ], [ %a.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_199_101) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %199 ], [ %pos_b_X.0, %170 ], [ %175, %185 ], [ %pos_b_X.0, %196 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %125 ], [ %137, %127 ], [ %pos_b_X.0, %139 ], [ %pos_b_X.0, %166 ], [ -1, %193 ], [ %pos_b_X.0, %197 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %199 ], [ %pos_b_X.0, %170 ], [ %175, %185 ], [ %pos_b_X.0, %196 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %125 ], [ %137, %127 ], [ %pos_b_X.0, %139 ], [ %pos_b_X.0, %166 ], [ -1, %193 ], [ %pos_b_X.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %199 ], [ %pos_b_X.0, %170 ], [ %175, %185 ], [ %pos_b_X.0, %196 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %125 ], [ %137, %127 ], [ %pos_b_X.0, %139 ], [ %pos_b_X.0, %166 ], [ -1, %193 ], [ %pos_b_X.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_125_38) & (memory_controller_waitrequest == 1'd0)) & (main_125_126 == 1'd1)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %199 ], [ %pos_b_X.0, %170 ], [ %175, %185 ], [ %pos_b_X.0, %196 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %125 ], [ %137, %127 ], [ %pos_b_X.0, %139 ], [ %pos_b_X.0, %166 ], [ -1, %193 ], [ %pos_b_X.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_127_41) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main_127_137;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %199 ], [ %pos_b_X.0, %170 ], [ %175, %185 ], [ %pos_b_X.0, %196 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %125 ], [ %137, %127 ], [ %pos_b_X.0, %139 ], [ %pos_b_X.0, %166 ], [ -1, %193 ], [ %pos_b_X.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_139_42) & (memory_controller_waitrequest == 1'd0)) & (main_139_140 == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %199 ], [ %pos_b_X.0, %170 ], [ %175, %185 ], [ %pos_b_X.0, %196 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %125 ], [ %137, %127 ], [ %pos_b_X.0, %139 ], [ %pos_b_X.0, %166 ], [ -1, %193 ], [ %pos_b_X.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_166_52) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %199 ], [ %pos_b_X.0, %170 ], [ %175, %185 ], [ %pos_b_X.0, %196 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %125 ], [ %137, %127 ], [ %pos_b_X.0, %139 ], [ %pos_b_X.0, %166 ], [ -1, %193 ], [ %pos_b_X.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_170_54) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %199 ], [ %pos_b_X.0, %170 ], [ %175, %185 ], [ %pos_b_X.0, %196 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %125 ], [ %137, %127 ], [ %pos_b_X.0, %139 ], [ %pos_b_X.0, %166 ], [ -1, %193 ], [ %pos_b_X.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_185_60) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main_172_175_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %199 ], [ %pos_b_X.0, %170 ], [ %175, %185 ], [ %pos_b_X.0, %196 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %125 ], [ %137, %127 ], [ %pos_b_X.0, %139 ], [ %pos_b_X.0, %166 ], [ -1, %193 ], [ %pos_b_X.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_193_63) & (memory_controller_waitrequest == 1'd0)) & (main_168_169_reg == 1'd1)))
begin
main__backedge_backedge_pos_b_X_0_be = -32'd1;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %199 ], [ %pos_b_X.0, %170 ], [ %175, %185 ], [ %pos_b_X.0, %196 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %125 ], [ %137, %127 ], [ %pos_b_X.0, %139 ], [ %pos_b_X.0, %166 ], [ -1, %193 ], [ %pos_b_X.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_196_64) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %199 ], [ %pos_b_X.0, %170 ], [ %175, %185 ], [ %pos_b_X.0, %196 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %125 ], [ %137, %127 ], [ %pos_b_X.0, %139 ], [ %pos_b_X.0, %166 ], [ -1, %193 ], [ %pos_b_X.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_197_65) & (memory_controller_waitrequest == 1'd0)) & (main_197_198 == 1'd1)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %199 ], [ %pos_b_X.0, %170 ], [ %175, %185 ], [ %pos_b_X.0, %196 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %125 ], [ %137, %127 ], [ %pos_b_X.0, %139 ], [ %pos_b_X.0, %166 ], [ -1, %193 ], [ %pos_b_X.0, %197 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_199_101) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %199 ], [ %pos_b_X.0, %170 ], [ %175, %185 ], [ %pos_b_X.0, %196 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %125 ], [ %137, %127 ], [ %pos_b_X.0, %139 ], [ %pos_b_X.0, %166 ], [ -1, %193 ], [ %pos_b_X.0, %197 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %199 ], [ %pos_b_X.0, %170 ], [ %175, %185 ], [ %pos_b_X.0, %196 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %125 ], [ %137, %127 ], [ %pos_b_X.0, %139 ], [ %pos_b_X.0, %166 ], [ -1, %193 ], [ %pos_b_X.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %199 ], [ %pos_b_X.0, %170 ], [ %175, %185 ], [ %pos_b_X.0, %196 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %125 ], [ %137, %127 ], [ %pos_b_X.0, %139 ], [ %pos_b_X.0, %166 ], [ -1, %193 ], [ %pos_b_X.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_125_38) & (memory_controller_waitrequest == 1'd0)) & (main_125_126 == 1'd1)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %199 ], [ %pos_b_X.0, %170 ], [ %175, %185 ], [ %pos_b_X.0, %196 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %125 ], [ %137, %127 ], [ %pos_b_X.0, %139 ], [ %pos_b_X.0, %166 ], [ -1, %193 ], [ %pos_b_X.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_127_41) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %199 ], [ %pos_b_X.0, %170 ], [ %175, %185 ], [ %pos_b_X.0, %196 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %125 ], [ %137, %127 ], [ %pos_b_X.0, %139 ], [ %pos_b_X.0, %166 ], [ -1, %193 ], [ %pos_b_X.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_139_42) & (memory_controller_waitrequest == 1'd0)) & (main_139_140 == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %199 ], [ %pos_b_X.0, %170 ], [ %175, %185 ], [ %pos_b_X.0, %196 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %125 ], [ %137, %127 ], [ %pos_b_X.0, %139 ], [ %pos_b_X.0, %166 ], [ -1, %193 ], [ %pos_b_X.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_166_52) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %199 ], [ %pos_b_X.0, %170 ], [ %175, %185 ], [ %pos_b_X.0, %196 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %125 ], [ %137, %127 ], [ %pos_b_X.0, %139 ], [ %pos_b_X.0, %166 ], [ -1, %193 ], [ %pos_b_X.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_170_54) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %199 ], [ %pos_b_X.0, %170 ], [ %175, %185 ], [ %pos_b_X.0, %196 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %125 ], [ %137, %127 ], [ %pos_b_X.0, %139 ], [ %pos_b_X.0, %166 ], [ -1, %193 ], [ %pos_b_X.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_185_60) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %199 ], [ %pos_b_X.0, %170 ], [ %175, %185 ], [ %pos_b_X.0, %196 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %125 ], [ %137, %127 ], [ %pos_b_X.0, %139 ], [ %pos_b_X.0, %166 ], [ -1, %193 ], [ %pos_b_X.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_193_63) & (memory_controller_waitrequest == 1'd0)) & (main_168_169_reg == 1'd1)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %199 ], [ %pos_b_X.0, %170 ], [ %175, %185 ], [ %pos_b_X.0, %196 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %125 ], [ %137, %127 ], [ %pos_b_X.0, %139 ], [ %pos_b_X.0, %166 ], [ -1, %193 ], [ %pos_b_X.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_196_64) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %199 ], [ %pos_b_X.0, %170 ], [ %175, %185 ], [ %pos_b_X.0, %196 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %125 ], [ %137, %127 ], [ %pos_b_X.0, %139 ], [ %pos_b_X.0, %166 ], [ -1, %193 ], [ %pos_b_X.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_197_65) & (memory_controller_waitrequest == 1'd0)) & (main_197_198 == 1'd1)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %199 ], [ %pos_b_X.0, %170 ], [ %175, %185 ], [ %pos_b_X.0, %196 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %125 ], [ %137, %127 ], [ %pos_b_X.0, %139 ], [ %pos_b_X.0, %166 ], [ -1, %193 ], [ %pos_b_X.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_199_101) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %199 ], [ %pos_a_Y.0, %170 ], [ %pos_a_Y.0, %185 ], [ %pos_a_Y.0, %196 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %125 ], [ %135, %127 ], [ %pos_a_Y.0, %139 ], [ %pos_a_Y.1, %166 ], [ %pos_a_Y.0, %193 ], [ %pos_a_Y.0, %197 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %199 ], [ %pos_a_Y.0, %170 ], [ %pos_a_Y.0, %185 ], [ %pos_a_Y.0, %196 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %125 ], [ %135, %127 ], [ %pos_a_Y.0, %139 ], [ %pos_a_Y.1, %166 ], [ %pos_a_Y.0, %193 ], [ %pos_a_Y.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %199 ], [ %pos_a_Y.0, %170 ], [ %pos_a_Y.0, %185 ], [ %pos_a_Y.0, %196 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %125 ], [ %135, %127 ], [ %pos_a_Y.0, %139 ], [ %pos_a_Y.1, %166 ], [ %pos_a_Y.0, %193 ], [ %pos_a_Y.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_125_38) & (memory_controller_waitrequest == 1'd0)) & (main_125_126 == 1'd1)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %199 ], [ %pos_a_Y.0, %170 ], [ %pos_a_Y.0, %185 ], [ %pos_a_Y.0, %196 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %125 ], [ %135, %127 ], [ %pos_a_Y.0, %139 ], [ %pos_a_Y.1, %166 ], [ %pos_a_Y.0, %193 ], [ %pos_a_Y.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_127_41) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main_127_135;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %199 ], [ %pos_a_Y.0, %170 ], [ %pos_a_Y.0, %185 ], [ %pos_a_Y.0, %196 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %125 ], [ %135, %127 ], [ %pos_a_Y.0, %139 ], [ %pos_a_Y.1, %166 ], [ %pos_a_Y.0, %193 ], [ %pos_a_Y.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_139_42) & (memory_controller_waitrequest == 1'd0)) & (main_139_140 == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %199 ], [ %pos_a_Y.0, %170 ], [ %pos_a_Y.0, %185 ], [ %pos_a_Y.0, %196 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %125 ], [ %135, %127 ], [ %pos_a_Y.0, %139 ], [ %pos_a_Y.1, %166 ], [ %pos_a_Y.0, %193 ], [ %pos_a_Y.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_166_52) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main_166_pos_a_Y_1_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %199 ], [ %pos_a_Y.0, %170 ], [ %pos_a_Y.0, %185 ], [ %pos_a_Y.0, %196 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %125 ], [ %135, %127 ], [ %pos_a_Y.0, %139 ], [ %pos_a_Y.1, %166 ], [ %pos_a_Y.0, %193 ], [ %pos_a_Y.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_170_54) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %199 ], [ %pos_a_Y.0, %170 ], [ %pos_a_Y.0, %185 ], [ %pos_a_Y.0, %196 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %125 ], [ %135, %127 ], [ %pos_a_Y.0, %139 ], [ %pos_a_Y.1, %166 ], [ %pos_a_Y.0, %193 ], [ %pos_a_Y.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_185_60) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %199 ], [ %pos_a_Y.0, %170 ], [ %pos_a_Y.0, %185 ], [ %pos_a_Y.0, %196 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %125 ], [ %135, %127 ], [ %pos_a_Y.0, %139 ], [ %pos_a_Y.1, %166 ], [ %pos_a_Y.0, %193 ], [ %pos_a_Y.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_193_63) & (memory_controller_waitrequest == 1'd0)) & (main_168_169_reg == 1'd1)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %199 ], [ %pos_a_Y.0, %170 ], [ %pos_a_Y.0, %185 ], [ %pos_a_Y.0, %196 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %125 ], [ %135, %127 ], [ %pos_a_Y.0, %139 ], [ %pos_a_Y.1, %166 ], [ %pos_a_Y.0, %193 ], [ %pos_a_Y.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_196_64) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %199 ], [ %pos_a_Y.0, %170 ], [ %pos_a_Y.0, %185 ], [ %pos_a_Y.0, %196 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %125 ], [ %135, %127 ], [ %pos_a_Y.0, %139 ], [ %pos_a_Y.1, %166 ], [ %pos_a_Y.0, %193 ], [ %pos_a_Y.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_197_65) & (memory_controller_waitrequest == 1'd0)) & (main_197_198 == 1'd1)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %199 ], [ %pos_a_Y.0, %170 ], [ %pos_a_Y.0, %185 ], [ %pos_a_Y.0, %196 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %125 ], [ %135, %127 ], [ %pos_a_Y.0, %139 ], [ %pos_a_Y.1, %166 ], [ %pos_a_Y.0, %193 ], [ %pos_a_Y.0, %197 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_199_101) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %199 ], [ %pos_a_Y.0, %170 ], [ %pos_a_Y.0, %185 ], [ %pos_a_Y.0, %196 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %125 ], [ %135, %127 ], [ %pos_a_Y.0, %139 ], [ %pos_a_Y.1, %166 ], [ %pos_a_Y.0, %193 ], [ %pos_a_Y.0, %197 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %199 ], [ %pos_a_Y.0, %170 ], [ %pos_a_Y.0, %185 ], [ %pos_a_Y.0, %196 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %125 ], [ %135, %127 ], [ %pos_a_Y.0, %139 ], [ %pos_a_Y.1, %166 ], [ %pos_a_Y.0, %193 ], [ %pos_a_Y.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %199 ], [ %pos_a_Y.0, %170 ], [ %pos_a_Y.0, %185 ], [ %pos_a_Y.0, %196 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %125 ], [ %135, %127 ], [ %pos_a_Y.0, %139 ], [ %pos_a_Y.1, %166 ], [ %pos_a_Y.0, %193 ], [ %pos_a_Y.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_125_38) & (memory_controller_waitrequest == 1'd0)) & (main_125_126 == 1'd1)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %199 ], [ %pos_a_Y.0, %170 ], [ %pos_a_Y.0, %185 ], [ %pos_a_Y.0, %196 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %125 ], [ %135, %127 ], [ %pos_a_Y.0, %139 ], [ %pos_a_Y.1, %166 ], [ %pos_a_Y.0, %193 ], [ %pos_a_Y.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_127_41) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %199 ], [ %pos_a_Y.0, %170 ], [ %pos_a_Y.0, %185 ], [ %pos_a_Y.0, %196 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %125 ], [ %135, %127 ], [ %pos_a_Y.0, %139 ], [ %pos_a_Y.1, %166 ], [ %pos_a_Y.0, %193 ], [ %pos_a_Y.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_139_42) & (memory_controller_waitrequest == 1'd0)) & (main_139_140 == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %199 ], [ %pos_a_Y.0, %170 ], [ %pos_a_Y.0, %185 ], [ %pos_a_Y.0, %196 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %125 ], [ %135, %127 ], [ %pos_a_Y.0, %139 ], [ %pos_a_Y.1, %166 ], [ %pos_a_Y.0, %193 ], [ %pos_a_Y.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_166_52) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %199 ], [ %pos_a_Y.0, %170 ], [ %pos_a_Y.0, %185 ], [ %pos_a_Y.0, %196 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %125 ], [ %135, %127 ], [ %pos_a_Y.0, %139 ], [ %pos_a_Y.1, %166 ], [ %pos_a_Y.0, %193 ], [ %pos_a_Y.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_170_54) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %199 ], [ %pos_a_Y.0, %170 ], [ %pos_a_Y.0, %185 ], [ %pos_a_Y.0, %196 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %125 ], [ %135, %127 ], [ %pos_a_Y.0, %139 ], [ %pos_a_Y.1, %166 ], [ %pos_a_Y.0, %193 ], [ %pos_a_Y.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_185_60) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %199 ], [ %pos_a_Y.0, %170 ], [ %pos_a_Y.0, %185 ], [ %pos_a_Y.0, %196 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %125 ], [ %135, %127 ], [ %pos_a_Y.0, %139 ], [ %pos_a_Y.1, %166 ], [ %pos_a_Y.0, %193 ], [ %pos_a_Y.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_193_63) & (memory_controller_waitrequest == 1'd0)) & (main_168_169_reg == 1'd1)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %199 ], [ %pos_a_Y.0, %170 ], [ %pos_a_Y.0, %185 ], [ %pos_a_Y.0, %196 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %125 ], [ %135, %127 ], [ %pos_a_Y.0, %139 ], [ %pos_a_Y.1, %166 ], [ %pos_a_Y.0, %193 ], [ %pos_a_Y.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_196_64) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %199 ], [ %pos_a_Y.0, %170 ], [ %pos_a_Y.0, %185 ], [ %pos_a_Y.0, %196 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %125 ], [ %135, %127 ], [ %pos_a_Y.0, %139 ], [ %pos_a_Y.1, %166 ], [ %pos_a_Y.0, %193 ], [ %pos_a_Y.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_197_65) & (memory_controller_waitrequest == 1'd0)) & (main_197_198 == 1'd1)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %199 ], [ %pos_a_Y.0, %170 ], [ %pos_a_Y.0, %185 ], [ %pos_a_Y.0, %196 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %125 ], [ %135, %127 ], [ %pos_a_Y.0, %139 ], [ %pos_a_Y.1, %166 ], [ %pos_a_Y.0, %193 ], [ %pos_a_Y.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_199_101) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %199 ], [ %pos_a_X.0, %170 ], [ %pos_a_X.0, %185 ], [ %pos_a_X.0, %196 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %125 ], [ %133, %127 ], [ %pos_a_X.0, %139 ], [ %pos_a_X.1, %166 ], [ %pos_a_X.0, %193 ], [ %pos_a_X.0, %197 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %199 ], [ %pos_a_X.0, %170 ], [ %pos_a_X.0, %185 ], [ %pos_a_X.0, %196 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %125 ], [ %133, %127 ], [ %pos_a_X.0, %139 ], [ %pos_a_X.1, %166 ], [ %pos_a_X.0, %193 ], [ %pos_a_X.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %199 ], [ %pos_a_X.0, %170 ], [ %pos_a_X.0, %185 ], [ %pos_a_X.0, %196 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %125 ], [ %133, %127 ], [ %pos_a_X.0, %139 ], [ %pos_a_X.1, %166 ], [ %pos_a_X.0, %193 ], [ %pos_a_X.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_125_38) & (memory_controller_waitrequest == 1'd0)) & (main_125_126 == 1'd1)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %199 ], [ %pos_a_X.0, %170 ], [ %pos_a_X.0, %185 ], [ %pos_a_X.0, %196 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %125 ], [ %133, %127 ], [ %pos_a_X.0, %139 ], [ %pos_a_X.1, %166 ], [ %pos_a_X.0, %193 ], [ %pos_a_X.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_127_41) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main_127_133;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %199 ], [ %pos_a_X.0, %170 ], [ %pos_a_X.0, %185 ], [ %pos_a_X.0, %196 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %125 ], [ %133, %127 ], [ %pos_a_X.0, %139 ], [ %pos_a_X.1, %166 ], [ %pos_a_X.0, %193 ], [ %pos_a_X.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_139_42) & (memory_controller_waitrequest == 1'd0)) & (main_139_140 == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %199 ], [ %pos_a_X.0, %170 ], [ %pos_a_X.0, %185 ], [ %pos_a_X.0, %196 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %125 ], [ %133, %127 ], [ %pos_a_X.0, %139 ], [ %pos_a_X.1, %166 ], [ %pos_a_X.0, %193 ], [ %pos_a_X.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_166_52) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main_166_pos_a_X_1_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %199 ], [ %pos_a_X.0, %170 ], [ %pos_a_X.0, %185 ], [ %pos_a_X.0, %196 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %125 ], [ %133, %127 ], [ %pos_a_X.0, %139 ], [ %pos_a_X.1, %166 ], [ %pos_a_X.0, %193 ], [ %pos_a_X.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_170_54) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %199 ], [ %pos_a_X.0, %170 ], [ %pos_a_X.0, %185 ], [ %pos_a_X.0, %196 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %125 ], [ %133, %127 ], [ %pos_a_X.0, %139 ], [ %pos_a_X.1, %166 ], [ %pos_a_X.0, %193 ], [ %pos_a_X.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_185_60) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %199 ], [ %pos_a_X.0, %170 ], [ %pos_a_X.0, %185 ], [ %pos_a_X.0, %196 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %125 ], [ %133, %127 ], [ %pos_a_X.0, %139 ], [ %pos_a_X.1, %166 ], [ %pos_a_X.0, %193 ], [ %pos_a_X.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_193_63) & (memory_controller_waitrequest == 1'd0)) & (main_168_169_reg == 1'd1)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %199 ], [ %pos_a_X.0, %170 ], [ %pos_a_X.0, %185 ], [ %pos_a_X.0, %196 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %125 ], [ %133, %127 ], [ %pos_a_X.0, %139 ], [ %pos_a_X.1, %166 ], [ %pos_a_X.0, %193 ], [ %pos_a_X.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_196_64) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %199 ], [ %pos_a_X.0, %170 ], [ %pos_a_X.0, %185 ], [ %pos_a_X.0, %196 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %125 ], [ %133, %127 ], [ %pos_a_X.0, %139 ], [ %pos_a_X.1, %166 ], [ %pos_a_X.0, %193 ], [ %pos_a_X.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_197_65) & (memory_controller_waitrequest == 1'd0)) & (main_197_198 == 1'd1)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %199 ], [ %pos_a_X.0, %170 ], [ %pos_a_X.0, %185 ], [ %pos_a_X.0, %196 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %125 ], [ %133, %127 ], [ %pos_a_X.0, %139 ], [ %pos_a_X.1, %166 ], [ %pos_a_X.0, %193 ], [ %pos_a_X.0, %197 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_199_101) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %199 ], [ %pos_a_X.0, %170 ], [ %pos_a_X.0, %185 ], [ %pos_a_X.0, %196 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %125 ], [ %133, %127 ], [ %pos_a_X.0, %139 ], [ %pos_a_X.1, %166 ], [ %pos_a_X.0, %193 ], [ %pos_a_X.0, %197 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %199 ], [ %pos_a_X.0, %170 ], [ %pos_a_X.0, %185 ], [ %pos_a_X.0, %196 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %125 ], [ %133, %127 ], [ %pos_a_X.0, %139 ], [ %pos_a_X.1, %166 ], [ %pos_a_X.0, %193 ], [ %pos_a_X.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %199 ], [ %pos_a_X.0, %170 ], [ %pos_a_X.0, %185 ], [ %pos_a_X.0, %196 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %125 ], [ %133, %127 ], [ %pos_a_X.0, %139 ], [ %pos_a_X.1, %166 ], [ %pos_a_X.0, %193 ], [ %pos_a_X.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_125_38) & (memory_controller_waitrequest == 1'd0)) & (main_125_126 == 1'd1)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %199 ], [ %pos_a_X.0, %170 ], [ %pos_a_X.0, %185 ], [ %pos_a_X.0, %196 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %125 ], [ %133, %127 ], [ %pos_a_X.0, %139 ], [ %pos_a_X.1, %166 ], [ %pos_a_X.0, %193 ], [ %pos_a_X.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_127_41) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %199 ], [ %pos_a_X.0, %170 ], [ %pos_a_X.0, %185 ], [ %pos_a_X.0, %196 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %125 ], [ %133, %127 ], [ %pos_a_X.0, %139 ], [ %pos_a_X.1, %166 ], [ %pos_a_X.0, %193 ], [ %pos_a_X.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_139_42) & (memory_controller_waitrequest == 1'd0)) & (main_139_140 == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %199 ], [ %pos_a_X.0, %170 ], [ %pos_a_X.0, %185 ], [ %pos_a_X.0, %196 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %125 ], [ %133, %127 ], [ %pos_a_X.0, %139 ], [ %pos_a_X.1, %166 ], [ %pos_a_X.0, %193 ], [ %pos_a_X.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_166_52) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %199 ], [ %pos_a_X.0, %170 ], [ %pos_a_X.0, %185 ], [ %pos_a_X.0, %196 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %125 ], [ %133, %127 ], [ %pos_a_X.0, %139 ], [ %pos_a_X.1, %166 ], [ %pos_a_X.0, %193 ], [ %pos_a_X.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_170_54) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %199 ], [ %pos_a_X.0, %170 ], [ %pos_a_X.0, %185 ], [ %pos_a_X.0, %196 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %125 ], [ %133, %127 ], [ %pos_a_X.0, %139 ], [ %pos_a_X.1, %166 ], [ %pos_a_X.0, %193 ], [ %pos_a_X.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_185_60) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %199 ], [ %pos_a_X.0, %170 ], [ %pos_a_X.0, %185 ], [ %pos_a_X.0, %196 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %125 ], [ %133, %127 ], [ %pos_a_X.0, %139 ], [ %pos_a_X.1, %166 ], [ %pos_a_X.0, %193 ], [ %pos_a_X.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_193_63) & (memory_controller_waitrequest == 1'd0)) & (main_168_169_reg == 1'd1)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %199 ], [ %pos_a_X.0, %170 ], [ %pos_a_X.0, %185 ], [ %pos_a_X.0, %196 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %125 ], [ %133, %127 ], [ %pos_a_X.0, %139 ], [ %pos_a_X.1, %166 ], [ %pos_a_X.0, %193 ], [ %pos_a_X.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_196_64) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %199 ], [ %pos_a_X.0, %170 ], [ %pos_a_X.0, %185 ], [ %pos_a_X.0, %196 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %125 ], [ %133, %127 ], [ %pos_a_X.0, %139 ], [ %pos_a_X.1, %166 ], [ %pos_a_X.0, %193 ], [ %pos_a_X.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_197_65) & (memory_controller_waitrequest == 1'd0)) & (main_197_198 == 1'd1)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %199 ], [ %pos_a_X.0, %170 ], [ %pos_a_X.0, %185 ], [ %pos_a_X.0, %196 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %125 ], [ %133, %127 ], [ %pos_a_X.0, %139 ], [ %pos_a_X.1, %166 ], [ %pos_a_X.0, %193 ], [ %pos_a_X.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_199_101) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %199 ], [ 0, %170 ], [ 0, %185 ], [ 0, %196 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %125 ], [ %j.0, %127 ], [ 0, %139 ], [ %.23, %166 ], [ %179, %193 ], [ %j.0, %197 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_j_0_be = main__backedge_j_0_reg;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %199 ], [ 0, %170 ], [ 0, %185 ], [ 0, %196 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %125 ], [ %j.0, %127 ], [ 0, %139 ], [ %.23, %166 ], [ %179, %193 ], [ %j.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %199 ], [ 0, %170 ], [ 0, %185 ], [ 0, %196 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %125 ], [ %j.0, %127 ], [ 0, %139 ], [ %.23, %166 ], [ %179, %193 ], [ %j.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_125_38) & (memory_controller_waitrequest == 1'd0)) & (main_125_126 == 1'd1)))
begin
main__backedge_backedge_j_0_be = main__backedge_j_0_reg;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %199 ], [ 0, %170 ], [ 0, %185 ], [ 0, %196 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %125 ], [ %j.0, %127 ], [ 0, %139 ], [ %.23, %166 ], [ %179, %193 ], [ %j.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_127_41) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be = main__backedge_j_0_reg;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %199 ], [ 0, %170 ], [ 0, %185 ], [ 0, %196 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %125 ], [ %j.0, %127 ], [ 0, %139 ], [ %.23, %166 ], [ %179, %193 ], [ %j.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_139_42) & (memory_controller_waitrequest == 1'd0)) & (main_139_140 == 1'd0)))
begin
main__backedge_backedge_j_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %199 ], [ 0, %170 ], [ 0, %185 ], [ 0, %196 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %125 ], [ %j.0, %127 ], [ 0, %139 ], [ %.23, %166 ], [ %179, %193 ], [ %j.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_166_52) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be = main_166__23;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %199 ], [ 0, %170 ], [ 0, %185 ], [ 0, %196 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %125 ], [ %j.0, %127 ], [ 0, %139 ], [ %.23, %166 ], [ %179, %193 ], [ %j.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_170_54) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %199 ], [ 0, %170 ], [ 0, %185 ], [ 0, %196 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %125 ], [ %j.0, %127 ], [ 0, %139 ], [ %.23, %166 ], [ %179, %193 ], [ %j.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_185_60) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %199 ], [ 0, %170 ], [ 0, %185 ], [ 0, %196 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %125 ], [ %j.0, %127 ], [ 0, %139 ], [ %.23, %166 ], [ %179, %193 ], [ %j.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_193_63) & (memory_controller_waitrequest == 1'd0)) & (main_168_169_reg == 1'd1)))
begin
main__backedge_backedge_j_0_be = main_172_179_reg;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %199 ], [ 0, %170 ], [ 0, %185 ], [ 0, %196 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %125 ], [ %j.0, %127 ], [ 0, %139 ], [ %.23, %166 ], [ %179, %193 ], [ %j.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_196_64) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %199 ], [ 0, %170 ], [ 0, %185 ], [ 0, %196 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %125 ], [ %j.0, %127 ], [ 0, %139 ], [ %.23, %166 ], [ %179, %193 ], [ %j.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_197_65) & (memory_controller_waitrequest == 1'd0)) & (main_197_198 == 1'd1)))
begin
main__backedge_backedge_j_0_be = main__backedge_j_0_reg;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %199 ], [ 0, %170 ], [ 0, %185 ], [ 0, %196 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %125 ], [ %j.0, %127 ], [ 0, %139 ], [ %.23, %166 ], [ %179, %193 ], [ %j.0, %197 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_199_101) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_j_0_be = main__backedge_j_0_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %199 ], [ 0, %170 ], [ 0, %185 ], [ 0, %196 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %125 ], [ %j.0, %127 ], [ 0, %139 ], [ %.23, %166 ], [ %179, %193 ], [ %j.0, %197 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %199 ], [ 0, %170 ], [ 0, %185 ], [ 0, %196 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %125 ], [ %j.0, %127 ], [ 0, %139 ], [ %.23, %166 ], [ %179, %193 ], [ %j.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %199 ], [ 0, %170 ], [ 0, %185 ], [ 0, %196 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %125 ], [ %j.0, %127 ], [ 0, %139 ], [ %.23, %166 ], [ %179, %193 ], [ %j.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_125_38) & (memory_controller_waitrequest == 1'd0)) & (main_125_126 == 1'd1)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %199 ], [ 0, %170 ], [ 0, %185 ], [ 0, %196 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %125 ], [ %j.0, %127 ], [ 0, %139 ], [ %.23, %166 ], [ %179, %193 ], [ %j.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_127_41) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %199 ], [ 0, %170 ], [ 0, %185 ], [ 0, %196 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %125 ], [ %j.0, %127 ], [ 0, %139 ], [ %.23, %166 ], [ %179, %193 ], [ %j.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_139_42) & (memory_controller_waitrequest == 1'd0)) & (main_139_140 == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %199 ], [ 0, %170 ], [ 0, %185 ], [ 0, %196 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %125 ], [ %j.0, %127 ], [ 0, %139 ], [ %.23, %166 ], [ %179, %193 ], [ %j.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_166_52) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %199 ], [ 0, %170 ], [ 0, %185 ], [ 0, %196 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %125 ], [ %j.0, %127 ], [ 0, %139 ], [ %.23, %166 ], [ %179, %193 ], [ %j.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_170_54) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %199 ], [ 0, %170 ], [ 0, %185 ], [ 0, %196 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %125 ], [ %j.0, %127 ], [ 0, %139 ], [ %.23, %166 ], [ %179, %193 ], [ %j.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_185_60) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %199 ], [ 0, %170 ], [ 0, %185 ], [ 0, %196 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %125 ], [ %j.0, %127 ], [ 0, %139 ], [ %.23, %166 ], [ %179, %193 ], [ %j.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_193_63) & (memory_controller_waitrequest == 1'd0)) & (main_168_169_reg == 1'd1)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %199 ], [ 0, %170 ], [ 0, %185 ], [ 0, %196 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %125 ], [ %j.0, %127 ], [ 0, %139 ], [ %.23, %166 ], [ %179, %193 ], [ %j.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_196_64) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %199 ], [ 0, %170 ], [ 0, %185 ], [ 0, %196 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %125 ], [ %j.0, %127 ], [ 0, %139 ], [ %.23, %166 ], [ %179, %193 ], [ %j.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_197_65) & (memory_controller_waitrequest == 1'd0)) & (main_197_198 == 1'd1)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %199 ], [ 0, %170 ], [ 0, %185 ], [ 0, %196 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %125 ], [ %j.0, %127 ], [ 0, %139 ], [ %.23, %166 ], [ %179, %193 ], [ %j.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_199_101) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %230, %199 ], [ %171, %170 ], [ %188, %185 ], [ %i.0., %196 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %125 ], [ %i.0, %127 ], [ %i.0, %139 ], [ %i.0, %166 ], [ %i.0., %193 ], [ 11, %197 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_i_0_be = main__backedge_i_0_reg;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %230, %199 ], [ %171, %170 ], [ %188, %185 ], [ %i.0., %196 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %125 ], [ %i.0, %127 ], [ %i.0, %139 ], [ %i.0, %166 ], [ %i.0., %193 ], [ 11, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %230, %199 ], [ %171, %170 ], [ %188, %185 ], [ %i.0., %196 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %125 ], [ %i.0, %127 ], [ %i.0, %139 ], [ %i.0, %166 ], [ %i.0., %193 ], [ 11, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_125_38) & (memory_controller_waitrequest == 1'd0)) & (main_125_126 == 1'd1)))
begin
main__backedge_backedge_i_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %230, %199 ], [ %171, %170 ], [ %188, %185 ], [ %i.0., %196 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %125 ], [ %i.0, %127 ], [ %i.0, %139 ], [ %i.0, %166 ], [ %i.0., %193 ], [ 11, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_127_41) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be = main__backedge_i_0_reg;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %230, %199 ], [ %171, %170 ], [ %188, %185 ], [ %i.0., %196 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %125 ], [ %i.0, %127 ], [ %i.0, %139 ], [ %i.0, %166 ], [ %i.0., %193 ], [ 11, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_139_42) & (memory_controller_waitrequest == 1'd0)) & (main_139_140 == 1'd0)))
begin
main__backedge_backedge_i_0_be = main__backedge_i_0_reg;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %230, %199 ], [ %171, %170 ], [ %188, %185 ], [ %i.0., %196 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %125 ], [ %i.0, %127 ], [ %i.0, %139 ], [ %i.0, %166 ], [ %i.0., %193 ], [ 11, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_166_52) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be = main__backedge_i_0_reg;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %230, %199 ], [ %171, %170 ], [ %188, %185 ], [ %i.0., %196 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %125 ], [ %i.0, %127 ], [ %i.0, %139 ], [ %i.0, %166 ], [ %i.0., %193 ], [ 11, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_170_54) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be = main_170_171;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %230, %199 ], [ %171, %170 ], [ %188, %185 ], [ %i.0., %196 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %125 ], [ %i.0, %127 ], [ %i.0, %139 ], [ %i.0, %166 ], [ %i.0., %193 ], [ 11, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_185_60) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be = main_185_188_reg;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %230, %199 ], [ %171, %170 ], [ %188, %185 ], [ %i.0., %196 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %125 ], [ %i.0, %127 ], [ %i.0, %139 ], [ %i.0, %166 ], [ %i.0., %193 ], [ 11, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_193_63) & (memory_controller_waitrequest == 1'd0)) & (main_168_169_reg == 1'd1)))
begin
main__backedge_backedge_i_0_be = main_193_i_0_;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %230, %199 ], [ %171, %170 ], [ %188, %185 ], [ %i.0., %196 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %125 ], [ %i.0, %127 ], [ %i.0, %139 ], [ %i.0, %166 ], [ %i.0., %193 ], [ 11, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_196_64) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be = main_193_i_0__reg;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %230, %199 ], [ %171, %170 ], [ %188, %185 ], [ %i.0., %196 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %125 ], [ %i.0, %127 ], [ %i.0, %139 ], [ %i.0, %166 ], [ %i.0., %193 ], [ 11, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_197_65) & (memory_controller_waitrequest == 1'd0)) & (main_197_198 == 1'd1)))
begin
main__backedge_backedge_i_0_be = 32'd11;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %230, %199 ], [ %171, %170 ], [ %188, %185 ], [ %i.0., %196 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %125 ], [ %i.0, %127 ], [ %i.0, %139 ], [ %i.0, %166 ], [ %i.0., %193 ], [ 11, %197 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_199_101) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_i_0_be = main_199_230_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %230, %199 ], [ %171, %170 ], [ %188, %185 ], [ %i.0., %196 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %125 ], [ %i.0, %127 ], [ %i.0, %139 ], [ %i.0, %166 ], [ %i.0., %193 ], [ 11, %197 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %230, %199 ], [ %171, %170 ], [ %188, %185 ], [ %i.0., %196 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %125 ], [ %i.0, %127 ], [ %i.0, %139 ], [ %i.0, %166 ], [ %i.0., %193 ], [ 11, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %230, %199 ], [ %171, %170 ], [ %188, %185 ], [ %i.0., %196 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %125 ], [ %i.0, %127 ], [ %i.0, %139 ], [ %i.0, %166 ], [ %i.0., %193 ], [ 11, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_125_38) & (memory_controller_waitrequest == 1'd0)) & (main_125_126 == 1'd1)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %230, %199 ], [ %171, %170 ], [ %188, %185 ], [ %i.0., %196 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %125 ], [ %i.0, %127 ], [ %i.0, %139 ], [ %i.0, %166 ], [ %i.0., %193 ], [ 11, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_127_41) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %230, %199 ], [ %171, %170 ], [ %188, %185 ], [ %i.0., %196 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %125 ], [ %i.0, %127 ], [ %i.0, %139 ], [ %i.0, %166 ], [ %i.0., %193 ], [ 11, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_139_42) & (memory_controller_waitrequest == 1'd0)) & (main_139_140 == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %230, %199 ], [ %171, %170 ], [ %188, %185 ], [ %i.0., %196 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %125 ], [ %i.0, %127 ], [ %i.0, %139 ], [ %i.0, %166 ], [ %i.0., %193 ], [ 11, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_166_52) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %230, %199 ], [ %171, %170 ], [ %188, %185 ], [ %i.0., %196 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %125 ], [ %i.0, %127 ], [ %i.0, %139 ], [ %i.0, %166 ], [ %i.0., %193 ], [ 11, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_170_54) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %230, %199 ], [ %171, %170 ], [ %188, %185 ], [ %i.0., %196 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %125 ], [ %i.0, %127 ], [ %i.0, %139 ], [ %i.0, %166 ], [ %i.0., %193 ], [ 11, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_185_60) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %230, %199 ], [ %171, %170 ], [ %188, %185 ], [ %i.0., %196 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %125 ], [ %i.0, %127 ], [ %i.0, %139 ], [ %i.0, %166 ], [ %i.0., %193 ], [ 11, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_193_63) & (memory_controller_waitrequest == 1'd0)) & (main_168_169_reg == 1'd1)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %230, %199 ], [ %171, %170 ], [ %188, %185 ], [ %i.0., %196 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %125 ], [ %i.0, %127 ], [ %i.0, %139 ], [ %i.0, %166 ], [ %i.0., %193 ], [ 11, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_196_64) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %230, %199 ], [ %171, %170 ], [ %188, %185 ], [ %i.0., %196 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %125 ], [ %i.0, %127 ], [ %i.0, %139 ], [ %i.0, %166 ], [ %i.0., %193 ], [ 11, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_197_65) & (memory_controller_waitrequest == 1'd0)) & (main_197_198 == 1'd1)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %230, %199 ], [ %171, %170 ], [ %188, %185 ], [ %i.0., %196 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %125 ], [ %i.0, %127 ], [ %i.0, %139 ], [ %i.0, %166 ], [ %i.0., %193 ], [ 11, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_199_101) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %199 ], [ 1, %170 ], [ 1, %185 ], [ 1, %196 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %125 ], [ %., %127 ], [ 3, %139 ], [ %.24, %166 ], [ 3, %193 ], [ 5, %197 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_state_0_be = main__backedge_state_0_reg;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %199 ], [ 1, %170 ], [ 1, %185 ], [ 1, %196 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %125 ], [ %., %127 ], [ 3, %139 ], [ %.24, %166 ], [ 3, %193 ], [ 5, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be = 32'd1;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %199 ], [ 1, %170 ], [ 1, %185 ], [ 1, %196 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %125 ], [ %., %127 ], [ 3, %139 ], [ %.24, %166 ], [ 3, %193 ], [ 5, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_125_38) & (memory_controller_waitrequest == 1'd0)) & (main_125_126 == 1'd1)))
begin
main__backedge_backedge_state_0_be = 32'd4;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %199 ], [ 1, %170 ], [ 1, %185 ], [ 1, %196 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %125 ], [ %., %127 ], [ 3, %139 ], [ %.24, %166 ], [ 3, %193 ], [ 5, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_127_41) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be = main_127___reg;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %199 ], [ 1, %170 ], [ 1, %185 ], [ 1, %196 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %125 ], [ %., %127 ], [ 3, %139 ], [ %.24, %166 ], [ 3, %193 ], [ 5, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_139_42) & (memory_controller_waitrequest == 1'd0)) & (main_139_140 == 1'd0)))
begin
main__backedge_backedge_state_0_be = 32'd3;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %199 ], [ 1, %170 ], [ 1, %185 ], [ 1, %196 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %125 ], [ %., %127 ], [ 3, %139 ], [ %.24, %166 ], [ 3, %193 ], [ 5, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_166_52) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be = main_166__24;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %199 ], [ 1, %170 ], [ 1, %185 ], [ 1, %196 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %125 ], [ %., %127 ], [ 3, %139 ], [ %.24, %166 ], [ 3, %193 ], [ 5, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_170_54) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be = 32'd1;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %199 ], [ 1, %170 ], [ 1, %185 ], [ 1, %196 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %125 ], [ %., %127 ], [ 3, %139 ], [ %.24, %166 ], [ 3, %193 ], [ 5, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_185_60) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be = 32'd1;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %199 ], [ 1, %170 ], [ 1, %185 ], [ 1, %196 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %125 ], [ %., %127 ], [ 3, %139 ], [ %.24, %166 ], [ 3, %193 ], [ 5, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_193_63) & (memory_controller_waitrequest == 1'd0)) & (main_168_169_reg == 1'd1)))
begin
main__backedge_backedge_state_0_be = 32'd3;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %199 ], [ 1, %170 ], [ 1, %185 ], [ 1, %196 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %125 ], [ %., %127 ], [ 3, %139 ], [ %.24, %166 ], [ 3, %193 ], [ 5, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_196_64) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be = 32'd1;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %199 ], [ 1, %170 ], [ 1, %185 ], [ 1, %196 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %125 ], [ %., %127 ], [ 3, %139 ], [ %.24, %166 ], [ 3, %193 ], [ 5, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_197_65) & (memory_controller_waitrequest == 1'd0)) & (main_197_198 == 1'd1)))
begin
main__backedge_backedge_state_0_be = 32'd5;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %199 ], [ 1, %170 ], [ 1, %185 ], [ 1, %196 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %125 ], [ %., %127 ], [ 3, %139 ], [ %.24, %166 ], [ 3, %193 ], [ 5, %197 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_199_101) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_state_0_be = main__backedge_state_0_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %199 ], [ 1, %170 ], [ 1, %185 ], [ 1, %196 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %125 ], [ %., %127 ], [ 3, %139 ], [ %.24, %166 ], [ 3, %193 ], [ 5, %197 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %199 ], [ 1, %170 ], [ 1, %185 ], [ 1, %196 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %125 ], [ %., %127 ], [ 3, %139 ], [ %.24, %166 ], [ 3, %193 ], [ 5, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %199 ], [ 1, %170 ], [ 1, %185 ], [ 1, %196 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %125 ], [ %., %127 ], [ 3, %139 ], [ %.24, %166 ], [ 3, %193 ], [ 5, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_125_38) & (memory_controller_waitrequest == 1'd0)) & (main_125_126 == 1'd1)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %199 ], [ 1, %170 ], [ 1, %185 ], [ 1, %196 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %125 ], [ %., %127 ], [ 3, %139 ], [ %.24, %166 ], [ 3, %193 ], [ 5, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_127_41) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %199 ], [ 1, %170 ], [ 1, %185 ], [ 1, %196 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %125 ], [ %., %127 ], [ 3, %139 ], [ %.24, %166 ], [ 3, %193 ], [ 5, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_139_42) & (memory_controller_waitrequest == 1'd0)) & (main_139_140 == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %199 ], [ 1, %170 ], [ 1, %185 ], [ 1, %196 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %125 ], [ %., %127 ], [ 3, %139 ], [ %.24, %166 ], [ 3, %193 ], [ 5, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_166_52) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %199 ], [ 1, %170 ], [ 1, %185 ], [ 1, %196 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %125 ], [ %., %127 ], [ 3, %139 ], [ %.24, %166 ], [ 3, %193 ], [ 5, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_170_54) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %199 ], [ 1, %170 ], [ 1, %185 ], [ 1, %196 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %125 ], [ %., %127 ], [ 3, %139 ], [ %.24, %166 ], [ 3, %193 ], [ 5, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_185_60) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %199 ], [ 1, %170 ], [ 1, %185 ], [ 1, %196 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %125 ], [ %., %127 ], [ 3, %139 ], [ %.24, %166 ], [ 3, %193 ], [ 5, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_193_63) & (memory_controller_waitrequest == 1'd0)) & (main_168_169_reg == 1'd1)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %199 ], [ 1, %170 ], [ 1, %185 ], [ 1, %196 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %125 ], [ %., %127 ], [ 3, %139 ], [ %.24, %166 ], [ 3, %193 ], [ 5, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_196_64) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %199 ], [ 1, %170 ], [ 1, %185 ], [ 1, %196 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %125 ], [ %., %127 ], [ 3, %139 ], [ %.24, %166 ], [ 3, %193 ], [ 5, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_197_65) & (memory_controller_waitrequest == 1'd0)) & (main_197_198 == 1'd1)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %199 ], [ 1, %170 ], [ 1, %185 ], [ 1, %196 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %125 ], [ %., %127 ], [ 3, %139 ], [ %.24, %166 ], [ 3, %193 ], [ 5, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_199_101) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %229, %199 ], [ %sum_1hop.0, %170 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %196 ], [ %sum_1hop.0, %legup_memset_4.exit ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %125 ], [ %sum_1hop.0, %127 ], [ %sum_1hop.0, %139 ], [ %sum_1hop.0, %166 ], [ %sum_1hop.0, %193 ], [ %sum_1hop.0, %197 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %229, %199 ], [ %sum_1hop.0, %170 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %196 ], [ %sum_1hop.0, %legup_memset_4.exit ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %125 ], [ %sum_1hop.0, %127 ], [ %sum_1hop.0, %139 ], [ %sum_1hop.0, %166 ], [ %sum_1hop.0, %193 ], [ %sum_1hop.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %229, %199 ], [ %sum_1hop.0, %170 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %196 ], [ %sum_1hop.0, %legup_memset_4.exit ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %125 ], [ %sum_1hop.0, %127 ], [ %sum_1hop.0, %139 ], [ %sum_1hop.0, %166 ], [ %sum_1hop.0, %193 ], [ %sum_1hop.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_125_38) & (memory_controller_waitrequest == 1'd0)) & (main_125_126 == 1'd1)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %229, %199 ], [ %sum_1hop.0, %170 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %196 ], [ %sum_1hop.0, %legup_memset_4.exit ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %125 ], [ %sum_1hop.0, %127 ], [ %sum_1hop.0, %139 ], [ %sum_1hop.0, %166 ], [ %sum_1hop.0, %193 ], [ %sum_1hop.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_127_41) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %229, %199 ], [ %sum_1hop.0, %170 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %196 ], [ %sum_1hop.0, %legup_memset_4.exit ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %125 ], [ %sum_1hop.0, %127 ], [ %sum_1hop.0, %139 ], [ %sum_1hop.0, %166 ], [ %sum_1hop.0, %193 ], [ %sum_1hop.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_139_42) & (memory_controller_waitrequest == 1'd0)) & (main_139_140 == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %229, %199 ], [ %sum_1hop.0, %170 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %196 ], [ %sum_1hop.0, %legup_memset_4.exit ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %125 ], [ %sum_1hop.0, %127 ], [ %sum_1hop.0, %139 ], [ %sum_1hop.0, %166 ], [ %sum_1hop.0, %193 ], [ %sum_1hop.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_166_52) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %229, %199 ], [ %sum_1hop.0, %170 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %196 ], [ %sum_1hop.0, %legup_memset_4.exit ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %125 ], [ %sum_1hop.0, %127 ], [ %sum_1hop.0, %139 ], [ %sum_1hop.0, %166 ], [ %sum_1hop.0, %193 ], [ %sum_1hop.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_170_54) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %229, %199 ], [ %sum_1hop.0, %170 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %196 ], [ %sum_1hop.0, %legup_memset_4.exit ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %125 ], [ %sum_1hop.0, %127 ], [ %sum_1hop.0, %139 ], [ %sum_1hop.0, %166 ], [ %sum_1hop.0, %193 ], [ %sum_1hop.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_185_60) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %229, %199 ], [ %sum_1hop.0, %170 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %196 ], [ %sum_1hop.0, %legup_memset_4.exit ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %125 ], [ %sum_1hop.0, %127 ], [ %sum_1hop.0, %139 ], [ %sum_1hop.0, %166 ], [ %sum_1hop.0, %193 ], [ %sum_1hop.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_193_63) & (memory_controller_waitrequest == 1'd0)) & (main_168_169_reg == 1'd1)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %229, %199 ], [ %sum_1hop.0, %170 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %196 ], [ %sum_1hop.0, %legup_memset_4.exit ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %125 ], [ %sum_1hop.0, %127 ], [ %sum_1hop.0, %139 ], [ %sum_1hop.0, %166 ], [ %sum_1hop.0, %193 ], [ %sum_1hop.0, %197 ]*/
else if (((cur_state == LEGUP_F_main_BB_196_64) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %229, %199 ], [ %sum_1hop.0, %170 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %196 ], [ %sum_1hop.0, %legup_memset_4.exit ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %125 ], [ %sum_1hop.0, %127 ], [ %sum_1hop.0, %139 ], [ %sum_1hop.0, %166 ], [ %sum_1hop.0, %193 ], [ %sum_1hop.0, %197 ]*/
else if ((((cur_state == LEGUP_F_main_BB_197_65) & (memory_controller_waitrequest == 1'd0)) & (main_197_198 == 1'd1)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %229, %199 ], [ %sum_1hop.0, %170 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %196 ], [ %sum_1hop.0, %legup_memset_4.exit ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %125 ], [ %sum_1hop.0, %127 ], [ %sum_1hop.0, %139 ], [ %sum_1hop.0, %166 ], [ %sum_1hop.0, %193 ], [ %sum_1hop.0, %197 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_199_101) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_sum_1hop_0_be = main_199_229;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %229, %199 ], [ %sum_1hop.0, %170 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %196 ], [ %sum_1hop.0, %legup_memset_4.exit ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %125 ], [ %sum_1hop.0, %127 ], [ %sum_1hop.0, %139 ], [ %sum_1hop.0, %166 ], [ %sum_1hop.0, %193 ], [ %sum_1hop.0, %197 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %229, %199 ], [ %sum_1hop.0, %170 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %196 ], [ %sum_1hop.0, %legup_memset_4.exit ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %125 ], [ %sum_1hop.0, %127 ], [ %sum_1hop.0, %139 ], [ %sum_1hop.0, %166 ], [ %sum_1hop.0, %193 ], [ %sum_1hop.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %229, %199 ], [ %sum_1hop.0, %170 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %196 ], [ %sum_1hop.0, %legup_memset_4.exit ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %125 ], [ %sum_1hop.0, %127 ], [ %sum_1hop.0, %139 ], [ %sum_1hop.0, %166 ], [ %sum_1hop.0, %193 ], [ %sum_1hop.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_125_38) & (memory_controller_waitrequest == 1'd0)) & (main_125_126 == 1'd1)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %229, %199 ], [ %sum_1hop.0, %170 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %196 ], [ %sum_1hop.0, %legup_memset_4.exit ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %125 ], [ %sum_1hop.0, %127 ], [ %sum_1hop.0, %139 ], [ %sum_1hop.0, %166 ], [ %sum_1hop.0, %193 ], [ %sum_1hop.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_127_41) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %229, %199 ], [ %sum_1hop.0, %170 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %196 ], [ %sum_1hop.0, %legup_memset_4.exit ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %125 ], [ %sum_1hop.0, %127 ], [ %sum_1hop.0, %139 ], [ %sum_1hop.0, %166 ], [ %sum_1hop.0, %193 ], [ %sum_1hop.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_139_42) & (memory_controller_waitrequest == 1'd0)) & (main_139_140 == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %229, %199 ], [ %sum_1hop.0, %170 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %196 ], [ %sum_1hop.0, %legup_memset_4.exit ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %125 ], [ %sum_1hop.0, %127 ], [ %sum_1hop.0, %139 ], [ %sum_1hop.0, %166 ], [ %sum_1hop.0, %193 ], [ %sum_1hop.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_166_52) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %229, %199 ], [ %sum_1hop.0, %170 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %196 ], [ %sum_1hop.0, %legup_memset_4.exit ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %125 ], [ %sum_1hop.0, %127 ], [ %sum_1hop.0, %139 ], [ %sum_1hop.0, %166 ], [ %sum_1hop.0, %193 ], [ %sum_1hop.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_170_54) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %229, %199 ], [ %sum_1hop.0, %170 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %196 ], [ %sum_1hop.0, %legup_memset_4.exit ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %125 ], [ %sum_1hop.0, %127 ], [ %sum_1hop.0, %139 ], [ %sum_1hop.0, %166 ], [ %sum_1hop.0, %193 ], [ %sum_1hop.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_185_60) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %229, %199 ], [ %sum_1hop.0, %170 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %196 ], [ %sum_1hop.0, %legup_memset_4.exit ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %125 ], [ %sum_1hop.0, %127 ], [ %sum_1hop.0, %139 ], [ %sum_1hop.0, %166 ], [ %sum_1hop.0, %193 ], [ %sum_1hop.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_193_63) & (memory_controller_waitrequest == 1'd0)) & (main_168_169_reg == 1'd1)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %229, %199 ], [ %sum_1hop.0, %170 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %196 ], [ %sum_1hop.0, %legup_memset_4.exit ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %125 ], [ %sum_1hop.0, %127 ], [ %sum_1hop.0, %139 ], [ %sum_1hop.0, %166 ], [ %sum_1hop.0, %193 ], [ %sum_1hop.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_196_64) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %229, %199 ], [ %sum_1hop.0, %170 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %196 ], [ %sum_1hop.0, %legup_memset_4.exit ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %125 ], [ %sum_1hop.0, %127 ], [ %sum_1hop.0, %139 ], [ %sum_1hop.0, %166 ], [ %sum_1hop.0, %193 ], [ %sum_1hop.0, %197 ]*/
if ((((cur_state == LEGUP_F_main_BB_197_65) & (memory_controller_waitrequest == 1'd0)) & (main_197_198 == 1'd1)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %229, %199 ], [ %sum_1hop.0, %170 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %196 ], [ %sum_1hop.0, %legup_memset_4.exit ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %125 ], [ %sum_1hop.0, %127 ], [ %sum_1hop.0, %139 ], [ %sum_1hop.0, %166 ], [ %sum_1hop.0, %193 ], [ %sum_1hop.0, %197 ]*/
if (((cur_state == LEGUP_F_main_BB_199_101) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %scevgep.1 = getelementptr [16 x i32]* %5, i32 0, i32 1*/
if (reset) begin main__preheader29_scevgep_1 = 0; end
begin
main__preheader29_scevgep_1 = (1'd0 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %scevgep.1 = getelementptr [16 x i32]* %5, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB__preheader29_4))
begin
main__preheader29_scevgep_1_reg <= main__preheader29_scevgep_1;
if (reset == 1'b0 && ^(main__preheader29_scevgep_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_scevgep_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %scevgep.2 = getelementptr [16 x i32]* %5, i32 0, i32 2*/
if (reset) begin main__preheader29_scevgep_2 = 0; end
begin
main__preheader29_scevgep_2 = (1'd0 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %scevgep.2 = getelementptr [16 x i32]* %5, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB__preheader29_4))
begin
main__preheader29_scevgep_2_reg <= main__preheader29_scevgep_2;
if (reset == 1'b0 && ^(main__preheader29_scevgep_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_scevgep_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %scevgep.3 = getelementptr [16 x i32]* %5, i32 0, i32 3*/
if (reset) begin main__preheader29_scevgep_3 = 0; end
begin
main__preheader29_scevgep_3 = (1'd0 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %scevgep.3 = getelementptr [16 x i32]* %5, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB__preheader29_4))
begin
main__preheader29_scevgep_3_reg <= main__preheader29_scevgep_3;
if (reset == 1'b0 && ^(main__preheader29_scevgep_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_scevgep_3_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %82 = load i32* %scevgep52, align 4, !tbaa !0*/
begin
main__preheader29_82 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %82 = load i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_5))
begin
main__preheader29_82_reg <= main__preheader29_82;
if (reset == 1'b0 && ^(main__preheader29_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_82_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %84 = load i32* %scevgep.1, align 4, !tbaa !0*/
begin
main__preheader29_84 = main_0_5_out_b;
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %84 = load i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_5))
begin
main__preheader29_84_reg <= main__preheader29_84;
if (reset == 1'b0 && ^(main__preheader29_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_84_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %86 = load i32* %scevgep.2, align 4, !tbaa !0*/
begin
main__preheader29_86 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %86 = load i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_6))
begin
main__preheader29_86_reg <= main__preheader29_86;
if (reset == 1'b0 && ^(main__preheader29_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_86_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %88 = load i32* %scevgep.3, align 4, !tbaa !0*/
begin
main__preheader29_88 = main_0_5_out_b;
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %88 = load i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_6))
begin
main__preheader29_88_reg <= main__preheader29_88;
if (reset == 1'b0 && ^(main__preheader29_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_88_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %scevgep.1.1 = getelementptr [16 x i32]* %5, i32 0, i32 5*/
if (reset) begin main__preheader29_scevgep_1_1 = 0; end
begin
main__preheader29_scevgep_1_1 = (1'd0 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %scevgep.1.1 = getelementptr [16 x i32]* %5, i32 0, i32 5*/
if ((cur_state == LEGUP_F_main_BB__preheader29_4))
begin
main__preheader29_scevgep_1_1_reg <= main__preheader29_scevgep_1_1;
if (reset == 1'b0 && ^(main__preheader29_scevgep_1_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_scevgep_1_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %scevgep.2.1 = getelementptr [16 x i32]* %5, i32 0, i32 6*/
if (reset) begin main__preheader29_scevgep_2_1 = 0; end
begin
main__preheader29_scevgep_2_1 = (1'd0 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %scevgep.2.1 = getelementptr [16 x i32]* %5, i32 0, i32 6*/
if ((cur_state == LEGUP_F_main_BB__preheader29_4))
begin
main__preheader29_scevgep_2_1_reg <= main__preheader29_scevgep_2_1;
if (reset == 1'b0 && ^(main__preheader29_scevgep_2_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_scevgep_2_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %scevgep.3.1 = getelementptr [16 x i32]* %5, i32 0, i32 7*/
if (reset) begin main__preheader29_scevgep_3_1 = 0; end
begin
main__preheader29_scevgep_3_1 = (1'd0 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %scevgep.3.1 = getelementptr [16 x i32]* %5, i32 0, i32 7*/
if ((cur_state == LEGUP_F_main_BB__preheader29_4))
begin
main__preheader29_scevgep_3_1_reg <= main__preheader29_scevgep_3_1;
if (reset == 1'b0 && ^(main__preheader29_scevgep_3_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_scevgep_3_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %scevgep.148 = getelementptr [16 x i32]* %5, i32 0, i32 4*/
if (reset) begin main__preheader29_scevgep_148 = 0; end
begin
main__preheader29_scevgep_148 = (1'd0 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %scevgep.148 = getelementptr [16 x i32]* %5, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB__preheader29_4))
begin
main__preheader29_scevgep_148_reg <= main__preheader29_scevgep_148;
if (reset == 1'b0 && ^(main__preheader29_scevgep_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_scevgep_148_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %91 = load i32* %scevgep.148, align 4, !tbaa !0*/
begin
main__preheader29_91 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %91 = load i32* %scevgep.148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_7))
begin
main__preheader29_91_reg <= main__preheader29_91;
if (reset == 1'b0 && ^(main__preheader29_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_91_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %93 = load i32* %scevgep.1.1, align 4, !tbaa !0*/
begin
main__preheader29_93 = main_0_5_out_b;
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %93 = load i32* %scevgep.1.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_7))
begin
main__preheader29_93_reg <= main__preheader29_93;
if (reset == 1'b0 && ^(main__preheader29_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_93_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %95 = load i32* %scevgep.2.1, align 4, !tbaa !0*/
begin
main__preheader29_95 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %95 = load i32* %scevgep.2.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_8))
begin
main__preheader29_95_reg <= main__preheader29_95;
if (reset == 1'b0 && ^(main__preheader29_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_95_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %97 = load i32* %scevgep.3.1, align 4, !tbaa !0*/
begin
main__preheader29_97 = main_0_5_out_b;
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %97 = load i32* %scevgep.3.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_8))
begin
main__preheader29_97_reg <= main__preheader29_97;
if (reset == 1'b0 && ^(main__preheader29_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_97_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %scevgep.1.2 = getelementptr [16 x i32]* %5, i32 0, i32 9*/
if (reset) begin main__preheader29_scevgep_1_2 = 0; end
begin
main__preheader29_scevgep_1_2 = (1'd0 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %scevgep.1.2 = getelementptr [16 x i32]* %5, i32 0, i32 9*/
if ((cur_state == LEGUP_F_main_BB__preheader29_4))
begin
main__preheader29_scevgep_1_2_reg <= main__preheader29_scevgep_1_2;
if (reset == 1'b0 && ^(main__preheader29_scevgep_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_scevgep_1_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %scevgep.2.2 = getelementptr [16 x i32]* %5, i32 0, i32 10*/
if (reset) begin main__preheader29_scevgep_2_2 = 0; end
begin
main__preheader29_scevgep_2_2 = (1'd0 + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %scevgep.2.2 = getelementptr [16 x i32]* %5, i32 0, i32 10*/
if ((cur_state == LEGUP_F_main_BB__preheader29_4))
begin
main__preheader29_scevgep_2_2_reg <= main__preheader29_scevgep_2_2;
if (reset == 1'b0 && ^(main__preheader29_scevgep_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_scevgep_2_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %scevgep.3.2 = getelementptr [16 x i32]* %5, i32 0, i32 11*/
if (reset) begin main__preheader29_scevgep_3_2 = 0; end
begin
main__preheader29_scevgep_3_2 = (1'd0 + (4 * 32'd11));
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %scevgep.3.2 = getelementptr [16 x i32]* %5, i32 0, i32 11*/
if ((cur_state == LEGUP_F_main_BB__preheader29_4))
begin
main__preheader29_scevgep_3_2_reg <= main__preheader29_scevgep_3_2;
if (reset == 1'b0 && ^(main__preheader29_scevgep_3_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_scevgep_3_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %scevgep.249 = getelementptr [16 x i32]* %5, i32 0, i32 8*/
if (reset) begin main__preheader29_scevgep_249 = 0; end
begin
main__preheader29_scevgep_249 = (1'd0 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %scevgep.249 = getelementptr [16 x i32]* %5, i32 0, i32 8*/
if ((cur_state == LEGUP_F_main_BB__preheader29_4))
begin
main__preheader29_scevgep_249_reg <= main__preheader29_scevgep_249;
if (reset == 1'b0 && ^(main__preheader29_scevgep_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_scevgep_249_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %100 = load i32* %scevgep.249, align 4, !tbaa !0*/
begin
main__preheader29_100 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %100 = load i32* %scevgep.249, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_9))
begin
main__preheader29_100_reg <= main__preheader29_100;
if (reset == 1'b0 && ^(main__preheader29_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_100_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %102 = load i32* %scevgep.1.2, align 4, !tbaa !0*/
begin
main__preheader29_102 = main_0_5_out_b;
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %102 = load i32* %scevgep.1.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_9))
begin
main__preheader29_102_reg <= main__preheader29_102;
if (reset == 1'b0 && ^(main__preheader29_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_102_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %104 = load i32* %scevgep.2.2, align 4, !tbaa !0*/
begin
main__preheader29_104 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %104 = load i32* %scevgep.2.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_10))
begin
main__preheader29_104_reg <= main__preheader29_104;
if (reset == 1'b0 && ^(main__preheader29_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_104_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %106 = load i32* %scevgep.3.2, align 4, !tbaa !0*/
begin
main__preheader29_106 = main_0_5_out_b;
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %106 = load i32* %scevgep.3.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_10))
begin
main__preheader29_106_reg <= main__preheader29_106;
if (reset == 1'b0 && ^(main__preheader29_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_106_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %scevgep.1.3 = getelementptr [16 x i32]* %5, i32 0, i32 13*/
if (reset) begin main__preheader29_scevgep_1_3 = 0; end
begin
main__preheader29_scevgep_1_3 = (1'd0 + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %scevgep.1.3 = getelementptr [16 x i32]* %5, i32 0, i32 13*/
if ((cur_state == LEGUP_F_main_BB__preheader29_4))
begin
main__preheader29_scevgep_1_3_reg <= main__preheader29_scevgep_1_3;
if (reset == 1'b0 && ^(main__preheader29_scevgep_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_scevgep_1_3_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %scevgep.2.3 = getelementptr [16 x i32]* %5, i32 0, i32 14*/
if (reset) begin main__preheader29_scevgep_2_3 = 0; end
begin
main__preheader29_scevgep_2_3 = (1'd0 + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %scevgep.2.3 = getelementptr [16 x i32]* %5, i32 0, i32 14*/
if ((cur_state == LEGUP_F_main_BB__preheader29_4))
begin
main__preheader29_scevgep_2_3_reg <= main__preheader29_scevgep_2_3;
if (reset == 1'b0 && ^(main__preheader29_scevgep_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_scevgep_2_3_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %scevgep.3.3 = getelementptr [16 x i32]* %5, i32 0, i32 15*/
if (reset) begin main__preheader29_scevgep_3_3 = 0; end
begin
main__preheader29_scevgep_3_3 = (1'd0 + (4 * 32'd15));
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %scevgep.3.3 = getelementptr [16 x i32]* %5, i32 0, i32 15*/
if ((cur_state == LEGUP_F_main_BB__preheader29_4))
begin
main__preheader29_scevgep_3_3_reg <= main__preheader29_scevgep_3_3;
if (reset == 1'b0 && ^(main__preheader29_scevgep_3_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_scevgep_3_3_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %scevgep.350 = getelementptr [16 x i32]* %5, i32 0, i32 12*/
if (reset) begin main__preheader29_scevgep_350 = 0; end
begin
main__preheader29_scevgep_350 = (1'd0 + (4 * 32'd12));
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %scevgep.350 = getelementptr [16 x i32]* %5, i32 0, i32 12*/
if ((cur_state == LEGUP_F_main_BB__preheader29_4))
begin
main__preheader29_scevgep_350_reg <= main__preheader29_scevgep_350;
if (reset == 1'b0 && ^(main__preheader29_scevgep_350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_scevgep_350_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %109 = load i32* %scevgep.350, align 4, !tbaa !0*/
begin
main__preheader29_109 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %109 = load i32* %scevgep.350, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_11))
begin
main__preheader29_109_reg <= main__preheader29_109;
if (reset == 1'b0 && ^(main__preheader29_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_109_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %111 = load i32* %scevgep.1.3, align 4, !tbaa !0*/
begin
main__preheader29_111 = main_0_5_out_b;
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %111 = load i32* %scevgep.1.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_11))
begin
main__preheader29_111_reg <= main__preheader29_111;
if (reset == 1'b0 && ^(main__preheader29_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_111_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %113 = load i32* %scevgep.2.3, align 4, !tbaa !0*/
begin
main__preheader29_113 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %113 = load i32* %scevgep.2.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_12))
begin
main__preheader29_113_reg <= main__preheader29_113;
if (reset == 1'b0 && ^(main__preheader29_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_113_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader29*/
/*   %115 = load i32* %scevgep.3.3, align 4, !tbaa !0*/
begin
main__preheader29_115 = main_0_5_out_b;
end
end
always @(posedge clk) begin
/* main: %.preheader29*/
/*   %115 = load i32* %scevgep.3.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_12))
begin
main__preheader29_115_reg <= main__preheader29_115;
if (reset == 1'b0 && ^(main__preheader29_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader29_115_reg"); $finish; end
end
end
always @(*) begin
/* main: %119*/
/*   %s.i.0 = phi i32* [ %scevgep52, %.preheader31 ], [ %124, %122 ]*/
if (((cur_state == LEGUP_F_main_BB__preheader31_27) & (memory_controller_waitrequest == 1'd0)))
begin
main_119_s_i_0 = main_0_scevgep52_reg;
end
/* main: %119*/
/*   %s.i.0 = phi i32* [ %scevgep52, %.preheader31 ], [ %124, %122 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_122_30) & (memory_controller_waitrequest == 1'd0))) */
begin
main_119_s_i_0 = main_122_124_reg;
end
end
always @(posedge clk) begin
/* main: %119*/
/*   %s.i.0 = phi i32* [ %scevgep52, %.preheader31 ], [ %124, %122 ]*/
if (((cur_state == LEGUP_F_main_BB__preheader31_27) & (memory_controller_waitrequest == 1'd0)))
begin
main_119_s_i_0_reg <= main_119_s_i_0;
if (reset == 1'b0 && ^(main_119_s_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_s_i_0_reg"); $finish; end
end
/* main: %119*/
/*   %s.i.0 = phi i32* [ %scevgep52, %.preheader31 ], [ %124, %122 ]*/
if (((cur_state == LEGUP_F_main_BB_122_30) & (memory_controller_waitrequest == 1'd0)))
begin
main_119_s_i_0_reg <= main_119_s_i_0;
if (reset == 1'b0 && ^(main_119_s_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_s_i_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %119*/
/*   %120 = phi i32 [ 16, %.preheader31 ], [ %123, %122 ]*/
if (((cur_state == LEGUP_F_main_BB__preheader31_27) & (memory_controller_waitrequest == 1'd0)))
begin
main_119_120 = 32'd16;
end
/* main: %119*/
/*   %120 = phi i32 [ 16, %.preheader31 ], [ %123, %122 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_122_30) & (memory_controller_waitrequest == 1'd0))) */
begin
main_119_120 = main_122_123_reg;
end
end
always @(posedge clk) begin
/* main: %119*/
/*   %120 = phi i32 [ 16, %.preheader31 ], [ %123, %122 ]*/
if (((cur_state == LEGUP_F_main_BB__preheader31_27) & (memory_controller_waitrequest == 1'd0)))
begin
main_119_120_reg <= main_119_120;
if (reset == 1'b0 && ^(main_119_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_120_reg"); $finish; end
end
/* main: %119*/
/*   %120 = phi i32 [ 16, %.preheader31 ], [ %123, %122 ]*/
if (((cur_state == LEGUP_F_main_BB_122_30) & (memory_controller_waitrequest == 1'd0)))
begin
main_119_120_reg <= main_119_120;
if (reset == 1'b0 && ^(main_119_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_120_reg"); $finish; end
end
end
always @(*) begin
/* main: %119*/
/*   %121 = icmp eq i32 %120, 0*/
begin
main_119_121 = (main_119_120_reg == 32'd0);
end
end
always @(posedge clk) begin
/* main: %119*/
/*   %121 = icmp eq i32 %120, 0*/
if ((cur_state == LEGUP_F_main_BB_119_28))
begin
main_119_121_reg <= main_119_121;
if (reset == 1'b0 && ^(main_119_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_121_reg"); $finish; end
end
end
always @(*) begin
/* main: %122*/
/*   %123 = add i32 %120, -1*/
begin
main_122_123 = (main_119_120_reg + -32'd1);
end
end
always @(posedge clk) begin
/* main: %122*/
/*   %123 = add i32 %120, -1*/
if ((cur_state == LEGUP_F_main_BB_122_29))
begin
main_122_123_reg <= main_122_123;
if (reset == 1'b0 && ^(main_122_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_122_123_reg"); $finish; end
end
end
always @(*) begin
/* main: %122*/
/*   %124 = getelementptr inbounds i32* %s.i.0, i32 1*/
begin
main_122_124 = (main_119_s_i_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %122*/
/*   %124 = getelementptr inbounds i32* %s.i.0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_122_29))
begin
main_122_124_reg <= main_122_124;
if (reset == 1'b0 && ^(main_122_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_122_124_reg"); $finish; end
end
end
always @(*) begin
/* main: %125*/
/*   %126 = icmp eq i32 %i.0, 11*/
begin
main_125_126 = (main__backedge_i_0_reg == 32'd11);
end
end
always @(posedge clk) begin
/* main: %125*/
/*   %126 = icmp eq i32 %i.0, 11*/
if ((cur_state == LEGUP_F_main_BB_125_38))
begin
main_125_126_reg <= main_125_126;
if (reset == 1'b0 && ^(main_125_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_125_126_reg"); $finish; end
end
end
always @(*) begin
/* main: %127*/
/*   %128 = getelementptr inbounds [11 x i32]* %1, i32 0, i32 %i.0*/
begin
main_127_128 = (1'd0 + (4 * main__backedge_i_0_reg));
end
end
always @(posedge clk) begin
/* main: %127*/
/*   %128 = getelementptr inbounds [11 x i32]* %1, i32 0, i32 %i.0*/
if ((cur_state == LEGUP_F_main_BB_127_39))
begin
main_127_128_reg <= main_127_128;
if (reset == 1'b0 && ^(main_127_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127_128_reg"); $finish; end
end
end
always @(*) begin
/* main: %127*/
/*   %129 = load i32* %128, align 4, !tbaa !0*/
begin
main_127_129 = main_0_1_out_b;
end
end
always @(posedge clk) begin
/* main: %127*/
/*   %129 = load i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_127_40))
begin
main_127_129_reg <= main_127_129;
if (reset == 1'b0 && ^(main_127_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127_129_reg"); $finish; end
end
end
always @(*) begin
/* main: %127*/
/*   %130 = getelementptr inbounds [11 x i32]* %2, i32 0, i32 %i.0*/
begin
main_127_130 = (1'd0 + (4 * main__backedge_i_0_reg));
end
end
always @(posedge clk) begin
/* main: %127*/
/*   %130 = getelementptr inbounds [11 x i32]* %2, i32 0, i32 %i.0*/
if ((cur_state == LEGUP_F_main_BB_127_39))
begin
main_127_130_reg <= main_127_130;
if (reset == 1'b0 && ^(main_127_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127_130_reg"); $finish; end
end
end
always @(*) begin
/* main: %127*/
/*   %131 = load i32* %130, align 4, !tbaa !0*/
begin
main_127_131 = main_0_2_out_b;
end
end
always @(posedge clk) begin
/* main: %127*/
/*   %131 = load i32* %130, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_127_40))
begin
main_127_131_reg <= main_127_131;
if (reset == 1'b0 && ^(main_127_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127_131_reg"); $finish; end
end
end
always @(*) begin
/* main: %127*/
/*   %132 = getelementptr inbounds [11 x i32]* %3, i32 0, i32 %129*/
begin
main_127_132 = (1'd0 + (4 * main_127_129));
end
end
always @(posedge clk) begin
/* main: %127*/
/*   %132 = getelementptr inbounds [11 x i32]* %3, i32 0, i32 %129*/
if ((cur_state == LEGUP_F_main_BB_127_40))
begin
main_127_132_reg <= main_127_132;
if (reset == 1'b0 && ^(main_127_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127_132_reg"); $finish; end
end
end
always @(*) begin
/* main: %127*/
/*   %133 = load i32* %132, align 4, !tbaa !0*/
begin
main_127_133 = main_0_3_out_a;
end
end
always @(posedge clk) begin
/* main: %127*/
/*   %133 = load i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_127_41))
begin
main_127_133_reg <= main_127_133;
if (reset == 1'b0 && ^(main_127_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127_133_reg"); $finish; end
end
end
always @(*) begin
/* main: %127*/
/*   %134 = getelementptr inbounds [11 x i32]* %4, i32 0, i32 %129*/
begin
main_127_134 = (1'd0 + (4 * main_127_129));
end
end
always @(posedge clk) begin
/* main: %127*/
/*   %134 = getelementptr inbounds [11 x i32]* %4, i32 0, i32 %129*/
if ((cur_state == LEGUP_F_main_BB_127_40))
begin
main_127_134_reg <= main_127_134;
if (reset == 1'b0 && ^(main_127_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127_134_reg"); $finish; end
end
end
always @(*) begin
/* main: %127*/
/*   %135 = load i32* %134, align 4, !tbaa !0*/
begin
main_127_135 = main_0_4_out_b;
end
end
always @(posedge clk) begin
/* main: %127*/
/*   %135 = load i32* %134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_127_41))
begin
main_127_135_reg <= main_127_135;
if (reset == 1'b0 && ^(main_127_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127_135_reg"); $finish; end
end
end
always @(*) begin
/* main: %127*/
/*   %136 = getelementptr inbounds [11 x i32]* %3, i32 0, i32 %131*/
begin
main_127_136 = (1'd0 + (4 * main_127_131));
end
end
always @(posedge clk) begin
/* main: %127*/
/*   %136 = getelementptr inbounds [11 x i32]* %3, i32 0, i32 %131*/
if ((cur_state == LEGUP_F_main_BB_127_40))
begin
main_127_136_reg <= main_127_136;
if (reset == 1'b0 && ^(main_127_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127_136_reg"); $finish; end
end
end
always @(*) begin
/* main: %127*/
/*   %137 = load i32* %136, align 4, !tbaa !0*/
begin
main_127_137 = main_0_3_out_b;
end
end
always @(posedge clk) begin
/* main: %127*/
/*   %137 = load i32* %136, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_127_41))
begin
main_127_137_reg <= main_127_137;
if (reset == 1'b0 && ^(main_127_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127_137_reg"); $finish; end
end
end
always @(*) begin
/* main: %127*/
/*   %138 = icmp eq i32 %i.0, 0*/
begin
main_127_138 = (main__backedge_i_0_reg == 32'd0);
end
end
always @(posedge clk) begin
/* main: %127*/
/*   %138 = icmp eq i32 %i.0, 0*/
if ((cur_state == LEGUP_F_main_BB_127_39))
begin
main_127_138_reg <= main_127_138;
if (reset == 1'b0 && ^(main_127_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127_138_reg"); $finish; end
end
end
always @(*) begin
/* main: %127*/
/*   %. = select i1 %138, i32 3, i32 2*/
begin
main_127__ = (main_127_138 ? 32'd3 : 32'd2);
end
end
always @(posedge clk) begin
/* main: %127*/
/*   %. = select i1 %138, i32 3, i32 2*/
if ((cur_state == LEGUP_F_main_BB_127_39))
begin
main_127___reg <= main_127__;
if (reset == 1'b0 && ^(main_127__) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127___reg"); $finish; end
end
end
always @(*) begin
/* main: %139*/
/*   %140 = icmp eq i32 %pos_a_X.0, -1*/
begin
main_139_140 = (main__backedge_pos_a_X_0_reg == -32'd1);
end
end
always @(posedge clk) begin
/* main: %139*/
/*   %140 = icmp eq i32 %pos_a_X.0, -1*/
if ((cur_state == LEGUP_F_main_BB_139_42))
begin
main_139_140_reg <= main_139_140;
if (reset == 1'b0 && ^(main_139_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_139_140_reg"); $finish; end
end
end
always @(*) begin
/* main: %141*/
/*   %142 = add nsw i32 %i.0, -1*/
begin
main_141_142 = (main__backedge_i_0_reg + -32'd1);
end
end
always @(posedge clk) begin
/* main: %141*/
/*   %142 = add nsw i32 %i.0, -1*/
if ((cur_state == LEGUP_F_main_BB_141_43))
begin
main_141_142_reg <= main_141_142;
if (reset == 1'b0 && ^(main_141_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_142_reg"); $finish; end
end
end
always @(*) begin
/* main: %141*/
/*   %143 = getelementptr inbounds [11 x i32]* %3, i32 0, i32 %142*/
begin
main_141_143 = (1'd0 + (4 * main_141_142_reg));
end
end
always @(posedge clk) begin
/* main: %141*/
/*   %143 = getelementptr inbounds [11 x i32]* %3, i32 0, i32 %142*/
if ((cur_state == LEGUP_F_main_BB_141_44))
begin
main_141_143_reg <= main_141_143;
if (reset == 1'b0 && ^(main_141_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_143_reg"); $finish; end
end
end
always @(*) begin
/* main: %141*/
/*   %144 = load i32* %143, align 4, !tbaa !0*/
begin
main_141_144 = main_0_3_out_b;
end
end
always @(posedge clk) begin
/* main: %141*/
/*   %144 = load i32* %143, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_141_45))
begin
main_141_144_reg <= main_141_144;
if (reset == 1'b0 && ^(main_141_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_144_reg"); $finish; end
end
end
always @(*) begin
/* main: %141*/
/*   %145 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 %j.0*/
begin
main_141_145 = (1'd0 + (4 * main__backedge_j_0_reg));
end
end
always @(posedge clk) begin
/* main: %141*/
/*   %145 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 %j.0*/
if ((cur_state == LEGUP_F_main_BB_141_43))
begin
main_141_145_reg <= main_141_145;
if (reset == 1'b0 && ^(main_141_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_145_reg"); $finish; end
end
end
always @(*) begin
/* main: %141*/
/*   %146 = load i32* %145, align 4, !tbaa !0*/
begin
main_141_146 = main_0_6_out_a;
end
end
always @(posedge clk) begin
/* main: %141*/
/*   %146 = load i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_141_44))
begin
main_141_146_reg <= main_141_146;
if (reset == 1'b0 && ^(main_141_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_146_reg"); $finish; end
end
end
always @(*) begin
/* main: %141*/
/*   %147 = add nsw i32 %146, %144*/
begin
main_141_147 = (main_141_146_reg + main_141_144);
end
end
always @(posedge clk) begin
/* main: %141*/
/*   %147 = add nsw i32 %146, %144*/
if ((cur_state == LEGUP_F_main_BB_141_45))
begin
main_141_147_reg <= main_141_147;
if (reset == 1'b0 && ^(main_141_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_147_reg"); $finish; end
end
end
always @(*) begin
/* main: %141*/
/*   %148 = getelementptr inbounds [11 x i32]* %3, i32 0, i32 %a.0*/
begin
main_141_148 = (1'd0 + (4 * main__backedge_a_0_reg));
end
end
always @(posedge clk) begin
/* main: %141*/
/*   %148 = getelementptr inbounds [11 x i32]* %3, i32 0, i32 %a.0*/
if ((cur_state == LEGUP_F_main_BB_141_43))
begin
main_141_148_reg <= main_141_148;
if (reset == 1'b0 && ^(main_141_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_148_reg"); $finish; end
end
end
always @(*) begin
/* main: %141*/
/*   %149 = getelementptr inbounds [11 x i32]* %4, i32 0, i32 %142*/
begin
main_141_149 = (1'd0 + (4 * main_141_142_reg));
end
end
always @(posedge clk) begin
/* main: %141*/
/*   %149 = getelementptr inbounds [11 x i32]* %4, i32 0, i32 %142*/
if ((cur_state == LEGUP_F_main_BB_141_44))
begin
main_141_149_reg <= main_141_149;
if (reset == 1'b0 && ^(main_141_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_149_reg"); $finish; end
end
end
always @(*) begin
/* main: %141*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
begin
main_141_150 = main_0_4_out_a;
end
end
always @(posedge clk) begin
/* main: %141*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_141_45))
begin
main_141_150_reg <= main_141_150;
if (reset == 1'b0 && ^(main_141_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_150_reg"); $finish; end
end
end
always @(*) begin
/* main: %141*/
/*   %151 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 %j.0*/
begin
main_141_151 = (1'd0 + (4 * main__backedge_j_0_reg));
end
end
always @(posedge clk) begin
/* main: %141*/
/*   %151 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 %j.0*/
if ((cur_state == LEGUP_F_main_BB_141_43))
begin
main_141_151_reg <= main_141_151;
if (reset == 1'b0 && ^(main_141_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_151_reg"); $finish; end
end
end
always @(*) begin
/* main: %141*/
/*   %152 = load i32* %151, align 4, !tbaa !0*/
begin
main_141_152 = main_0_7_out_a;
end
end
always @(posedge clk) begin
/* main: %141*/
/*   %152 = load i32* %151, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_141_44))
begin
main_141_152_reg <= main_141_152;
if (reset == 1'b0 && ^(main_141_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_152_reg"); $finish; end
end
end
always @(*) begin
/* main: %141*/
/*   %153 = add nsw i32 %152, %150*/
begin
main_141_153 = (main_141_152_reg + main_141_150);
end
end
always @(posedge clk) begin
/* main: %141*/
/*   %153 = add nsw i32 %152, %150*/
if ((cur_state == LEGUP_F_main_BB_141_45))
begin
main_141_153_reg <= main_141_153;
if (reset == 1'b0 && ^(main_141_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_153_reg"); $finish; end
end
end
always @(*) begin
/* main: %141*/
/*   %154 = getelementptr inbounds [11 x i32]* %4, i32 0, i32 %a.0*/
begin
main_141_154 = (1'd0 + (4 * main__backedge_a_0_reg));
end
end
always @(posedge clk) begin
/* main: %141*/
/*   %154 = getelementptr inbounds [11 x i32]* %4, i32 0, i32 %a.0*/
if ((cur_state == LEGUP_F_main_BB_141_43))
begin
main_141_154_reg <= main_141_154;
if (reset == 1'b0 && ^(main_141_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_154_reg"); $finish; end
end
end
always @(*) begin
/* main: %141*/
/*   %155 = add nsw i32 %j.0, 1*/
begin
main_141_155 = (main__backedge_j_0_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %141*/
/*   %155 = add nsw i32 %j.0, 1*/
if ((cur_state == LEGUP_F_main_BB_141_43))
begin
main_141_155_reg <= main_141_155;
if (reset == 1'b0 && ^(main_141_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_155_reg"); $finish; end
end
end
always @(*) begin
/* main: %141*/
/*   %idxscale17 = shl i32 %147, 2*/
begin
main_141_idxscale17 = (main_141_147 <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* main: %141*/
/*   %idxscale17 = shl i32 %147, 2*/
if ((cur_state == LEGUP_F_main_BB_141_45))
begin
main_141_idxscale17_reg <= main_141_idxscale17;
if (reset == 1'b0 && ^(main_141_idxscale17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_idxscale17_reg"); $finish; end
end
end
always @(*) begin
/* main: %141*/
/*   %.sum18 = add i32 %idxscale17, %153*/
begin
main_141__sum18 = (main_141_idxscale17 + main_141_153);
end
end
always @(posedge clk) begin
/* main: %141*/
/*   %.sum18 = add i32 %idxscale17, %153*/
if ((cur_state == LEGUP_F_main_BB_141_45))
begin
main_141__sum18_reg <= main_141__sum18;
if (reset == 1'b0 && ^(main_141__sum18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141__sum18_reg"); $finish; end
end
end
always @(*) begin
/* main: %141*/
/*   %156 = getelementptr inbounds [16 x i32]* %5, i32 0, i32 %.sum18*/
begin
main_141_156 = (1'd0 + (4 * main_141__sum18_reg));
end
end
always @(posedge clk) begin
/* main: %141*/
/*   %156 = getelementptr inbounds [16 x i32]* %5, i32 0, i32 %.sum18*/
if ((cur_state == LEGUP_F_main_BB_141_46))
begin
main_141_156_reg <= main_141_156;
if (reset == 1'b0 && ^(main_141_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_156_reg"); $finish; end
end
end
always @(*) begin
/* main: %141*/
/*   %157 = load i32* %156, align 4, !tbaa !0*/
begin
main_141_157 = main_0_5_out_b;
end
end
always @(posedge clk) begin
/* main: %141*/
/*   %157 = load i32* %156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_141_47))
begin
main_141_157_reg <= main_141_157;
if (reset == 1'b0 && ^(main_141_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_157_reg"); $finish; end
end
end
always @(*) begin
/* main: %141*/
/*   %158 = icmp eq i32 %157, -1*/
begin
main_141_158 = (main_141_157 == -32'd1);
end
end
always @(posedge clk) begin
/* main: %141*/
/*   %158 = icmp eq i32 %157, -1*/
if ((cur_state == LEGUP_F_main_BB_141_47))
begin
main_141_158_reg <= main_141_158;
if (reset == 1'b0 && ^(main_141_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_158_reg"); $finish; end
end
end
always @(*) begin
/* main: %141*/
/*   %159 = icmp ult i32 %147, 4*/
begin
main_141_159 = (main_141_147 < 32'd4);
end
end
always @(posedge clk) begin
/* main: %141*/
/*   %159 = icmp ult i32 %147, 4*/
if ((cur_state == LEGUP_F_main_BB_141_45))
begin
main_141_159_reg <= main_141_159;
if (reset == 1'b0 && ^(main_141_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_159_reg"); $finish; end
end
end
always @(*) begin
/* main: %141*/
/*   %or.cond = and i1 %158, %159*/
begin
main_141_or_cond = (main_141_158 & main_141_159_reg);
end
end
always @(posedge clk) begin
/* main: %141*/
/*   %or.cond = and i1 %158, %159*/
if ((cur_state == LEGUP_F_main_BB_141_47))
begin
main_141_or_cond_reg <= main_141_or_cond;
if (reset == 1'b0 && ^(main_141_or_cond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_or_cond_reg"); $finish; end
end
end
always @(*) begin
/* main: %141*/
/*   %160 = icmp ult i32 %153, 4*/
begin
main_141_160 = (main_141_153 < 32'd4);
end
end
always @(posedge clk) begin
/* main: %141*/
/*   %160 = icmp ult i32 %153, 4*/
if ((cur_state == LEGUP_F_main_BB_141_45))
begin
main_141_160_reg <= main_141_160;
if (reset == 1'b0 && ^(main_141_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_160_reg"); $finish; end
end
end
always @(*) begin
/* main: %141*/
/*   %or.cond22 = and i1 %or.cond, %160*/
begin
main_141_or_cond22 = (main_141_or_cond & main_141_160_reg);
end
end
always @(posedge clk) begin
/* main: %141*/
/*   %or.cond22 = and i1 %or.cond, %160*/
if ((cur_state == LEGUP_F_main_BB_141_47))
begin
main_141_or_cond22_reg <= main_141_or_cond22;
if (reset == 1'b0 && ^(main_141_or_cond22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_or_cond22_reg"); $finish; end
end
end
always @(*) begin
/* main: %162*/
/*   %163 = icmp sgt i32 %155, 28*/
begin
main_162_163 = ($signed(main_141_155_reg) > $signed(32'd28));
end
end
always @(posedge clk) begin
/* main: %162*/
/*   %163 = icmp sgt i32 %155, 28*/
if ((cur_state == LEGUP_F_main_BB_162_50))
begin
main_162_163_reg <= main_162_163;
if (reset == 1'b0 && ^(main_162_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_163_reg"); $finish; end
end
end
always @(*) begin
/* main: %166*/
/*   %pos_a_Y.1 = phi i32 [ %153, %161 ], [ %pos_a_Y.0, %162 ]*/
if (((cur_state == LEGUP_F_main_BB_161_49) & (memory_controller_waitrequest == 1'd0)))
begin
main_166_pos_a_Y_1 = main_141_153_reg;
end
/* main: %166*/
/*   %pos_a_Y.1 = phi i32 [ %153, %161 ], [ %pos_a_Y.0, %162 ]*/
else /* if ((((cur_state == LEGUP_F_main_BB_162_50) & (memory_controller_waitrequest == 1'd0)) & (main_162_163 == 1'd0))) */
begin
main_166_pos_a_Y_1 = main__backedge_pos_a_Y_0_reg;
end
end
always @(posedge clk) begin
/* main: %166*/
/*   %pos_a_Y.1 = phi i32 [ %153, %161 ], [ %pos_a_Y.0, %162 ]*/
if (((cur_state == LEGUP_F_main_BB_161_49) & (memory_controller_waitrequest == 1'd0)))
begin
main_166_pos_a_Y_1_reg <= main_166_pos_a_Y_1;
if (reset == 1'b0 && ^(main_166_pos_a_Y_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_pos_a_Y_1_reg"); $finish; end
end
/* main: %166*/
/*   %pos_a_Y.1 = phi i32 [ %153, %161 ], [ %pos_a_Y.0, %162 ]*/
if ((((cur_state == LEGUP_F_main_BB_162_50) & (memory_controller_waitrequest == 1'd0)) & (main_162_163 == 1'd0)))
begin
main_166_pos_a_Y_1_reg <= main_166_pos_a_Y_1;
if (reset == 1'b0 && ^(main_166_pos_a_Y_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_pos_a_Y_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %166*/
/*   %pos_a_X.1 = phi i32 [ %147, %161 ], [ %pos_a_X.0, %162 ]*/
if (((cur_state == LEGUP_F_main_BB_161_49) & (memory_controller_waitrequest == 1'd0)))
begin
main_166_pos_a_X_1 = main_141_147_reg;
end
/* main: %166*/
/*   %pos_a_X.1 = phi i32 [ %147, %161 ], [ %pos_a_X.0, %162 ]*/
else /* if ((((cur_state == LEGUP_F_main_BB_162_50) & (memory_controller_waitrequest == 1'd0)) & (main_162_163 == 1'd0))) */
begin
main_166_pos_a_X_1 = main__backedge_pos_a_X_0_reg;
end
end
always @(posedge clk) begin
/* main: %166*/
/*   %pos_a_X.1 = phi i32 [ %147, %161 ], [ %pos_a_X.0, %162 ]*/
if (((cur_state == LEGUP_F_main_BB_161_49) & (memory_controller_waitrequest == 1'd0)))
begin
main_166_pos_a_X_1_reg <= main_166_pos_a_X_1;
if (reset == 1'b0 && ^(main_166_pos_a_X_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_pos_a_X_1_reg"); $finish; end
end
/* main: %166*/
/*   %pos_a_X.1 = phi i32 [ %147, %161 ], [ %pos_a_X.0, %162 ]*/
if ((((cur_state == LEGUP_F_main_BB_162_50) & (memory_controller_waitrequest == 1'd0)) & (main_162_163 == 1'd0)))
begin
main_166_pos_a_X_1_reg <= main_166_pos_a_X_1;
if (reset == 1'b0 && ^(main_166_pos_a_X_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_pos_a_X_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %166*/
/*   %167 = icmp eq i32 %pos_a_X.1, -1*/
begin
main_166_167 = (main_166_pos_a_X_1_reg == -32'd1);
end
end
always @(posedge clk) begin
/* main: %166*/
/*   %167 = icmp eq i32 %pos_a_X.1, -1*/
if ((cur_state == LEGUP_F_main_BB_166_52))
begin
main_166_167_reg <= main_166_167;
if (reset == 1'b0 && ^(main_166_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_167_reg"); $finish; end
end
end
always @(*) begin
/* main: %166*/
/*   %.23 = select i1 %167, i32 %155, i32 0*/
begin
main_166__23 = (main_166_167 ? main_141_155_reg : 32'd0);
end
end
always @(posedge clk) begin
/* main: %166*/
/*   %.23 = select i1 %167, i32 %155, i32 0*/
if ((cur_state == LEGUP_F_main_BB_166_52))
begin
main_166__23_reg <= main_166__23;
if (reset == 1'b0 && ^(main_166__23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166__23_reg"); $finish; end
end
end
always @(*) begin
/* main: %166*/
/*   %.24 = select i1 %167, i32 2, i32 3*/
begin
main_166__24 = (main_166_167 ? 32'd2 : 32'd3);
end
end
always @(posedge clk) begin
/* main: %166*/
/*   %.24 = select i1 %167, i32 2, i32 3*/
if ((cur_state == LEGUP_F_main_BB_166_52))
begin
main_166__24_reg <= main_166__24;
if (reset == 1'b0 && ^(main_166__24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166__24_reg"); $finish; end
end
end
always @(*) begin
/* main: %168*/
/*   %169 = icmp eq i32 %pos_b_X.0, -1*/
begin
main_168_169 = (main__backedge_pos_b_X_0_reg == -32'd1);
end
end
always @(posedge clk) begin
/* main: %168*/
/*   %169 = icmp eq i32 %pos_b_X.0, -1*/
if ((cur_state == LEGUP_F_main_BB_168_53))
begin
main_168_169_reg <= main_168_169;
if (reset == 1'b0 && ^(main_168_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_169_reg"); $finish; end
end
end
always @(*) begin
/* main: %170*/
/*   %171 = add nsw i32 %i.0, 1*/
begin
main_170_171 = (main__backedge_i_0_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %170*/
/*   %171 = add nsw i32 %i.0, 1*/
if ((cur_state == LEGUP_F_main_BB_170_54))
begin
main_170_171_reg <= main_170_171;
if (reset == 1'b0 && ^(main_170_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_170_171_reg"); $finish; end
end
end
always @(*) begin
/* main: %172*/
/*   %173 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 %j.0*/
begin
main_172_173 = (1'd0 + (4 * main__backedge_j_0_reg));
end
end
always @(posedge clk) begin
/* main: %172*/
/*   %173 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 %j.0*/
if ((cur_state == LEGUP_F_main_BB_172_55))
begin
main_172_173_reg <= main_172_173;
if (reset == 1'b0 && ^(main_172_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_172_173_reg"); $finish; end
end
end
always @(*) begin
/* main: %172*/
/*   %174 = load i32* %173, align 4, !tbaa !0*/
begin
main_172_174 = main_0_6_out_b;
end
end
always @(posedge clk) begin
/* main: %172*/
/*   %174 = load i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_172_56))
begin
main_172_174_reg <= main_172_174;
if (reset == 1'b0 && ^(main_172_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_172_174_reg"); $finish; end
end
end
always @(*) begin
/* main: %172*/
/*   %175 = add nsw i32 %174, %pos_a_X.0*/
begin
main_172_175 = (main_172_174 + main__backedge_pos_a_X_0_reg);
end
end
always @(posedge clk) begin
/* main: %172*/
/*   %175 = add nsw i32 %174, %pos_a_X.0*/
if ((cur_state == LEGUP_F_main_BB_172_56))
begin
main_172_175_reg <= main_172_175;
if (reset == 1'b0 && ^(main_172_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_172_175_reg"); $finish; end
end
end
always @(*) begin
/* main: %172*/
/*   %176 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 %j.0*/
begin
main_172_176 = (1'd0 + (4 * main__backedge_j_0_reg));
end
end
always @(posedge clk) begin
/* main: %172*/
/*   %176 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 %j.0*/
if ((cur_state == LEGUP_F_main_BB_172_55))
begin
main_172_176_reg <= main_172_176;
if (reset == 1'b0 && ^(main_172_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_172_176_reg"); $finish; end
end
end
always @(*) begin
/* main: %172*/
/*   %177 = load i32* %176, align 4, !tbaa !0*/
begin
main_172_177 = main_0_7_out_b;
end
end
always @(posedge clk) begin
/* main: %172*/
/*   %177 = load i32* %176, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_172_56))
begin
main_172_177_reg <= main_172_177;
if (reset == 1'b0 && ^(main_172_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_172_177_reg"); $finish; end
end
end
always @(*) begin
/* main: %172*/
/*   %178 = add nsw i32 %177, %pos_a_Y.0*/
begin
main_172_178 = (main_172_177 + main__backedge_pos_a_Y_0_reg);
end
end
always @(posedge clk) begin
/* main: %172*/
/*   %178 = add nsw i32 %177, %pos_a_Y.0*/
if ((cur_state == LEGUP_F_main_BB_172_56))
begin
main_172_178_reg <= main_172_178;
if (reset == 1'b0 && ^(main_172_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_172_178_reg"); $finish; end
end
end
always @(*) begin
/* main: %172*/
/*   %179 = add nsw i32 %j.0, 1*/
begin
main_172_179 = (main__backedge_j_0_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %172*/
/*   %179 = add nsw i32 %j.0, 1*/
if ((cur_state == LEGUP_F_main_BB_172_55))
begin
main_172_179_reg <= main_172_179;
if (reset == 1'b0 && ^(main_172_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_172_179_reg"); $finish; end
end
end
always @(*) begin
/* main: %172*/
/*   %idxscale15 = shl i32 %175, 2*/
begin
main_172_idxscale15 = (main_172_175 <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* main: %172*/
/*   %idxscale15 = shl i32 %175, 2*/
if ((cur_state == LEGUP_F_main_BB_172_56))
begin
main_172_idxscale15_reg <= main_172_idxscale15;
if (reset == 1'b0 && ^(main_172_idxscale15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_172_idxscale15_reg"); $finish; end
end
end
always @(*) begin
/* main: %172*/
/*   %.sum16 = add i32 %idxscale15, %178*/
begin
main_172__sum16 = (main_172_idxscale15 + main_172_178);
end
end
always @(posedge clk) begin
/* main: %172*/
/*   %.sum16 = add i32 %idxscale15, %178*/
if ((cur_state == LEGUP_F_main_BB_172_56))
begin
main_172__sum16_reg <= main_172__sum16;
if (reset == 1'b0 && ^(main_172__sum16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_172__sum16_reg"); $finish; end
end
end
always @(*) begin
/* main: %172*/
/*   %180 = getelementptr inbounds [16 x i32]* %5, i32 0, i32 %.sum16*/
begin
main_172_180 = (1'd0 + (4 * main_172__sum16_reg));
end
end
always @(posedge clk) begin
/* main: %172*/
/*   %180 = getelementptr inbounds [16 x i32]* %5, i32 0, i32 %.sum16*/
if ((cur_state == LEGUP_F_main_BB_172_57))
begin
main_172_180_reg <= main_172_180;
if (reset == 1'b0 && ^(main_172_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_172_180_reg"); $finish; end
end
end
always @(*) begin
/* main: %172*/
/*   %181 = load i32* %180, align 4, !tbaa !0*/
begin
main_172_181 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %172*/
/*   %181 = load i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_172_58))
begin
main_172_181_reg <= main_172_181;
if (reset == 1'b0 && ^(main_172_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_172_181_reg"); $finish; end
end
end
always @(*) begin
/* main: %172*/
/*   %182 = icmp eq i32 %181, -1*/
begin
main_172_182 = (main_172_181 == -32'd1);
end
end
always @(posedge clk) begin
/* main: %172*/
/*   %182 = icmp eq i32 %181, -1*/
if ((cur_state == LEGUP_F_main_BB_172_58))
begin
main_172_182_reg <= main_172_182;
if (reset == 1'b0 && ^(main_172_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_172_182_reg"); $finish; end
end
end
always @(*) begin
/* main: %172*/
/*   %183 = icmp ult i32 %175, 4*/
begin
main_172_183 = (main_172_175 < 32'd4);
end
end
always @(posedge clk) begin
/* main: %172*/
/*   %183 = icmp ult i32 %175, 4*/
if ((cur_state == LEGUP_F_main_BB_172_56))
begin
main_172_183_reg <= main_172_183;
if (reset == 1'b0 && ^(main_172_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_172_183_reg"); $finish; end
end
end
always @(*) begin
/* main: %172*/
/*   %or.cond25 = and i1 %182, %183*/
begin
main_172_or_cond25 = (main_172_182 & main_172_183_reg);
end
end
always @(posedge clk) begin
/* main: %172*/
/*   %or.cond25 = and i1 %182, %183*/
if ((cur_state == LEGUP_F_main_BB_172_58))
begin
main_172_or_cond25_reg <= main_172_or_cond25;
if (reset == 1'b0 && ^(main_172_or_cond25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_172_or_cond25_reg"); $finish; end
end
end
always @(*) begin
/* main: %172*/
/*   %184 = icmp ult i32 %178, 4*/
begin
main_172_184 = (main_172_178 < 32'd4);
end
end
always @(posedge clk) begin
/* main: %172*/
/*   %184 = icmp ult i32 %178, 4*/
if ((cur_state == LEGUP_F_main_BB_172_56))
begin
main_172_184_reg <= main_172_184;
if (reset == 1'b0 && ^(main_172_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_172_184_reg"); $finish; end
end
end
always @(*) begin
/* main: %172*/
/*   %or.cond26 = and i1 %or.cond25, %184*/
begin
main_172_or_cond26 = (main_172_or_cond25 & main_172_184_reg);
end
end
always @(posedge clk) begin
/* main: %172*/
/*   %or.cond26 = and i1 %or.cond25, %184*/
if ((cur_state == LEGUP_F_main_BB_172_58))
begin
main_172_or_cond26_reg <= main_172_or_cond26;
if (reset == 1'b0 && ^(main_172_or_cond26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_172_or_cond26_reg"); $finish; end
end
end
always @(*) begin
/* main: %185*/
/*   %186 = getelementptr inbounds [11 x i32]* %3, i32 0, i32 %b.0*/
begin
main_185_186 = (1'd0 + (4 * main__backedge_b_0_reg));
end
end
always @(posedge clk) begin
/* main: %185*/
/*   %186 = getelementptr inbounds [11 x i32]* %3, i32 0, i32 %b.0*/
if ((cur_state == LEGUP_F_main_BB_185_59))
begin
main_185_186_reg <= main_185_186;
if (reset == 1'b0 && ^(main_185_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_186_reg"); $finish; end
end
end
always @(*) begin
/* main: %185*/
/*   %187 = getelementptr inbounds [11 x i32]* %4, i32 0, i32 %b.0*/
begin
main_185_187 = (1'd0 + (4 * main__backedge_b_0_reg));
end
end
always @(posedge clk) begin
/* main: %185*/
/*   %187 = getelementptr inbounds [11 x i32]* %4, i32 0, i32 %b.0*/
if ((cur_state == LEGUP_F_main_BB_185_59))
begin
main_185_187_reg <= main_185_187;
if (reset == 1'b0 && ^(main_185_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_187_reg"); $finish; end
end
end
always @(*) begin
/* main: %185*/
/*   %188 = add nsw i32 %i.0, 1*/
begin
main_185_188 = (main__backedge_i_0_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %185*/
/*   %188 = add nsw i32 %i.0, 1*/
if ((cur_state == LEGUP_F_main_BB_185_59))
begin
main_185_188_reg <= main_185_188;
if (reset == 1'b0 && ^(main_185_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_188_reg"); $finish; end
end
end
always @(*) begin
/* main: %189*/
/*   %190 = icmp sgt i32 %179, 28*/
begin
main_189_190 = ($signed(main_172_179_reg) > $signed(32'd28));
end
end
always @(posedge clk) begin
/* main: %189*/
/*   %190 = icmp sgt i32 %179, 28*/
if ((cur_state == LEGUP_F_main_BB_189_61))
begin
main_189_190_reg <= main_189_190;
if (reset == 1'b0 && ^(main_189_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_190_reg"); $finish; end
end
end
always @(*) begin
/* main: %193*/
/*   %194 = zext i1 %169 to i32*/
begin
main_193_194 = main_168_169_reg;
end
end
always @(posedge clk) begin
/* main: %193*/
/*   %194 = zext i1 %169 to i32*/
if ((cur_state == LEGUP_F_main_BB_193_63))
begin
main_193_194_reg <= main_193_194;
if (reset == 1'b0 && ^(main_193_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_193_194_reg"); $finish; end
end
end
always @(*) begin
/* main: %193*/
/*   %195 = xor i32 %194, 1*/
begin
main_193_195 = (main_193_194 ^ 32'd1);
end
end
always @(posedge clk) begin
/* main: %193*/
/*   %195 = xor i32 %194, 1*/
if ((cur_state == LEGUP_F_main_BB_193_63))
begin
main_193_195_reg <= main_193_195;
if (reset == 1'b0 && ^(main_193_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_193_195_reg"); $finish; end
end
end
always @(*) begin
/* main: %193*/
/*   %i.0. = add i32 %i.0, %195*/
begin
main_193_i_0_ = (main__backedge_i_0_reg + main_193_195);
end
end
always @(posedge clk) begin
/* main: %193*/
/*   %i.0. = add i32 %i.0, %195*/
if ((cur_state == LEGUP_F_main_BB_193_63))
begin
main_193_i_0__reg <= main_193_i_0_;
if (reset == 1'b0 && ^(main_193_i_0_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_193_i_0__reg"); $finish; end
end
end
always @(*) begin
/* main: %197*/
/*   %198 = icmp eq i32 %i.0, 11*/
begin
main_197_198 = (main__backedge_i_0_reg == 32'd11);
end
end
always @(posedge clk) begin
/* main: %197*/
/*   %198 = icmp eq i32 %i.0, 11*/
if ((cur_state == LEGUP_F_main_BB_197_65))
begin
main_197_198_reg <= main_197_198;
if (reset == 1'b0 && ^(main_197_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_198_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %200 = getelementptr inbounds [11 x i32]* %1, i32 0, i32 %i.0*/
begin
main_199_200 = (1'd0 + (4 * main__backedge_i_0_reg));
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %200 = getelementptr inbounds [11 x i32]* %1, i32 0, i32 %i.0*/
if ((cur_state == LEGUP_F_main_BB_199_66))
begin
main_199_200_reg <= main_199_200;
if (reset == 1'b0 && ^(main_199_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_200_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %201 = load i32* %200, align 4, !tbaa !0*/
begin
main_199_201 = main_0_1_out_a;
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %201 = load i32* %200, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_199_67))
begin
main_199_201_reg <= main_199_201;
if (reset == 1'b0 && ^(main_199_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_201_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %202 = getelementptr inbounds [11 x i32]* %2, i32 0, i32 %i.0*/
begin
main_199_202 = (1'd0 + (4 * main__backedge_i_0_reg));
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %202 = getelementptr inbounds [11 x i32]* %2, i32 0, i32 %i.0*/
if ((cur_state == LEGUP_F_main_BB_199_66))
begin
main_199_202_reg <= main_199_202;
if (reset == 1'b0 && ^(main_199_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_202_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %203 = load i32* %202, align 4, !tbaa !0*/
begin
main_199_203 = main_0_2_out_a;
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %203 = load i32* %202, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_199_67))
begin
main_199_203_reg <= main_199_203;
if (reset == 1'b0 && ^(main_199_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_203_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %204 = getelementptr inbounds [11 x i32]* %3, i32 0, i32 %201*/
begin
main_199_204 = (1'd0 + (4 * main_199_201));
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %204 = getelementptr inbounds [11 x i32]* %3, i32 0, i32 %201*/
if ((cur_state == LEGUP_F_main_BB_199_67))
begin
main_199_204_reg <= main_199_204;
if (reset == 1'b0 && ^(main_199_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_204_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %205 = load i32* %204, align 4, !tbaa !0*/
begin
main_199_205 = main_0_3_out_a;
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %205 = load i32* %204, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_199_68))
begin
main_199_205_reg <= main_199_205;
if (reset == 1'b0 && ^(main_199_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_205_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %206 = getelementptr inbounds [11 x i32]* %3, i32 0, i32 %203*/
begin
main_199_206 = (1'd0 + (4 * main_199_203));
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %206 = getelementptr inbounds [11 x i32]* %3, i32 0, i32 %203*/
if ((cur_state == LEGUP_F_main_BB_199_67))
begin
main_199_206_reg <= main_199_206;
if (reset == 1'b0 && ^(main_199_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_206_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %207 = load i32* %206, align 4, !tbaa !0*/
begin
main_199_207 = main_0_3_out_b;
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %207 = load i32* %206, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_199_68))
begin
main_199_207_reg <= main_199_207;
if (reset == 1'b0 && ^(main_199_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_207_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %208 = sub nsw i32 %205, %207*/
begin
main_199_208 = (main_199_205 - main_199_207);
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %208 = sub nsw i32 %205, %207*/
if ((cur_state == LEGUP_F_main_BB_199_68))
begin
main_199_208_reg <= main_199_208;
if (reset == 1'b0 && ^(main_199_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_208_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %209 = sub i32 0, %208*/
begin
main_199_209 = (32'd0 - main_199_208);
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %209 = sub i32 0, %208*/
if ((cur_state == LEGUP_F_main_BB_199_68))
begin
main_199_209_reg <= main_199_209;
if (reset == 1'b0 && ^(main_199_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_209_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %210 = icmp slt i32 %208, 0*/
begin
main_199_210 = ($signed(main_199_208) < $signed(32'd0));
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %210 = icmp slt i32 %208, 0*/
if ((cur_state == LEGUP_F_main_BB_199_68))
begin
main_199_210_reg <= main_199_210;
if (reset == 1'b0 && ^(main_199_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_210_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %.27 = select i1 %210, i32 %209, i32 %208*/
begin
main_199__27 = (main_199_210 ? main_199_209 : main_199_208);
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %.27 = select i1 %210, i32 %209, i32 %208*/
if ((cur_state == LEGUP_F_main_BB_199_68))
begin
main_199__27_reg <= main_199__27;
if (reset == 1'b0 && ^(main_199__27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199__27_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %211 = getelementptr inbounds [11 x i32]* %4, i32 0, i32 %201*/
begin
main_199_211 = (1'd0 + (4 * main_199_201));
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %211 = getelementptr inbounds [11 x i32]* %4, i32 0, i32 %201*/
if ((cur_state == LEGUP_F_main_BB_199_67))
begin
main_199_211_reg <= main_199_211;
if (reset == 1'b0 && ^(main_199_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_211_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %212 = load i32* %211, align 4, !tbaa !0*/
begin
main_199_212 = main_0_4_out_a;
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %212 = load i32* %211, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_199_68))
begin
main_199_212_reg <= main_199_212;
if (reset == 1'b0 && ^(main_199_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_212_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %213 = getelementptr inbounds [11 x i32]* %4, i32 0, i32 %203*/
begin
main_199_213 = (1'd0 + (4 * main_199_203));
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %213 = getelementptr inbounds [11 x i32]* %4, i32 0, i32 %203*/
if ((cur_state == LEGUP_F_main_BB_199_67))
begin
main_199_213_reg <= main_199_213;
if (reset == 1'b0 && ^(main_199_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_213_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %214 = load i32* %213, align 4, !tbaa !0*/
begin
main_199_214 = main_0_4_out_b;
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %214 = load i32* %213, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_199_68))
begin
main_199_214_reg <= main_199_214;
if (reset == 1'b0 && ^(main_199_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_214_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %215 = sub nsw i32 %212, %214*/
begin
main_199_215 = (main_199_212 - main_199_214);
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %215 = sub nsw i32 %212, %214*/
if ((cur_state == LEGUP_F_main_BB_199_68))
begin
main_199_215_reg <= main_199_215;
if (reset == 1'b0 && ^(main_199_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_215_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %216 = icmp slt i32 %215, 0*/
begin
main_199_216 = ($signed(main_199_215) < $signed(32'd0));
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %216 = icmp slt i32 %215, 0*/
if ((cur_state == LEGUP_F_main_BB_199_68))
begin
main_199_216_reg <= main_199_216;
if (reset == 1'b0 && ^(main_199_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_216_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %217 = sub i32 0, %215*/
begin
main_199_217 = (32'd0 - main_199_215);
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %217 = sub i32 0, %215*/
if ((cur_state == LEGUP_F_main_BB_199_68))
begin
main_199_217_reg <= main_199_217;
if (reset == 1'b0 && ^(main_199_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_217_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %diff_pos_y.0 = select i1 %216, i32 %217, i32 %215*/
begin
main_199_diff_pos_y_0 = (main_199_216 ? main_199_217 : main_199_215);
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %diff_pos_y.0 = select i1 %216, i32 %217, i32 %215*/
if ((cur_state == LEGUP_F_main_BB_199_68))
begin
main_199_diff_pos_y_0_reg <= main_199_diff_pos_y_0;
if (reset == 1'b0 && ^(main_199_diff_pos_y_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_diff_pos_y_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %218 = add i32 %sum.0, -1*/
begin
main_199_218 = (main__backedge_sum_0_reg + -32'd1);
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %218 = add i32 %sum.0, -1*/
if ((cur_state == LEGUP_F_main_BB_199_66))
begin
main_199_218_reg <= main_199_218;
if (reset == 1'b0 && ^(main_199_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_218_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %219 = add i32 %218, %.27*/
begin
main_199_219 = (main_199_218_reg + main_199__27_reg);
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %219 = add i32 %218, %.27*/
if ((cur_state == LEGUP_F_main_BB_199_69))
begin
main_199_219_reg <= main_199_219;
if (reset == 1'b0 && ^(main_199_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_219_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %220 = add i32 %219, %diff_pos_y.0*/
begin
main_199_220 = (main_199_219 + main_199_diff_pos_y_0_reg);
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %220 = add i32 %219, %diff_pos_y.0*/
if ((cur_state == LEGUP_F_main_BB_199_69))
begin
main_199_220_reg <= main_199_220;
if (reset == 1'b0 && ^(main_199_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_220_reg"); $finish; end
end
end
always @(*) begin
main_199_221 = main_signed_divide_32_0;
end
always @(posedge clk) begin
/* main: %199*/
/*   %221 = sdiv i32 %.27, 2*/
if ((cur_state == LEGUP_F_main_BB_199_100))
begin
main_199_221_reg <= main_199_221;
if (reset == 1'b0 && ^(main_199_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_221_reg"); $finish; end
end
/* main: %199*/
/*   %221 = sdiv i32 %.27, 2*/
if ((cur_state == LEGUP_F_main_BB_199_100))
begin
main_199_221_reg <= main_199_221;
if (reset == 1'b0 && ^(main_199_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_221_reg"); $finish; end
end
/* main: %199*/
/*   %223 = sdiv i32 %diff_pos_y.0, 2*/
if ((cur_state == LEGUP_F_main_BB_199_101))
begin
main_199_221_reg <= main_199_223;
if (reset == 1'b0 && ^(main_199_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_221_reg"); $finish; end
end
end
always @(*) begin
main_199_222 = main_signed_modulus_32_0;
end
always @(posedge clk) begin
/* main: %199*/
/*   %222 = srem i32 %.27, 2*/
if ((cur_state == LEGUP_F_main_BB_199_100))
begin
main_199_222_reg <= main_199_222;
if (reset == 1'b0 && ^(main_199_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_222_reg"); $finish; end
end
/* main: %199*/
/*   %222 = srem i32 %.27, 2*/
if ((cur_state == LEGUP_F_main_BB_199_100))
begin
main_199_222_reg <= main_199_222;
if (reset == 1'b0 && ^(main_199_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_222_reg"); $finish; end
end
end
always @(*) begin
main_199_223 = main_signed_divide_32_0;
end
always @(*) begin
/* main: %199*/
/*   %223 = sdiv i32 %diff_pos_y.0, 2*/
main_199_223_reg = main_199_221_reg;
end
always @(*) begin
main_199_224 = main_signed_modulus_32_1;
end
always @(posedge clk) begin
/* main: %199*/
/*   %224 = srem i32 %diff_pos_y.0, 2*/
if ((cur_state == LEGUP_F_main_BB_199_100))
begin
main_199_224_reg <= main_199_224;
if (reset == 1'b0 && ^(main_199_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_224_reg"); $finish; end
end
/* main: %199*/
/*   %224 = srem i32 %diff_pos_y.0, 2*/
if ((cur_state == LEGUP_F_main_BB_199_100))
begin
main_199_224_reg <= main_199_224;
if (reset == 1'b0 && ^(main_199_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_224_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %225 = add i32 %sum_1hop.0, -1*/
begin
main_199_225 = (main__backedge_sum_1hop_0_reg + -32'd1);
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %225 = add i32 %sum_1hop.0, -1*/
if ((cur_state == LEGUP_F_main_BB_199_66))
begin
main_199_225_reg <= main_199_225;
if (reset == 1'b0 && ^(main_199_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_225_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %226 = add i32 %225, %221*/
begin
main_199_226 = (main_199_225_reg + main_199_221);
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %226 = add i32 %225, %221*/
if ((cur_state == LEGUP_F_main_BB_199_100))
begin
main_199_226_reg <= main_199_226;
if (reset == 1'b0 && ^(main_199_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_226_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %227 = add i32 %226, %222*/
begin
main_199_227 = (main_199_226 + main_199_222);
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %227 = add i32 %226, %222*/
if ((cur_state == LEGUP_F_main_BB_199_100))
begin
main_199_227_reg <= main_199_227;
if (reset == 1'b0 && ^(main_199_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_227_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %228 = add i32 %227, %223*/
begin
main_199_228 = (main_199_227_reg + main_199_223);
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %228 = add i32 %227, %223*/
if ((cur_state == LEGUP_F_main_BB_199_101))
begin
main_199_228_reg <= main_199_228;
if (reset == 1'b0 && ^(main_199_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_228_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %229 = add i32 %228, %224*/
begin
main_199_229 = (main_199_228 + main_199_224_reg);
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %229 = add i32 %228, %224*/
if ((cur_state == LEGUP_F_main_BB_199_101))
begin
main_199_229_reg <= main_199_229;
if (reset == 1'b0 && ^(main_199_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_229_reg"); $finish; end
end
end
always @(*) begin
/* main: %199*/
/*   %230 = add nsw i32 %i.0, 1*/
begin
main_199_230 = (main__backedge_i_0_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %199*/
/*   %230 = add nsw i32 %i.0, 1*/
if ((cur_state == LEGUP_F_main_BB_199_66))
begin
main_199_230_reg <= main_199_230;
if (reset == 1'b0 && ^(main_199_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_230_reg"); $finish; end
end
end
always @(*) begin
/* main: %231*/
/*   %.0 = phi i32 [ 0, %191 ], [ 0, %164 ], [ 1, %.preheader29 ]*/
if (((cur_state == LEGUP_F_main_BB__preheader29_12) & (memory_controller_waitrequest == 1'd0)))
begin
main_231__0 = 32'd1;
end
/* main: %231*/
/*   %.0 = phi i32 [ 0, %191 ], [ 0, %164 ], [ 1, %.preheader29 ]*/
else if (((cur_state == LEGUP_F_main_BB_164_51) & (memory_controller_waitrequest == 1'd0)))
begin
main_231__0 = 32'd0;
end
/* main: %231*/
/*   %.0 = phi i32 [ 0, %191 ], [ 0, %164 ], [ 1, %.preheader29 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_191_62) & (memory_controller_waitrequest == 1'd0))) */
begin
main_231__0 = 32'd0;
end
end
always @(posedge clk) begin
/* main: %231*/
/*   %.0 = phi i32 [ 0, %191 ], [ 0, %164 ], [ 1, %.preheader29 ]*/
if (((cur_state == LEGUP_F_main_BB__preheader29_12) & (memory_controller_waitrequest == 1'd0)))
begin
main_231__0_reg <= main_231__0;
if (reset == 1'b0 && ^(main_231__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231__0_reg"); $finish; end
end
/* main: %231*/
/*   %.0 = phi i32 [ 0, %191 ], [ 0, %164 ], [ 1, %.preheader29 ]*/
if (((cur_state == LEGUP_F_main_BB_164_51) & (memory_controller_waitrequest == 1'd0)))
begin
main_231__0_reg <= main_231__0;
if (reset == 1'b0 && ^(main_231__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231__0_reg"); $finish; end
end
/* main: %231*/
/*   %.0 = phi i32 [ 0, %191 ], [ 0, %164 ], [ 1, %.preheader29 ]*/
if (((cur_state == LEGUP_F_main_BB_191_62) & (memory_controller_waitrequest == 1'd0)))
begin
main_231__0_reg <= main_231__0;
if (reset == 1'b0 && ^(main_231__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231__0_reg"); $finish; end
end
end
always @(*) begin
main_0_1_address_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 0, i32* %.sub8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_1_address_a = (main_0__sub8_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 2, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_1_address_a = (main_0_10_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 4, i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_1_address_a = (main_0_14_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 5, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_1_address_a = (main_0_18_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 7, i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_1_address_a = (main_0_22_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 9, i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_1_address_a = (main_0_26_reg >>> 3'd2);
end
/* main: %199*/
/*   %201 = load i32* %200, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_199_66))
begin
main_0_1_address_a = (main_199_200 >>> 3'd2);
end
end
always @(*) begin
main_0_1_write_enable_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 0, i32* %.sub8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 4, i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 5, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 7, i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 9, i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %199*/
/*   %201 = load i32* %200, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_199_66))
begin
main_0_1_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_1_in_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 0, i32* %.sub8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_1_in_a = 32'd0;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_1_in_a = 32'd2;
end
/* main: %.preheader31*/
/*   store i32 4, i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_1_in_a = 32'd4;
end
/* main: %.preheader31*/
/*   store i32 5, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_1_in_a = 32'd5;
end
/* main: %.preheader31*/
/*   store i32 7, i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_1_in_a = 32'd7;
end
/* main: %.preheader31*/
/*   store i32 9, i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_1_in_a = 32'd9;
end
end
always @(*) begin
main_0_1_address_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 1, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_1_address_b = (main_0_8_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 3, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_1_address_b = (main_0_12_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 5, i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_1_address_b = (main_0_16_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 6, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_1_address_b = (main_0_20_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 8, i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_1_address_b = (main_0_24_reg >>> 3'd2);
end
/* main: %127*/
/*   %129 = load i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_127_39))
begin
main_0_1_address_b = (main_127_128 >>> 3'd2);
end
end
always @(*) begin
main_0_1_write_enable_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 1, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 3, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 5, i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 6, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 8, i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %127*/
/*   %129 = load i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_127_39))
begin
main_0_1_write_enable_b = 1'd0;
end
end
always @(*) begin
main_0_1_in_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 1, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_1_in_b = 32'd1;
end
/* main: %.preheader31*/
/*   store i32 3, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_1_in_b = 32'd3;
end
/* main: %.preheader31*/
/*   store i32 5, i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_1_in_b = 32'd5;
end
/* main: %.preheader31*/
/*   store i32 6, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_1_in_b = 32'd6;
end
/* main: %.preheader31*/
/*   store i32 8, i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_1_in_b = 32'd8;
end
end
always @(*) begin
main_0_2_address_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 3, i32* %.sub9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_2_address_a = (main_0__sub9_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 5, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_2_address_a = (main_0_11_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 7, i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_2_address_a = (main_0_15_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 4, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_2_address_a = (main_0_19_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 8, i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_2_address_a = (main_0_23_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 10, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_2_address_a = (main_0_27_reg >>> 3'd2);
end
/* main: %199*/
/*   %203 = load i32* %202, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_199_66))
begin
main_0_2_address_a = (main_199_202 >>> 3'd2);
end
end
always @(*) begin
main_0_2_write_enable_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 3, i32* %.sub9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 5, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 7, i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 4, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 8, i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 10, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %199*/
/*   %203 = load i32* %202, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_199_66))
begin
main_0_2_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_2_in_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 3, i32* %.sub9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_2_in_a = 32'd3;
end
/* main: %.preheader31*/
/*   store i32 5, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_2_in_a = 32'd5;
end
/* main: %.preheader31*/
/*   store i32 7, i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_2_in_a = 32'd7;
end
/* main: %.preheader31*/
/*   store i32 4, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_2_in_a = 32'd4;
end
/* main: %.preheader31*/
/*   store i32 8, i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_2_in_a = 32'd8;
end
/* main: %.preheader31*/
/*   store i32 10, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_2_in_a = 32'd10;
end
end
always @(*) begin
main_0_2_address_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 4, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_2_address_b = (main_0_9_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 6, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_2_address_b = (main_0_13_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 3, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_2_address_b = (main_0_17_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 8, i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_2_address_b = (main_0_21_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 9, i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_2_address_b = (main_0_25_reg >>> 3'd2);
end
/* main: %127*/
/*   %131 = load i32* %130, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_127_39))
begin
main_0_2_address_b = (main_127_130 >>> 3'd2);
end
end
always @(*) begin
main_0_2_write_enable_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 4, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 6, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 3, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 8, i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 9, i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %127*/
/*   %131 = load i32* %130, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_127_39))
begin
main_0_2_write_enable_b = 1'd0;
end
end
always @(*) begin
main_0_2_in_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 4, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_2_in_b = 32'd4;
end
/* main: %.preheader31*/
/*   store i32 6, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_2_in_b = 32'd6;
end
/* main: %.preheader31*/
/*   store i32 3, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_2_in_b = 32'd3;
end
/* main: %.preheader31*/
/*   store i32 8, i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_2_in_b = 32'd8;
end
/* main: %.preheader31*/
/*   store i32 9, i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_2_in_b = 32'd9;
end
end
always @(*) begin
main_0_3_address_a = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_3_address_a = (main_0_scevgep64_1_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32))
begin
main_0_3_address_a = (main_0_scevgep64_3_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33))
begin
main_0_3_address_a = (main_0_scevgep64_5_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34))
begin
main_0_3_address_a = (main_0_scevgep64_7_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35))
begin
main_0_3_address_a = (main_0_scevgep64_9_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 0, i32* %scevgep64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_36))
begin
main_0_3_address_a = (main_0_scevgep64_reg >>> 3'd2);
end
/* main: %127*/
/*   %133 = load i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_127_40))
begin
main_0_3_address_a = (main_127_132 >>> 3'd2);
end
/* main: %141*/
/*   store i32 %147, i32* %148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_141_45))
begin
main_0_3_address_a = (main_141_148_reg >>> 3'd2);
end
/* main: %199*/
/*   %205 = load i32* %204, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_199_67))
begin
main_0_3_address_a = (main_199_204 >>> 3'd2);
end
end
always @(*) begin
main_0_3_write_enable_a = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_3_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32))
begin
main_0_3_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33))
begin
main_0_3_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34))
begin
main_0_3_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35))
begin
main_0_3_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 0, i32* %scevgep64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_36))
begin
main_0_3_write_enable_a = 1'd1;
end
/* main: %127*/
/*   %133 = load i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_127_40))
begin
main_0_3_write_enable_a = 1'd0;
end
/* main: %141*/
/*   store i32 %147, i32* %148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_141_45))
begin
main_0_3_write_enable_a = 1'd1;
end
/* main: %199*/
/*   %205 = load i32* %204, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_199_67))
begin
main_0_3_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_3_in_a = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_3_in_a = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32))
begin
main_0_3_in_a = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33))
begin
main_0_3_in_a = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34))
begin
main_0_3_in_a = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35))
begin
main_0_3_in_a = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 0, i32* %scevgep64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_36))
begin
main_0_3_in_a = 32'd0;
end
/* main: %141*/
/*   store i32 %147, i32* %148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_141_45))
begin
main_0_3_in_a = main_141_147;
end
end
always @(*) begin
main_0_3_address_b = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_3_address_b = (main_0_scevgep64_2_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32))
begin
main_0_3_address_b = (main_0_scevgep64_4_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33))
begin
main_0_3_address_b = (main_0_scevgep64_6_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34))
begin
main_0_3_address_b = (main_0_scevgep64_8_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35))
begin
main_0_3_address_b = (main_0_scevgep64_10_reg >>> 3'd2);
end
/* main: %127*/
/*   %137 = load i32* %136, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_127_40))
begin
main_0_3_address_b = (main_127_136 >>> 3'd2);
end
/* main: %141*/
/*   %144 = load i32* %143, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_141_44))
begin
main_0_3_address_b = (main_141_143 >>> 3'd2);
end
/* main: %185*/
/*   store i32 %175, i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_185_59))
begin
main_0_3_address_b = (main_185_186 >>> 3'd2);
end
/* main: %199*/
/*   %207 = load i32* %206, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_199_67))
begin
main_0_3_address_b = (main_199_206 >>> 3'd2);
end
end
always @(*) begin
main_0_3_write_enable_b = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_3_write_enable_b = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32))
begin
main_0_3_write_enable_b = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33))
begin
main_0_3_write_enable_b = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34))
begin
main_0_3_write_enable_b = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35))
begin
main_0_3_write_enable_b = 1'd1;
end
/* main: %127*/
/*   %137 = load i32* %136, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_127_40))
begin
main_0_3_write_enable_b = 1'd0;
end
/* main: %141*/
/*   %144 = load i32* %143, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_141_44))
begin
main_0_3_write_enable_b = 1'd0;
end
/* main: %185*/
/*   store i32 %175, i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_185_59))
begin
main_0_3_write_enable_b = 1'd1;
end
/* main: %199*/
/*   %207 = load i32* %206, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_199_67))
begin
main_0_3_write_enable_b = 1'd0;
end
end
always @(*) begin
main_0_3_in_b = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_3_in_b = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32))
begin
main_0_3_in_b = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33))
begin
main_0_3_in_b = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34))
begin
main_0_3_in_b = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep64.10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35))
begin
main_0_3_in_b = -32'd1;
end
/* main: %185*/
/*   store i32 %175, i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_185_59))
begin
main_0_3_in_b = main_172_175_reg;
end
end
always @(*) begin
main_0_4_address_a = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_4_address_a = (main_0_scevgep65_1_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32))
begin
main_0_4_address_a = (main_0_scevgep65_3_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33))
begin
main_0_4_address_a = (main_0_scevgep65_5_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34))
begin
main_0_4_address_a = (main_0_scevgep65_7_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35))
begin
main_0_4_address_a = (main_0_scevgep65_9_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 0, i32* %scevgep65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_36))
begin
main_0_4_address_a = (main_0_scevgep65_reg >>> 3'd2);
end
/* main: %141*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_141_44))
begin
main_0_4_address_a = (main_141_149 >>> 3'd2);
end
/* main: %185*/
/*   store i32 %178, i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_185_59))
begin
main_0_4_address_a = (main_185_187 >>> 3'd2);
end
/* main: %199*/
/*   %212 = load i32* %211, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_199_67))
begin
main_0_4_address_a = (main_199_211 >>> 3'd2);
end
end
always @(*) begin
main_0_4_write_enable_a = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_4_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32))
begin
main_0_4_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33))
begin
main_0_4_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34))
begin
main_0_4_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35))
begin
main_0_4_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 0, i32* %scevgep65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_36))
begin
main_0_4_write_enable_a = 1'd1;
end
/* main: %141*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_141_44))
begin
main_0_4_write_enable_a = 1'd0;
end
/* main: %185*/
/*   store i32 %178, i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_185_59))
begin
main_0_4_write_enable_a = 1'd1;
end
/* main: %199*/
/*   %212 = load i32* %211, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_199_67))
begin
main_0_4_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_4_in_a = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_4_in_a = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32))
begin
main_0_4_in_a = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33))
begin
main_0_4_in_a = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34))
begin
main_0_4_in_a = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35))
begin
main_0_4_in_a = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 0, i32* %scevgep65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_36))
begin
main_0_4_in_a = 32'd0;
end
/* main: %185*/
/*   store i32 %178, i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_185_59))
begin
main_0_4_in_a = main_172_178_reg;
end
end
always @(*) begin
main_0_4_address_b = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_4_address_b = (main_0_scevgep65_2_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32))
begin
main_0_4_address_b = (main_0_scevgep65_4_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33))
begin
main_0_4_address_b = (main_0_scevgep65_6_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34))
begin
main_0_4_address_b = (main_0_scevgep65_8_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35))
begin
main_0_4_address_b = (main_0_scevgep65_10_reg >>> 3'd2);
end
/* main: %127*/
/*   %135 = load i32* %134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_127_40))
begin
main_0_4_address_b = (main_127_134 >>> 3'd2);
end
/* main: %141*/
/*   store i32 %153, i32* %154, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_141_45))
begin
main_0_4_address_b = (main_141_154_reg >>> 3'd2);
end
/* main: %199*/
/*   %214 = load i32* %213, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_199_67))
begin
main_0_4_address_b = (main_199_213 >>> 3'd2);
end
end
always @(*) begin
main_0_4_write_enable_b = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_4_write_enable_b = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32))
begin
main_0_4_write_enable_b = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33))
begin
main_0_4_write_enable_b = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34))
begin
main_0_4_write_enable_b = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35))
begin
main_0_4_write_enable_b = 1'd1;
end
/* main: %127*/
/*   %135 = load i32* %134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_127_40))
begin
main_0_4_write_enable_b = 1'd0;
end
/* main: %141*/
/*   store i32 %153, i32* %154, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_141_45))
begin
main_0_4_write_enable_b = 1'd1;
end
/* main: %199*/
/*   %214 = load i32* %213, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_199_67))
begin
main_0_4_write_enable_b = 1'd0;
end
end
always @(*) begin
main_0_4_in_b = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_4_in_b = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32))
begin
main_0_4_in_b = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33))
begin
main_0_4_in_b = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34))
begin
main_0_4_in_b = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep65.10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35))
begin
main_0_4_in_b = -32'd1;
end
/* main: %141*/
/*   store i32 %153, i32* %154, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_141_45))
begin
main_0_4_in_b = main_141_153;
end
end
always @(*) begin
main_0_5_address_a = 1'd0;
/* main: %.preheader29*/
/*   %82 = load i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_4))
begin
main_0_5_address_a = (main_0_scevgep52_reg >>> 3'd2);
end
/* main: %.preheader29*/
/*   %86 = load i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_5))
begin
main_0_5_address_a = (main__preheader29_scevgep_2_reg >>> 3'd2);
end
/* main: %.preheader29*/
/*   %91 = load i32* %scevgep.148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_6))
begin
main_0_5_address_a = (main__preheader29_scevgep_148_reg >>> 3'd2);
end
/* main: %.preheader29*/
/*   %95 = load i32* %scevgep.2.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_7))
begin
main_0_5_address_a = (main__preheader29_scevgep_2_1_reg >>> 3'd2);
end
/* main: %.preheader29*/
/*   %100 = load i32* %scevgep.249, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_8))
begin
main_0_5_address_a = (main__preheader29_scevgep_249_reg >>> 3'd2);
end
/* main: %.preheader29*/
/*   %104 = load i32* %scevgep.2.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_9))
begin
main_0_5_address_a = (main__preheader29_scevgep_2_2_reg >>> 3'd2);
end
/* main: %.preheader29*/
/*   %109 = load i32* %scevgep.350, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_10))
begin
main_0_5_address_a = (main__preheader29_scevgep_350_reg >>> 3'd2);
end
/* main: %.preheader29*/
/*   %113 = load i32* %scevgep.2.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_11))
begin
main_0_5_address_a = (main__preheader29_scevgep_2_3_reg >>> 3'd2);
end
/* main: %122*/
/*   store i32 -1, i32* %s.i.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_122_29))
begin
main_0_5_address_a = (main_119_s_i_0_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 0, i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_5_address_a = (main_0_scevgep52_reg >>> 3'd2);
end
/* main: %172*/
/*   %181 = load i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_172_57))
begin
main_0_5_address_a = (main_172_180 >>> 3'd2);
end
/* main: %185*/
/*   store i32 %b.0, i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_185_59))
begin
main_0_5_address_a = (main_172_180_reg >>> 3'd2);
end
end
always @(*) begin
main_0_5_write_enable_a = 1'd0;
/* main: %.preheader29*/
/*   %82 = load i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_4))
begin
main_0_5_write_enable_a = 1'd0;
end
/* main: %.preheader29*/
/*   %86 = load i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_5))
begin
main_0_5_write_enable_a = 1'd0;
end
/* main: %.preheader29*/
/*   %91 = load i32* %scevgep.148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_6))
begin
main_0_5_write_enable_a = 1'd0;
end
/* main: %.preheader29*/
/*   %95 = load i32* %scevgep.2.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_7))
begin
main_0_5_write_enable_a = 1'd0;
end
/* main: %.preheader29*/
/*   %100 = load i32* %scevgep.249, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_8))
begin
main_0_5_write_enable_a = 1'd0;
end
/* main: %.preheader29*/
/*   %104 = load i32* %scevgep.2.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_9))
begin
main_0_5_write_enable_a = 1'd0;
end
/* main: %.preheader29*/
/*   %109 = load i32* %scevgep.350, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_10))
begin
main_0_5_write_enable_a = 1'd0;
end
/* main: %.preheader29*/
/*   %113 = load i32* %scevgep.2.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_11))
begin
main_0_5_write_enable_a = 1'd0;
end
/* main: %122*/
/*   store i32 -1, i32* %s.i.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_122_29))
begin
main_0_5_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 0, i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_5_write_enable_a = 1'd1;
end
/* main: %172*/
/*   %181 = load i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_172_57))
begin
main_0_5_write_enable_a = 1'd0;
end
/* main: %185*/
/*   store i32 %b.0, i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_185_59))
begin
main_0_5_write_enable_a = 1'd1;
end
end
always @(*) begin
main_0_5_in_a = 1'd0;
/* main: %122*/
/*   store i32 -1, i32* %s.i.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_122_29))
begin
main_0_5_in_a = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 0, i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_5_in_a = 32'd0;
end
/* main: %185*/
/*   store i32 %b.0, i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_185_59))
begin
main_0_5_in_a = main__backedge_b_0_reg;
end
end
always @(*) begin
main_0_5_address_b = 1'd0;
/* main: %.preheader29*/
/*   %84 = load i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_4))
begin
main_0_5_address_b = (main__preheader29_scevgep_1 >>> 3'd2);
end
/* main: %.preheader29*/
/*   %88 = load i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_5))
begin
main_0_5_address_b = (main__preheader29_scevgep_3_reg >>> 3'd2);
end
/* main: %.preheader29*/
/*   %93 = load i32* %scevgep.1.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_6))
begin
main_0_5_address_b = (main__preheader29_scevgep_1_1_reg >>> 3'd2);
end
/* main: %.preheader29*/
/*   %97 = load i32* %scevgep.3.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_7))
begin
main_0_5_address_b = (main__preheader29_scevgep_3_1_reg >>> 3'd2);
end
/* main: %.preheader29*/
/*   %102 = load i32* %scevgep.1.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_8))
begin
main_0_5_address_b = (main__preheader29_scevgep_1_2_reg >>> 3'd2);
end
/* main: %.preheader29*/
/*   %106 = load i32* %scevgep.3.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_9))
begin
main_0_5_address_b = (main__preheader29_scevgep_3_2_reg >>> 3'd2);
end
/* main: %.preheader29*/
/*   %111 = load i32* %scevgep.1.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_10))
begin
main_0_5_address_b = (main__preheader29_scevgep_1_3_reg >>> 3'd2);
end
/* main: %.preheader29*/
/*   %115 = load i32* %scevgep.3.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_11))
begin
main_0_5_address_b = (main__preheader29_scevgep_3_3_reg >>> 3'd2);
end
/* main: %141*/
/*   %157 = load i32* %156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_141_46))
begin
main_0_5_address_b = (main_141_156 >>> 3'd2);
end
/* main: %161*/
/*   store i32 %a.0, i32* %156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_161_48))
begin
main_0_5_address_b = (main_141_156_reg >>> 3'd2);
end
end
always @(*) begin
main_0_5_write_enable_b = 1'd0;
/* main: %.preheader29*/
/*   %84 = load i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_4))
begin
main_0_5_write_enable_b = 1'd0;
end
/* main: %.preheader29*/
/*   %88 = load i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_5))
begin
main_0_5_write_enable_b = 1'd0;
end
/* main: %.preheader29*/
/*   %93 = load i32* %scevgep.1.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_6))
begin
main_0_5_write_enable_b = 1'd0;
end
/* main: %.preheader29*/
/*   %97 = load i32* %scevgep.3.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_7))
begin
main_0_5_write_enable_b = 1'd0;
end
/* main: %.preheader29*/
/*   %102 = load i32* %scevgep.1.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_8))
begin
main_0_5_write_enable_b = 1'd0;
end
/* main: %.preheader29*/
/*   %106 = load i32* %scevgep.3.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_9))
begin
main_0_5_write_enable_b = 1'd0;
end
/* main: %.preheader29*/
/*   %111 = load i32* %scevgep.1.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_10))
begin
main_0_5_write_enable_b = 1'd0;
end
/* main: %.preheader29*/
/*   %115 = load i32* %scevgep.3.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader29_11))
begin
main_0_5_write_enable_b = 1'd0;
end
/* main: %141*/
/*   %157 = load i32* %156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_141_46))
begin
main_0_5_write_enable_b = 1'd0;
end
/* main: %161*/
/*   store i32 %a.0, i32* %156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_161_48))
begin
main_0_5_write_enable_b = 1'd1;
end
end
always @(*) begin
main_0_5_in_b = 1'd0;
/* main: %161*/
/*   store i32 %a.0, i32* %156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_161_48))
begin
main_0_5_in_b = main__backedge_a_0_reg;
end
end
always @(*) begin
main_0_6_address_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 0, i32* %.sub13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_6_address_a = (main_0__sub13_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 0, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_6_address_a = (main_0_30_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_6_address_a = (main_0_34_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 1, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_6_address_a = (main_0_38_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 0, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_6_address_a = (main_0_42_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 0, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_6_address_a = (main_0_46_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_19))
begin
main_0_6_address_a = (main_0_50_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 1, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_20))
begin
main_0_6_address_a = (main_0_54_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_21))
begin
main_0_6_address_a = (main_0_58_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 2, i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_22))
begin
main_0_6_address_a = (main_0_62_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 0, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_23))
begin
main_0_6_address_a = (main_0_66_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 0, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_24))
begin
main_0_6_address_a = (main_0_70_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 1, i32* %74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_25))
begin
main_0_6_address_a = (main_0_74_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_26))
begin
main_0_6_address_a = (main_0_78_reg >>> 3'd2);
end
/* main: %141*/
/*   %146 = load i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_141_43))
begin
main_0_6_address_a = (main_141_145 >>> 3'd2);
end
end
always @(*) begin
main_0_6_write_enable_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 0, i32* %.sub13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_19))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_20))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_21))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_22))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_23))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_24))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_25))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_26))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %141*/
/*   %146 = load i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_141_43))
begin
main_0_6_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_6_in_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 0, i32* %.sub13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_6_in_a = 32'd0;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_6_in_a = 32'd0;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_6_in_a = -32'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_6_in_a = 32'd1;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_6_in_a = 32'd0;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_6_in_a = 32'd0;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_19))
begin
main_0_6_in_a = -32'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_20))
begin
main_0_6_in_a = 32'd1;
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_21))
begin
main_0_6_in_a = -32'd2;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_22))
begin
main_0_6_in_a = 32'd2;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_23))
begin
main_0_6_in_a = 32'd0;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_24))
begin
main_0_6_in_a = 32'd0;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_25))
begin
main_0_6_in_a = 32'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_26))
begin
main_0_6_in_a = -32'd1;
end
end
always @(*) begin
main_0_6_address_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 1, i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_6_address_b = (main_0_28_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_6_address_b = (main_0_32_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 1, i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_6_address_b = (main_0_36_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_6_address_b = (main_0_40_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 2, i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_6_address_b = (main_0_44_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_6_address_b = (main_0_48_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 1, i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_19))
begin
main_0_6_address_b = (main_0_52_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_20))
begin
main_0_6_address_b = (main_0_56_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 2, i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_21))
begin
main_0_6_address_b = (main_0_60_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_22))
begin
main_0_6_address_b = (main_0_64_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 4, i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_23))
begin
main_0_6_address_b = (main_0_68_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -4, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_24))
begin
main_0_6_address_b = (main_0_72_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 1, i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_25))
begin
main_0_6_address_b = (main_0_76_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_26))
begin
main_0_6_address_b = (main_0_80_reg >>> 3'd2);
end
/* main: %172*/
/*   %174 = load i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_172_55))
begin
main_0_6_address_b = (main_172_173 >>> 3'd2);
end
end
always @(*) begin
main_0_6_write_enable_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 1, i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_19))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_20))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_21))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_22))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 4, i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_23))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -4, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_24))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_25))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_26))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %172*/
/*   %174 = load i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_172_55))
begin
main_0_6_write_enable_b = 1'd0;
end
end
always @(*) begin
main_0_6_in_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 1, i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_6_in_b = 32'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_6_in_b = -32'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_6_in_b = 32'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_6_in_b = -32'd1;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_6_in_b = 32'd2;
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_6_in_b = -32'd2;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_19))
begin
main_0_6_in_b = 32'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_20))
begin
main_0_6_in_b = -32'd1;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_21))
begin
main_0_6_in_b = 32'd2;
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_22))
begin
main_0_6_in_b = -32'd2;
end
/* main: %.preheader31*/
/*   store i32 4, i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_23))
begin
main_0_6_in_b = 32'd4;
end
/* main: %.preheader31*/
/*   store i32 -4, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_24))
begin
main_0_6_in_b = -32'd4;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_25))
begin
main_0_6_in_b = 32'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_26))
begin
main_0_6_in_b = -32'd1;
end
end
always @(*) begin
main_0_7_address_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 1, i32* %.sub14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_7_address_a = (main_0__sub14_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_7_address_a = (main_0_31_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 1, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_7_address_a = (main_0_35_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_7_address_a = (main_0_39_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 2, i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_7_address_a = (main_0_43_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_7_address_a = (main_0_47_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 2, i32* %51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_19))
begin
main_0_7_address_a = (main_0_51_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_20))
begin
main_0_7_address_a = (main_0_55_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 1, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_21))
begin
main_0_7_address_a = (main_0_59_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_22))
begin
main_0_7_address_a = (main_0_63_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 4, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_23))
begin
main_0_7_address_a = (main_0_67_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -4, i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_24))
begin
main_0_7_address_a = (main_0_71_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 3, i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_25))
begin
main_0_7_address_a = (main_0_75_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -3, i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_26))
begin
main_0_7_address_a = (main_0_79_reg >>> 3'd2);
end
/* main: %141*/
/*   %152 = load i32* %151, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_141_43))
begin
main_0_7_address_a = (main_141_151 >>> 3'd2);
end
end
always @(*) begin
main_0_7_write_enable_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 1, i32* %.sub14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_19))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_20))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_21))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_22))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 4, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_23))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -4, i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_24))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 3, i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_25))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -3, i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_26))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %141*/
/*   %152 = load i32* %151, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_141_43))
begin
main_0_7_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_7_in_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 1, i32* %.sub14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_7_in_a = 32'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_7_in_a = -32'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_7_in_a = 32'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_7_in_a = -32'd1;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_7_in_a = 32'd2;
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_7_in_a = -32'd2;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_19))
begin
main_0_7_in_a = 32'd2;
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_20))
begin
main_0_7_in_a = -32'd2;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_21))
begin
main_0_7_in_a = 32'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_22))
begin
main_0_7_in_a = -32'd1;
end
/* main: %.preheader31*/
/*   store i32 4, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_23))
begin
main_0_7_in_a = 32'd4;
end
/* main: %.preheader31*/
/*   store i32 -4, i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_24))
begin
main_0_7_in_a = -32'd4;
end
/* main: %.preheader31*/
/*   store i32 3, i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_25))
begin
main_0_7_in_a = 32'd3;
end
/* main: %.preheader31*/
/*   store i32 -3, i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_26))
begin
main_0_7_in_a = -32'd3;
end
end
always @(*) begin
main_0_7_address_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 0, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_7_address_b = (main_0_29_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 0, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_7_address_b = (main_0_33_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 1, i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_7_address_b = (main_0_37_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_7_address_b = (main_0_41_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 0, i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_7_address_b = (main_0_45_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 0, i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_7_address_b = (main_0_49_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 2, i32* %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_19))
begin
main_0_7_address_b = (main_0_53_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_20))
begin
main_0_7_address_b = (main_0_57_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 1, i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_21))
begin
main_0_7_address_b = (main_0_61_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_22))
begin
main_0_7_address_b = (main_0_65_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 0, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_23))
begin
main_0_7_address_b = (main_0_69_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 0, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_24))
begin
main_0_7_address_b = (main_0_73_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -3, i32* %77, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_25))
begin
main_0_7_address_b = (main_0_77_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 3, i32* %81, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_26))
begin
main_0_7_address_b = (main_0_81_reg >>> 3'd2);
end
/* main: %172*/
/*   %177 = load i32* %176, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_172_55))
begin
main_0_7_address_b = (main_172_176 >>> 3'd2);
end
end
always @(*) begin
main_0_7_write_enable_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 0, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_19))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_20))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_21))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_22))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_23))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_24))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -3, i32* %77, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_25))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 3, i32* %81, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_26))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %172*/
/*   %177 = load i32* %176, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_172_55))
begin
main_0_7_write_enable_b = 1'd0;
end
end
always @(*) begin
main_0_7_in_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 0, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_7_in_b = 32'd0;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_7_in_b = 32'd0;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_7_in_b = 32'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_7_in_b = -32'd1;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_7_in_b = 32'd0;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_7_in_b = 32'd0;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_19))
begin
main_0_7_in_b = 32'd2;
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_20))
begin
main_0_7_in_b = -32'd2;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_21))
begin
main_0_7_in_b = 32'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_22))
begin
main_0_7_in_b = -32'd1;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_23))
begin
main_0_7_in_b = 32'd0;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_24))
begin
main_0_7_in_b = 32'd0;
end
/* main: %.preheader31*/
/*   store i32 -3, i32* %77, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_25))
begin
main_0_7_in_b = -32'd3;
end
/* main: %.preheader31*/
/*   store i32 3, i32* %81, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_26))
begin
main_0_7_in_b = 32'd3;
end
end
always @(*) begin
/* main: %199*/
/*   %221 = sdiv i32 %.27, 2*/
if ((cur_state == LEGUP_F_main_BB_199_68))
begin
main_signed_divide_32_0_op0 = main_199__27;
end
/* main: %199*/
/*   %223 = sdiv i32 %diff_pos_y.0, 2*/
else /* if ((cur_state == LEGUP_F_main_BB_199_69)) */
begin
main_signed_divide_32_0_op0 = main_199_diff_pos_y_0_reg;
end
end
always @(*) begin
/* main: %199*/
/*   %221 = sdiv i32 %.27, 2*/
if ((cur_state == LEGUP_F_main_BB_199_68))
begin
main_signed_divide_32_0_op1 = 32'd2;
end
/* main: %199*/
/*   %223 = sdiv i32 %diff_pos_y.0, 2*/
else /* if ((cur_state == LEGUP_F_main_BB_199_69)) */
begin
main_signed_divide_32_0_op1 = 32'd2;
end
end
always @(*) begin
lpm_divide_main_199_221_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_main_199_221_out = lpm_divide_main_199_221_temp_out;
end
always @(*) begin
main_signed_divide_32_0 = lpm_divide_main_199_221_out;
end
always @(*) begin
/* main: %199*/
/*   %222 = srem i32 %.27, 2*/
begin
main_signed_modulus_32_0_op0 = main_199__27;
end
end
always @(*) begin
/* main: %199*/
/*   %222 = srem i32 %.27, 2*/
if (reset) begin main_signed_modulus_32_0_op1 = 0; end
begin
main_signed_modulus_32_0_op1 = 32'd2;
end
end
always @(*) begin
lpm_divide_main_199_222_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_main_199_222_out = lpm_divide_main_199_222_temp_out;
end
always @(*) begin
main_signed_modulus_32_0 = lpm_divide_main_199_222_out;
end
always @(*) begin
/* main: %199*/
/*   %224 = srem i32 %diff_pos_y.0, 2*/
begin
main_signed_modulus_32_1_op0 = main_199_diff_pos_y_0;
end
end
always @(*) begin
/* main: %199*/
/*   %224 = srem i32 %diff_pos_y.0, 2*/
if (reset) begin main_signed_modulus_32_1_op1 = 0; end
begin
main_signed_modulus_32_1_op1 = 32'd2;
end
end
always @(*) begin
lpm_divide_main_199_224_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_main_199_224_out = lpm_divide_main_199_224_temp_out;
end
always @(*) begin
main_signed_modulus_32_1 = lpm_divide_main_199_224_out;
end
always @(*) begin
lpm_divide_main_199_223_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %231*/
/*   ret i32 %.0*/
if ((cur_state == LEGUP_F_main_BB_231_102))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %231*/
/*   ret i32 %.0*/
if ((cur_state == LEGUP_F_main_BB_231_102))
begin
return_val <= main_231__0_reg;
if (reset == 1'b0 && ^(main_231__0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
