//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Thu Mar 26 13:21:48 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 7
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_main_BB_0_1 = 7'd1;
parameter [6:0] LEGUP_F_main_BB__backedge_2 = 7'd2;
parameter [6:0] LEGUP_F_main_BB__backedge_backedge_3 = 7'd3;
parameter [6:0] LEGUP_F_main_BB__preheader_preheader_4 = 7'd4;
parameter [6:0] LEGUP_F_main_BB__preheader31_5 = 7'd5;
parameter [6:0] LEGUP_F_main_BB__preheader31_6 = 7'd6;
parameter [6:0] LEGUP_F_main_BB__preheader31_7 = 7'd7;
parameter [6:0] LEGUP_F_main_BB__preheader31_8 = 7'd8;
parameter [6:0] LEGUP_F_main_BB__preheader31_9 = 7'd9;
parameter [6:0] LEGUP_F_main_BB__preheader31_10 = 7'd10;
parameter [6:0] LEGUP_F_main_BB__preheader31_11 = 7'd11;
parameter [6:0] LEGUP_F_main_BB__preheader31_12 = 7'd12;
parameter [6:0] LEGUP_F_main_BB__preheader31_13 = 7'd13;
parameter [6:0] LEGUP_F_main_BB__preheader31_14 = 7'd14;
parameter [6:0] LEGUP_F_main_BB__preheader31_15 = 7'd15;
parameter [6:0] LEGUP_F_main_BB__preheader31_16 = 7'd16;
parameter [6:0] LEGUP_F_main_BB__preheader31_17 = 7'd17;
parameter [6:0] LEGUP_F_main_BB__preheader31_18 = 7'd18;
parameter [6:0] LEGUP_F_main_BB__preheader31_19 = 7'd19;
parameter [6:0] LEGUP_F_main_BB__preheader31_20 = 7'd20;
parameter [6:0] LEGUP_F_main_BB__preheader31_21 = 7'd21;
parameter [6:0] LEGUP_F_main_BB__preheader31_22 = 7'd22;
parameter [6:0] LEGUP_F_main_BB__preheader31_23 = 7'd23;
parameter [6:0] LEGUP_F_main_BB__preheader31_24 = 7'd24;
parameter [6:0] LEGUP_F_main_BB_136_25 = 7'd25;
parameter [6:0] LEGUP_F_main_BB_139_26 = 7'd26;
parameter [6:0] LEGUP_F_main_BB_139_27 = 7'd27;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4_exit_loopexit_28 = 7'd28;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4_exit_29 = 7'd29;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4_exit_30 = 7'd30;
parameter [6:0] LEGUP_F_main_BB_143_31 = 7'd31;
parameter [6:0] LEGUP_F_main_BB_143_32 = 7'd32;
parameter [6:0] LEGUP_F_main_BB_144_33 = 7'd33;
parameter [6:0] LEGUP_F_main_BB_146_34 = 7'd34;
parameter [6:0] LEGUP_F_main_BB_146_35 = 7'd35;
parameter [6:0] LEGUP_F_main_BB_146_36 = 7'd36;
parameter [6:0] LEGUP_F_main_BB_158_37 = 7'd37;
parameter [6:0] LEGUP_F_main_BB_160_38 = 7'd38;
parameter [6:0] LEGUP_F_main_BB_160_39 = 7'd39;
parameter [6:0] LEGUP_F_main_BB_160_40 = 7'd40;
parameter [6:0] LEGUP_F_main_BB_160_41 = 7'd41;
parameter [6:0] LEGUP_F_main_BB_160_42 = 7'd42;
parameter [6:0] LEGUP_F_main_BB_160_43 = 7'd43;
parameter [6:0] LEGUP_F_main_BB_180_44 = 7'd44;
parameter [6:0] LEGUP_F_main_BB_180_45 = 7'd45;
parameter [6:0] LEGUP_F_main_BB_181_46 = 7'd46;
parameter [6:0] LEGUP_F_main_BB_183_47 = 7'd47;
parameter [6:0] LEGUP_F_main_BB_185_48 = 7'd48;
parameter [6:0] LEGUP_F_main_BB_187_49 = 7'd49;
parameter [6:0] LEGUP_F_main_BB_189_50 = 7'd50;
parameter [6:0] LEGUP_F_main_BB_191_51 = 7'd51;
parameter [6:0] LEGUP_F_main_BB_191_52 = 7'd52;
parameter [6:0] LEGUP_F_main_BB_191_53 = 7'd53;
parameter [6:0] LEGUP_F_main_BB_191_54 = 7'd54;
parameter [6:0] LEGUP_F_main_BB_191_55 = 7'd55;
parameter [6:0] LEGUP_F_main_BB_204_56 = 7'd56;
parameter [6:0] LEGUP_F_main_BB_204_57 = 7'd57;
parameter [6:0] LEGUP_F_main_BB_208_58 = 7'd58;
parameter [6:0] LEGUP_F_main_BB_210_59 = 7'd59;
parameter [6:0] LEGUP_F_main_BB_212_60 = 7'd60;
parameter [6:0] LEGUP_F_main_BB_215_61 = 7'd61;
parameter [6:0] LEGUP_F_main_BB_216_62 = 7'd62;
parameter [6:0] LEGUP_F_main_BB_218_63 = 7'd63;
parameter [6:0] LEGUP_F_main_BB_218_64 = 7'd64;
parameter [6:0] LEGUP_F_main_BB_218_65 = 7'd65;
parameter [6:0] LEGUP_F_main_BB_218_66 = 7'd66;
parameter [6:0] LEGUP_F_main_BB_218_67 = 7'd67;
parameter [6:0] LEGUP_F_main_BB_218_68 = 7'd68;
parameter [6:0] LEGUP_F_main_BB_218_69 = 7'd69;
parameter [6:0] LEGUP_F_main_BB_218_70 = 7'd70;
parameter [6:0] LEGUP_F_main_BB_218_71 = 7'd71;
parameter [6:0] LEGUP_F_main_BB_218_72 = 7'd72;
parameter [6:0] LEGUP_F_main_BB_218_73 = 7'd73;
parameter [6:0] LEGUP_F_main_BB_218_74 = 7'd74;
parameter [6:0] LEGUP_F_main_BB_218_75 = 7'd75;
parameter [6:0] LEGUP_F_main_BB_218_76 = 7'd76;
parameter [6:0] LEGUP_F_main_BB_218_77 = 7'd77;
parameter [6:0] LEGUP_F_main_BB_218_78 = 7'd78;
parameter [6:0] LEGUP_F_main_BB_218_79 = 7'd79;
parameter [6:0] LEGUP_F_main_BB_218_80 = 7'd80;
parameter [6:0] LEGUP_F_main_BB_218_81 = 7'd81;
parameter [6:0] LEGUP_F_main_BB_218_82 = 7'd82;
parameter [6:0] LEGUP_F_main_BB_218_83 = 7'd83;
parameter [6:0] LEGUP_F_main_BB_218_84 = 7'd84;
parameter [6:0] LEGUP_F_main_BB_218_85 = 7'd85;
parameter [6:0] LEGUP_F_main_BB_218_86 = 7'd86;
parameter [6:0] LEGUP_F_main_BB_218_87 = 7'd87;
parameter [6:0] LEGUP_F_main_BB_218_88 = 7'd88;
parameter [6:0] LEGUP_F_main_BB_218_89 = 7'd89;
parameter [6:0] LEGUP_F_main_BB_218_90 = 7'd90;
parameter [6:0] LEGUP_F_main_BB_218_91 = 7'd91;
parameter [6:0] LEGUP_F_main_BB_218_92 = 7'd92;
parameter [6:0] LEGUP_F_main_BB_218_93 = 7'd93;
parameter [6:0] LEGUP_F_main_BB_218_94 = 7'd94;
parameter [6:0] LEGUP_F_main_BB_218_95 = 7'd95;
parameter [6:0] LEGUP_F_main_BB_218_96 = 7'd96;
parameter [6:0] LEGUP_F_main_BB_218_97 = 7'd97;
parameter [6:0] LEGUP_F_main_BB_218_98 = 7'd98;
parameter [6:0] LEGUP_F_main_BB__preheader_99 = 7'd99;
parameter [6:0] LEGUP_F_main_BB__preheader_100 = 7'd100;
parameter [6:0] LEGUP_F_main_BB__preheader_101 = 7'd101;
parameter [6:0] LEGUP_F_main_BB__preheader_102 = 7'd102;
parameter [6:0] LEGUP_F_main_BB__preheader_103 = 7'd103;
parameter [6:0] LEGUP_F_main_BB_264_104 = 7'd104;
parameter [6:0] LEGUP_F_main_BB_266_105 = 7'd105;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [6:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_43_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_46_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_47;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_53;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_53_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_55_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_56_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_57_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_59_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_62_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_66_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_67;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_67_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_68;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_70_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_72_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_74;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_75_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_76_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_77;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_77_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_79_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_80;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_80_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_81_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_83;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_83_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_84;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_84_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_85_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_86_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_87;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_87_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_88;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_88_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_89;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_89_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_90;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_90_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_91;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_91_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_92;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_92_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_93;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_93_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_94;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_94_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_95;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_95_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_96;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_96_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_97;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_97_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_98;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_98_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_99;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_100_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_101_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_102;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_102_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_103;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_103_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_104;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_104_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_105;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_105_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_106;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_106_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_107;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_107_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_108;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_108_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_109;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_109_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_110;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_110_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_111;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_111_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_112;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_112_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_113;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_113_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_114;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_114_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_115;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_115_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_116;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_116_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_117;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_117_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_118;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_118_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_119;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_119_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_120;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_120_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_121;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_121_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_122;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_122_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_123;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_123_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_124;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_124_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_125;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_125_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_126;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_126_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_127;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_127_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_128;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_128_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_129;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_129_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_130;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_130_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_131;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_131_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_132;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_132_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_133;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_133_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_134;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_134_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_135;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_135_reg;
reg [31:0] main__backedge_sum_0;
reg [31:0] main__backedge_sum_0_reg;
reg [31:0] main__backedge_b_0;
reg [31:0] main__backedge_b_0_reg;
reg [31:0] main__backedge_a_0;
reg [31:0] main__backedge_a_0_reg;
reg [31:0] main__backedge_pos_b_X_0;
reg [31:0] main__backedge_pos_b_X_0_reg;
reg [31:0] main__backedge_pos_a_Y_0;
reg [31:0] main__backedge_pos_a_Y_0_reg;
reg [31:0] main__backedge_pos_a_X_0;
reg [31:0] main__backedge_pos_a_X_0_reg;
reg [31:0] main__backedge_j_0;
reg [31:0] main__backedge_j_0_reg;
reg [31:0] main__backedge_i_0;
reg [31:0] main__backedge_i_0_reg;
reg [31:0] main__backedge_state_0;
reg [31:0] main__backedge_state_0_reg;
reg [31:0] main__backedge_sum_1hop_0;
reg [31:0] main__backedge_sum_1hop_0_reg;
reg [31:0] main__backedge_backedge_sum_0_be;
reg [31:0] main__backedge_backedge_sum_0_be_reg;
reg [31:0] main__backedge_backedge_b_0_be;
reg [31:0] main__backedge_backedge_b_0_be_reg;
reg [31:0] main__backedge_backedge_a_0_be;
reg [31:0] main__backedge_backedge_a_0_be_reg;
reg [31:0] main__backedge_backedge_pos_b_X_0_be;
reg [31:0] main__backedge_backedge_pos_b_X_0_be_reg;
reg [31:0] main__backedge_backedge_pos_a_Y_0_be;
reg [31:0] main__backedge_backedge_pos_a_Y_0_be_reg;
reg [31:0] main__backedge_backedge_pos_a_X_0_be;
reg [31:0] main__backedge_backedge_pos_a_X_0_be_reg;
reg [31:0] main__backedge_backedge_j_0_be;
reg [31:0] main__backedge_backedge_j_0_be_reg;
reg [31:0] main__backedge_backedge_i_0_be;
reg [31:0] main__backedge_backedge_i_0_be_reg;
reg [31:0] main__backedge_backedge_state_0_be;
reg [31:0] main__backedge_backedge_state_0_be_reg;
reg [31:0] main__backedge_backedge_sum_1hop_0_be;
reg [31:0] main__backedge_backedge_sum_1hop_0_be_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_136_s_i_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_136_s_i_0_reg;
reg [31:0] main_136_137;
reg [31:0] main_136_137_reg;
reg  main_136_138;
reg  main_136_138_reg;
reg [31:0] main_139_140;
reg [31:0] main_139_140_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_139_141;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_139_141_reg;
reg [31:0] main_legup_memset_4_exit_i_234;
reg [31:0] main_legup_memset_4_exit_i_234_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit_scevgep74;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit_scevgep74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit_scevgep75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit_scevgep75_reg;
reg [31:0] main_legup_memset_4_exit_142;
reg [31:0] main_legup_memset_4_exit_142_reg;
reg  main_legup_memset_4_exit_exitcond73;
reg  main_legup_memset_4_exit_exitcond73_reg;
reg  main_144_145;
reg  main_144_145_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_146_147;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_146_147_reg;
reg [31:0] main_146_148;
reg [31:0] main_146_148_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_146_149;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_146_149_reg;
reg [31:0] main_146_150;
reg [31:0] main_146_150_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_146_151;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_146_151_reg;
reg [31:0] main_146_152;
reg [31:0] main_146_152_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_146_153;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_146_153_reg;
reg [31:0] main_146_154;
reg [31:0] main_146_154_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_146_155;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_146_155_reg;
reg [31:0] main_146_156;
reg [31:0] main_146_156_reg;
reg  main_146_157;
reg  main_146_157_reg;
reg [31:0] main_146__;
reg [31:0] main_146___reg;
reg  main_158_159;
reg  main_158_159_reg;
reg [31:0] main_160_161;
reg [31:0] main_160_161_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_162;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_162_reg;
reg [31:0] main_160_163;
reg [31:0] main_160_163_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_164;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_164_reg;
reg [31:0] main_160_165;
reg [31:0] main_160_165_reg;
reg [31:0] main_160_166;
reg [31:0] main_160_166_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_167;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_167_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_168;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_168_reg;
reg [31:0] main_160_169;
reg [31:0] main_160_169_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_170;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_170_reg;
reg [31:0] main_160_171;
reg [31:0] main_160_171_reg;
reg [31:0] main_160_172;
reg [31:0] main_160_172_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_173;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_173_reg;
reg [31:0] main_160_174;
reg [31:0] main_160_174_reg;
reg [31:0] main_160_idxscale17;
reg [31:0] main_160_idxscale17_reg;
reg [31:0] main_160__sum18;
reg [31:0] main_160__sum18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_175;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_175_reg;
reg [31:0] main_160_176;
reg [31:0] main_160_176_reg;
reg  main_160_177;
reg  main_160_177_reg;
reg  main_160_178;
reg  main_160_178_reg;
reg  main_160_or_cond;
reg  main_160_or_cond_reg;
reg  main_160_179;
reg  main_160_179_reg;
reg  main_160_or_cond22;
reg  main_160_or_cond22_reg;
reg  main_181_182;
reg  main_181_182_reg;
reg [31:0] main_185_pos_a_Y_1;
reg [31:0] main_185_pos_a_Y_1_reg;
reg [31:0] main_185_pos_a_X_1;
reg [31:0] main_185_pos_a_X_1_reg;
reg  main_185_186;
reg  main_185_186_reg;
reg [31:0] main_185__23;
reg [31:0] main_185__23_reg;
reg [31:0] main_185__24;
reg [31:0] main_185__24_reg;
reg  main_187_188;
reg  main_187_188_reg;
reg [31:0] main_189_190;
reg [31:0] main_189_190_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_191_192;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_191_192_reg;
reg [31:0] main_191_193;
reg [31:0] main_191_193_reg;
reg [31:0] main_191_194;
reg [31:0] main_191_194_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_191_195;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_191_195_reg;
reg [31:0] main_191_196;
reg [31:0] main_191_196_reg;
reg [31:0] main_191_197;
reg [31:0] main_191_197_reg;
reg [31:0] main_191_198;
reg [31:0] main_191_198_reg;
reg [31:0] main_191_idxscale15;
reg [31:0] main_191_idxscale15_reg;
reg [31:0] main_191__sum16;
reg [31:0] main_191__sum16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_191_199;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_191_199_reg;
reg [31:0] main_191_200;
reg [31:0] main_191_200_reg;
reg  main_191_201;
reg  main_191_201_reg;
reg  main_191_202;
reg  main_191_202_reg;
reg  main_191_or_cond25;
reg  main_191_or_cond25_reg;
reg  main_191_203;
reg  main_191_203_reg;
reg  main_191_or_cond26;
reg  main_191_or_cond26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_204_205;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_204_205_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_204_206;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_204_206_reg;
reg [31:0] main_204_207;
reg [31:0] main_204_207_reg;
reg  main_208_209;
reg  main_208_209_reg;
reg [31:0] main_212_213;
reg [31:0] main_212_213_reg;
reg [31:0] main_212_214;
reg [31:0] main_212_214_reg;
reg [31:0] main_212_i_0_;
reg [31:0] main_212_i_0__reg;
reg  main_216_217;
reg  main_216_217_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_218_219;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_218_219_reg;
reg [31:0] main_218_220;
reg [31:0] main_218_220_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_218_221;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_218_221_reg;
reg [31:0] main_218_222;
reg [31:0] main_218_222_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_218_223;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_218_223_reg;
reg [31:0] main_218_224;
reg [31:0] main_218_224_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_218_225;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_218_225_reg;
reg [31:0] main_218_226;
reg [31:0] main_218_226_reg;
reg [31:0] main_218_227;
reg [31:0] main_218_227_reg;
reg [31:0] main_218_228;
reg [31:0] main_218_228_reg;
reg  main_218_229;
reg  main_218_229_reg;
reg [31:0] main_218__27;
reg [31:0] main_218__27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_218_230;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_218_230_reg;
reg [31:0] main_218_231;
reg [31:0] main_218_231_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_218_232;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_218_232_reg;
reg [31:0] main_218_233;
reg [31:0] main_218_233_reg;
reg [31:0] main_218_234;
reg [31:0] main_218_234_reg;
reg  main_218_235;
reg  main_218_235_reg;
reg [31:0] main_218_236;
reg [31:0] main_218_236_reg;
reg [31:0] main_218_diff_pos_y_0;
reg [31:0] main_218_diff_pos_y_0_reg;
reg [31:0] main_218_237;
reg [31:0] main_218_237_reg;
reg [31:0] main_218_238;
reg [31:0] main_218_238_reg;
reg [31:0] main_218_239;
reg [31:0] main_218_239_reg;
reg [31:0] main_218_240;
reg [31:0] main_218_240_reg;
reg [31:0] main_218_241;
reg [31:0] main_218_241_reg;
reg [31:0] main_218_242;
reg [31:0] main_218_242_reg;
reg [31:0] main_218_243;
reg [31:0] main_218_243_reg;
reg [31:0] main_218_244;
reg [31:0] main_218_244_reg;
reg [31:0] main_218_245;
reg [31:0] main_218_245_reg;
reg [31:0] main_218_246;
reg [31:0] main_218_246_reg;
reg [31:0] main_218_247;
reg [31:0] main_218_247_reg;
reg [31:0] main_218_248;
reg [31:0] main_218_248_reg;
reg [31:0] main_218_249;
reg [31:0] main_218_249_reg;
reg [31:0] main__preheader_i_330;
reg [31:0] main__preheader_i_330_reg;
reg [31:0] main__preheader_tmp40;
reg [31:0] main__preheader_tmp40_reg;
reg [31:0] main__preheader_tmp5080;
reg [31:0] main__preheader_tmp5080_reg;
reg [31:0] main__preheader_tmp48;
reg [31:0] main__preheader_tmp48_reg;
reg [31:0] main__preheader_tmp46;
reg [31:0] main__preheader_tmp46_reg;
reg [31:0] main__preheader_tmp44;
reg [31:0] main__preheader_tmp44_reg;
reg [31:0] main__preheader_tmp42;
reg [31:0] main__preheader_tmp42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep_reg;
reg [31:0] main__preheader_250;
reg [31:0] main__preheader_250_reg;
reg [31:0] main__preheader_252;
reg [31:0] main__preheader_252_reg;
reg [31:0] main__preheader_254;
reg [31:0] main__preheader_254_reg;
reg [31:0] main__preheader_256;
reg [31:0] main__preheader_256_reg;
reg [31:0] main__preheader_258;
reg [31:0] main__preheader_258_reg;
reg [31:0] main__preheader_260;
reg [31:0] main__preheader_260_reg;
reg [31:0] main__preheader_263;
reg [31:0] main__preheader_263_reg;
reg  main__preheader_exitcond;
reg  main__preheader_exitcond_reg;
reg [31:0] main_266__0;
reg [31:0] main_266__0_reg;
reg [5:0] main_0_1_address_a;
reg  main_0_1_write_enable_a;
reg [31:0] main_0_1_in_a;
wire [31:0] main_0_1_out_a;
reg [5:0] main_0_1_address_b;
reg  main_0_1_write_enable_b;
reg [31:0] main_0_1_in_b;
wire [31:0] main_0_1_out_b;
reg [5:0] main_0_2_address_a;
reg  main_0_2_write_enable_a;
reg [31:0] main_0_2_in_a;
wire [31:0] main_0_2_out_a;
reg [5:0] main_0_2_address_b;
reg  main_0_2_write_enable_b;
reg [31:0] main_0_2_in_b;
wire [31:0] main_0_2_out_b;
reg [5:0] main_0_3_address_a;
reg  main_0_3_write_enable_a;
reg [31:0] main_0_3_in_a;
wire [31:0] main_0_3_out_a;
reg [5:0] main_0_3_address_b;
reg  main_0_3_write_enable_b;
reg [31:0] main_0_3_in_b;
wire [31:0] main_0_3_out_b;
reg [5:0] main_0_4_address_a;
reg  main_0_4_write_enable_a;
reg [31:0] main_0_4_in_a;
wire [31:0] main_0_4_out_a;
reg [5:0] main_0_4_address_b;
reg  main_0_4_write_enable_b;
reg [31:0] main_0_4_in_b;
wire [31:0] main_0_4_out_b;
reg [5:0] main_0_5_address_a;
reg  main_0_5_write_enable_a;
reg [31:0] main_0_5_in_a;
wire [31:0] main_0_5_out_a;
reg [5:0] main_0_5_address_b;
reg  main_0_5_write_enable_b;
wire [31:0] main_0_5_in_b;
wire [31:0] main_0_5_out_b;
reg [4:0] main_0_6_address_a;
reg  main_0_6_write_enable_a;
reg [31:0] main_0_6_in_a;
wire [31:0] main_0_6_out_a;
reg [4:0] main_0_6_address_b;
reg  main_0_6_write_enable_b;
reg [31:0] main_0_6_in_b;
wire [31:0] main_0_6_out_b;
reg [4:0] main_0_7_address_a;
reg  main_0_7_write_enable_a;
reg [31:0] main_0_7_in_a;
wire [31:0] main_0_7_out_a;
reg [4:0] main_0_7_address_b;
reg  main_0_7_write_enable_b;
reg [31:0] main_0_7_in_b;
wire [31:0] main_0_7_out_b;
wire [15:0] legup_pthreadpoll_threadID;
reg [31:0] main_signed_divide_32_0_op0;
reg [31:0] main_signed_divide_32_0_op1;
wire [31:0] lpm_divide_main_218_240_temp_out;
wire [31:0] main_218_240_unused;
reg  lpm_divide_main_218_240_en;
reg [31:0] lpm_divide_main_218_240_out;
reg [31:0] main_signed_divide_32_0;
reg [31:0] main_signed_modulus_32_0_op0;
reg [31:0] main_signed_modulus_32_0_op1;
wire [31:0] lpm_divide_main_218_241_temp_out;
wire [31:0] main_218_241_unused;
reg  lpm_divide_main_218_241_en;
reg [31:0] lpm_divide_main_218_241_out;
reg [31:0] main_signed_modulus_32_0;
reg [31:0] main_signed_modulus_32_1_op0;
reg [31:0] main_signed_modulus_32_1_op1;
wire [31:0] lpm_divide_main_218_243_temp_out;
wire [31:0] main_218_243_unused;
reg  lpm_divide_main_218_243_en;
reg [31:0] lpm_divide_main_218_243_out;
reg [31:0] main_signed_modulus_32_1;
reg  lpm_mult_main_160_idxscale17_en;
reg [31:0] main_160_idxscale17_stage0_reg;
reg  lpm_mult_main_191_idxscale15_en;
reg [31:0] main_191_idxscale15_stage0_reg;
reg  lpm_divide_main_218_242_en;
reg  lpm_mult_main__preheader_tmp40_en;
reg [31:0] main__preheader_tmp40_stage0_reg;

/*   %240 = sdiv i32 %.27, 2*/
lpm_divide lpm_divide_main_218_240 (
	.quotient (lpm_divide_main_218_240_temp_out),
	.remain (main_218_240_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_218_240_en),
	.numer (main_signed_divide_32_0_op0),
	.denom (main_signed_divide_32_0_op1)
);

defparam
	lpm_divide_main_218_240.lpm_pipeline = 32,
	lpm_divide_main_218_240.lpm_widthn = 32,
	lpm_divide_main_218_240.lpm_widthd = 32,
	lpm_divide_main_218_240.lpm_drepresentation = "SIGNED",
	lpm_divide_main_218_240.lpm_nrepresentation = "SIGNED",
	lpm_divide_main_218_240.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

/*   %241 = srem i32 %.27, 2*/
lpm_divide lpm_divide_main_218_241 (
	.quotient (main_218_241_unused),
	.remain (lpm_divide_main_218_241_temp_out),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_218_241_en),
	.numer (main_signed_modulus_32_0_op0),
	.denom (main_signed_modulus_32_0_op1)
);

defparam
	lpm_divide_main_218_241.lpm_pipeline = 32,
	lpm_divide_main_218_241.lpm_widthn = 32,
	lpm_divide_main_218_241.lpm_widthd = 32,
	lpm_divide_main_218_241.lpm_drepresentation = "SIGNED",
	lpm_divide_main_218_241.lpm_nrepresentation = "SIGNED",
	lpm_divide_main_218_241.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

/*   %243 = srem i32 %diff_pos_y.0, 2*/
lpm_divide lpm_divide_main_218_243 (
	.quotient (main_218_243_unused),
	.remain (lpm_divide_main_218_243_temp_out),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_218_243_en),
	.numer (main_signed_modulus_32_1_op0),
	.denom (main_signed_modulus_32_1_op1)
);

defparam
	lpm_divide_main_218_243.lpm_pipeline = 32,
	lpm_divide_main_218_243.lpm_widthn = 32,
	lpm_divide_main_218_243.lpm_widthd = 32,
	lpm_divide_main_218_243.lpm_drepresentation = "SIGNED",
	lpm_divide_main_218_243.lpm_nrepresentation = "SIGNED",
	lpm_divide_main_218_243.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

// Local Rams

//   %1 = alloca [37 x i32], align 4
ram_dual_port main_0_1 (
	.clk( clk ),
	.address_a( main_0_1_address_a ),
	.address_b( main_0_1_address_b ),
	.wren_a( main_0_1_write_enable_a ),
	.wren_b( main_0_1_write_enable_b ),
	.data_a( main_0_1_in_a ),
	.data_b( main_0_1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_1_out_a ),
	.q_b( main_0_1_out_b)
);
defparam main_0_1.width_a = 32;
defparam main_0_1.width_b = 32;
defparam main_0_1.widthad_a = 6;
defparam main_0_1.widthad_b = 6;
defparam main_0_1.width_be_a = 1;
defparam main_0_1.width_be_b = 1;
defparam main_0_1.numwords_a = 37;
defparam main_0_1.numwords_b = 37;
defparam main_0_1.latency = 1;

//   %2 = alloca [37 x i32], align 4
ram_dual_port main_0_2 (
	.clk( clk ),
	.address_a( main_0_2_address_a ),
	.address_b( main_0_2_address_b ),
	.wren_a( main_0_2_write_enable_a ),
	.wren_b( main_0_2_write_enable_b ),
	.data_a( main_0_2_in_a ),
	.data_b( main_0_2_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_2_out_a ),
	.q_b( main_0_2_out_b)
);
defparam main_0_2.width_a = 32;
defparam main_0_2.width_b = 32;
defparam main_0_2.widthad_a = 6;
defparam main_0_2.widthad_b = 6;
defparam main_0_2.width_be_a = 1;
defparam main_0_2.width_be_b = 1;
defparam main_0_2.numwords_a = 37;
defparam main_0_2.numwords_b = 37;
defparam main_0_2.latency = 1;

//   %3 = alloca [35 x i32], align 4
ram_dual_port main_0_3 (
	.clk( clk ),
	.address_a( main_0_3_address_a ),
	.address_b( main_0_3_address_b ),
	.wren_a( main_0_3_write_enable_a ),
	.wren_b( main_0_3_write_enable_b ),
	.data_a( main_0_3_in_a ),
	.data_b( main_0_3_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_3_out_a ),
	.q_b( main_0_3_out_b)
);
defparam main_0_3.width_a = 32;
defparam main_0_3.width_b = 32;
defparam main_0_3.widthad_a = 6;
defparam main_0_3.widthad_b = 6;
defparam main_0_3.width_be_a = 1;
defparam main_0_3.width_be_b = 1;
defparam main_0_3.numwords_a = 35;
defparam main_0_3.numwords_b = 35;
defparam main_0_3.latency = 1;

//   %4 = alloca [35 x i32], align 4
ram_dual_port main_0_4 (
	.clk( clk ),
	.address_a( main_0_4_address_a ),
	.address_b( main_0_4_address_b ),
	.wren_a( main_0_4_write_enable_a ),
	.wren_b( main_0_4_write_enable_b ),
	.data_a( main_0_4_in_a ),
	.data_b( main_0_4_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_4_out_a ),
	.q_b( main_0_4_out_b)
);
defparam main_0_4.width_a = 32;
defparam main_0_4.width_b = 32;
defparam main_0_4.widthad_a = 6;
defparam main_0_4.widthad_b = 6;
defparam main_0_4.width_be_a = 1;
defparam main_0_4.width_be_b = 1;
defparam main_0_4.numwords_a = 35;
defparam main_0_4.numwords_b = 35;
defparam main_0_4.latency = 1;

//   %5 = alloca [36 x i32], align 4
ram_dual_port main_0_5 (
	.clk( clk ),
	.address_a( main_0_5_address_a ),
	.address_b( main_0_5_address_b ),
	.wren_a( main_0_5_write_enable_a ),
	.wren_b( main_0_5_write_enable_b ),
	.data_a( main_0_5_in_a ),
	.data_b( main_0_5_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_5_out_a ),
	.q_b( main_0_5_out_b)
);
defparam main_0_5.width_a = 32;
defparam main_0_5.width_b = 32;
defparam main_0_5.widthad_a = 6;
defparam main_0_5.widthad_b = 6;
defparam main_0_5.width_be_a = 1;
defparam main_0_5.width_be_b = 1;
defparam main_0_5.numwords_a = 36;
defparam main_0_5.numwords_b = 36;
defparam main_0_5.latency = 1;

//   %6 = alloca [28 x i32], align 4
ram_dual_port main_0_6 (
	.clk( clk ),
	.address_a( main_0_6_address_a ),
	.address_b( main_0_6_address_b ),
	.wren_a( main_0_6_write_enable_a ),
	.wren_b( main_0_6_write_enable_b ),
	.data_a( main_0_6_in_a ),
	.data_b( main_0_6_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_6_out_a ),
	.q_b( main_0_6_out_b)
);
defparam main_0_6.width_a = 32;
defparam main_0_6.width_b = 32;
defparam main_0_6.widthad_a = 5;
defparam main_0_6.widthad_b = 5;
defparam main_0_6.width_be_a = 1;
defparam main_0_6.width_be_b = 1;
defparam main_0_6.numwords_a = 28;
defparam main_0_6.numwords_b = 28;
defparam main_0_6.latency = 1;

//   %7 = alloca [28 x i32], align 4
ram_dual_port main_0_7 (
	.clk( clk ),
	.address_a( main_0_7_address_a ),
	.address_b( main_0_7_address_b ),
	.wren_a( main_0_7_write_enable_a ),
	.wren_b( main_0_7_write_enable_b ),
	.data_a( main_0_7_in_a ),
	.data_b( main_0_7_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_7_out_a ),
	.q_b( main_0_7_out_b)
);
defparam main_0_7.width_a = 32;
defparam main_0_7.width_b = 32;
defparam main_0_7.widthad_a = 5;
defparam main_0_7.widthad_b = 5;
defparam main_0_7.width_be_a = 1;
defparam main_0_7.width_be_b = 1;
defparam main_0_7.numwords_a = 28;
defparam main_0_7.numwords_b = 28;
defparam main_0_7.latency = 1;


/* Unsynthesizable Statements */
always @(posedge clk) begin
/* main: %183*/
/*   %184 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB_183_47))
begin
$write("No solution\n");
end
/* main: %210*/
/*   %211 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB_210_59))
begin
$write("No solution\n");
end
/* main: %.preheader*/
/*   %262 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str2, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader_99))
begin
$write("\n");
end
/* main: %.preheader*/
/*   %251 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %250) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader_101))
begin
$write("%3d ", $signed(main__preheader_250));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader_250) === 1'bX) finish <= 0;
end
/* main: %.preheader*/
/*   %253 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %252) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader_101))
begin
$write("%3d ", $signed(main__preheader_252));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader_252) === 1'bX) finish <= 0;
end
/* main: %.preheader*/
/*   %255 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %254) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader_102))
begin
$write("%3d ", $signed(main__preheader_254));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader_254) === 1'bX) finish <= 0;
end
/* main: %.preheader*/
/*   %257 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %256) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader_102))
begin
$write("%3d ", $signed(main__preheader_256));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader_256) === 1'bX) finish <= 0;
end
/* main: %.preheader*/
/*   %259 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %258) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader_103))
begin
$write("%3d ", $signed(main__preheader_258));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader_258) === 1'bX) finish <= 0;
end
/* main: %.preheader*/
/*   %261 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %260) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader_103))
begin
$write("%3d ", $signed(main__preheader_260));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader_260) === 1'bX) finish <= 0;
end
/* main: %264*/
/*   %265 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([40 x i8]* @.str3, i32 0, i32 0), i32 %sum.0, i32 %sum_1hop.0) nounwind*/
if ((cur_state == LEGUP_F_main_BB_264_104))
begin
$write("\nEvaluation = %d\nEvaluation 1-hop = %d\n", $signed(main__backedge_sum_0_reg), $signed(main__backedge_sum_1hop_0_reg));
// to fix quartus warning
if (reset == 1'b0 && ^(main__backedge_sum_0_reg) === 1'bX) finish <= 0;
if (reset == 1'b0 && ^(main__backedge_sum_1hop_0_reg) === 1'bX) finish <= 0;
end
end
always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_2;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__backedge_2;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg == 32'd5)))
begin
cur_state <= LEGUP_F_main_BB__preheader_preheader_4;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader_preheader_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg == 32'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_5;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg == 32'd1)))
begin
cur_state <= LEGUP_F_main_BB_144_33;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_144_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg == 32'd2)))
begin
cur_state <= LEGUP_F_main_BB_158_37;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_158_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg == 32'd3)))
begin
cur_state <= LEGUP_F_main_BB_187_49;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_187_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg == 32'd4)))
begin
cur_state <= LEGUP_F_main_BB_216_62;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_216_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_2;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_preheader_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_preheader_4;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader_preheader_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_preheader_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_99;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_5;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_6;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_6;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_7;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_7;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_8;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_8;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_9;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_9;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_10;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_10;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_11;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_11;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_12;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_12;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_13;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_13;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_14;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_14;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_15;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_15;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_16;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_16;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_17;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_17;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_18;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_18;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_19;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_19;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_20;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_20;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_21;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_21;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_22;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_22;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_23;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_23;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_24;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_24;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_136_25;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_136_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_136_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_136_25;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_136_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_136_25) & (memory_controller_waitrequest == 1'd0)) & (main_136_138 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_loopexit_28;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_loopexit_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_136_25) & (memory_controller_waitrequest == 1'd0)) & (main_136_138 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_139_26;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_139_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_139_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_139_26;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_139_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_139_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_139_27;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_139_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_139_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_139_27;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_139_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_139_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_136_25;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_136_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_loopexit_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_loopexit_28;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_loopexit_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_loopexit_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_29;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_29;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_30;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_30;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_30) & (memory_controller_waitrequest == 1'd0)) & (main_legup_memset_4_exit_exitcond73_reg == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_143_31;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_143_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_30) & (memory_controller_waitrequest == 1'd0)) & (main_legup_memset_4_exit_exitcond73_reg == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_29;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_143_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_143_31;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_143_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_143_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_143_32;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_143_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_143_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_143_32;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_143_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_143_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_144_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_144_33;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_144_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_144_33) & (memory_controller_waitrequest == 1'd0)) & (main_144_145 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_144_33) & (memory_controller_waitrequest == 1'd0)) & (main_144_145 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_146_34;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_146_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_146_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_146_34;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_146_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_146_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_146_35;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_146_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_146_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_146_35;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_146_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_146_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_146_36;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_146_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_146_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_146_36;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_146_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_146_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_158_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_158_37;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_158_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_158_37) & (memory_controller_waitrequest == 1'd0)) & (main_158_159 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_160_38;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_160_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_158_37) & (memory_controller_waitrequest == 1'd0)) & (main_158_159 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_160_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_160_38;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_160_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_160_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_160_39;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_160_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_160_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_160_39;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_160_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_160_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_160_40;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_160_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_160_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_160_40;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_160_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_160_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_160_41;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_160_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_160_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_160_41;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_160_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_160_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_160_42;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_160_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_160_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_160_42;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_160_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_160_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_160_43;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_160_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_160_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_160_43;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_160_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_160_43) & (memory_controller_waitrequest == 1'd0)) & (main_160_or_cond22 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_180_44;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_180_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_160_43) & (memory_controller_waitrequest == 1'd0)) & (main_160_or_cond22 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_181_46;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_181_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_180_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_180_44;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_180_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_180_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_180_45;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_180_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_180_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_180_45;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_180_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_180_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_185_48;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_185_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_181_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_181_46;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_181_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_181_46) & (memory_controller_waitrequest == 1'd0)) & (main_181_182 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_183_47;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_183_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_181_46) & (memory_controller_waitrequest == 1'd0)) & (main_181_182 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_185_48;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_185_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_183_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_183_47;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_183_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_183_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_266_105;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_266_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_185_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_185_48;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_185_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_185_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_187_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_187_49;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_187_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_187_49) & (memory_controller_waitrequest == 1'd0)) & (main_187_188 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_191_51;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_191_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_187_49) & (memory_controller_waitrequest == 1'd0)) & (main_187_188 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_189_50;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_189_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_189_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_189_50;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_189_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_189_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_191_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_191_51;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_191_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_191_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_191_52;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_191_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_191_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_191_52;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_191_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_191_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_191_53;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_191_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_191_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_191_53;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_191_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_191_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_191_54;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_191_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_191_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_191_54;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_191_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_191_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_191_55;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_191_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_191_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_191_55;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_191_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_191_55) & (memory_controller_waitrequest == 1'd0)) & (main_191_or_cond26 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_204_56;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_204_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_191_55) & (memory_controller_waitrequest == 1'd0)) & (main_191_or_cond26 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_208_58;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_208_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_204_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_204_56;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_204_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_204_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_204_57;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_204_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_204_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_204_57;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_204_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_204_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_208_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_208_58;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_208_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_208_58) & (memory_controller_waitrequest == 1'd0)) & (main_208_209 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_210_59;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_210_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_208_58) & (memory_controller_waitrequest == 1'd0)) & (main_208_209 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_212_60;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_212_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_210_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_210_59;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_210_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_210_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_266_105;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_266_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_212_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_212_60;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_212_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_212_60) & (memory_controller_waitrequest == 1'd0)) & (main_187_188_reg == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_212_60) & (memory_controller_waitrequest == 1'd0)) & (main_187_188_reg == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_61;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_61;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_216_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_216_62;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_216_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_216_62) & (memory_controller_waitrequest == 1'd0)) & (main_216_217 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_216_62) & (memory_controller_waitrequest == 1'd0)) & (main_216_217 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_63;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_63;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_64;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_64;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_65;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_65;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_66;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_66;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_67;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_67;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_68;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_68;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_69;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_69;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_70;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_70;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_71;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_71;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_72;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_72;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_73;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_73;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_74;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_74;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_75;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_75;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_76;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_76;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_77;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_77;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_78;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_78;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_79;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_79;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_80;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_80;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_81;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_81;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_82;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_82;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_83;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_83;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_84;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_84;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_85;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_85;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_86;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_86;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_87;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_87;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_88;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_88;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_89;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_89;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_90;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_90;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_91;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_91;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_92;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_92;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_93;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_93;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_94;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_94;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_95;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_95;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_96;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_96;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_97;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_97;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_98;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_98;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_99;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_100;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_100;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_101;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_101;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_102;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_102;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_103;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_103;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__preheader_103) & (memory_controller_waitrequest == 1'd0)) & (main__preheader_exitcond_reg == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_264_104;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_264_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__preheader_103) & (memory_controller_waitrequest == 1'd0)) & (main__preheader_exitcond_reg == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_99;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_264_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_264_104;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_264_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_264_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_266_105;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_266_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_266_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_266_105;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_266_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_266_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 7'd0;
if (reset == 1'b0 && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %.sub8 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 0*/
if (reset) begin main_0__sub8 = 0; end
begin
main_0__sub8 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %.sub8 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0__sub8_reg <= main_0__sub8;
if (reset == 1'b0 && ^(main_0__sub8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0__sub8_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %.sub9 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 0*/
if (reset) begin main_0__sub9 = 0; end
begin
main_0__sub9 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %.sub9 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0__sub9_reg <= main_0__sub9;
if (reset == 1'b0 && ^(main_0__sub9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0__sub9_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %.sub13 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 0*/
if (reset) begin main_0__sub13 = 0; end
begin
main_0__sub13 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %.sub13 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0__sub13_reg <= main_0__sub13;
if (reset == 1'b0 && ^(main_0__sub13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0__sub13_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %.sub14 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 0*/
if (reset) begin main_0__sub14 = 0; end
begin
main_0__sub14 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %.sub14 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0__sub14_reg <= main_0__sub14;
if (reset == 1'b0 && ^(main_0__sub14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0__sub14_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %8 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 1*/
if (reset) begin main_0_8 = 0; end
begin
main_0_8 = (1'd0 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %8 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_8_reg <= main_0_8;
if (reset == 1'b0 && ^(main_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_8_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %9 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 1*/
if (reset) begin main_0_9 = 0; end
begin
main_0_9 = (1'd0 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %9 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_9_reg <= main_0_9;
if (reset == 1'b0 && ^(main_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_9_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %10 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 2*/
if (reset) begin main_0_10 = 0; end
begin
main_0_10 = (1'd0 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %10 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_10_reg <= main_0_10;
if (reset == 1'b0 && ^(main_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_10_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %11 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 2*/
if (reset) begin main_0_11 = 0; end
begin
main_0_11 = (1'd0 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %11 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_11_reg <= main_0_11;
if (reset == 1'b0 && ^(main_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_11_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %12 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 3*/
if (reset) begin main_0_12 = 0; end
begin
main_0_12 = (1'd0 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %12 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_12_reg <= main_0_12;
if (reset == 1'b0 && ^(main_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_12_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %13 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 3*/
if (reset) begin main_0_13 = 0; end
begin
main_0_13 = (1'd0 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %13 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_13_reg <= main_0_13;
if (reset == 1'b0 && ^(main_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_13_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %14 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 4*/
if (reset) begin main_0_14 = 0; end
begin
main_0_14 = (1'd0 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %14 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_14_reg <= main_0_14;
if (reset == 1'b0 && ^(main_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_14_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %15 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 4*/
if (reset) begin main_0_15 = 0; end
begin
main_0_15 = (1'd0 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %15 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_15_reg <= main_0_15;
if (reset == 1'b0 && ^(main_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_15_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %16 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 5*/
if (reset) begin main_0_16 = 0; end
begin
main_0_16 = (1'd0 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %16 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 5*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_16_reg <= main_0_16;
if (reset == 1'b0 && ^(main_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_16_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %17 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 5*/
if (reset) begin main_0_17 = 0; end
begin
main_0_17 = (1'd0 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %17 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 5*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_17_reg <= main_0_17;
if (reset == 1'b0 && ^(main_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_17_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %18 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 6*/
if (reset) begin main_0_18 = 0; end
begin
main_0_18 = (1'd0 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %18 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 6*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_18_reg <= main_0_18;
if (reset == 1'b0 && ^(main_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_18_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %19 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 6*/
if (reset) begin main_0_19 = 0; end
begin
main_0_19 = (1'd0 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %19 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 6*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_19_reg <= main_0_19;
if (reset == 1'b0 && ^(main_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_19_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %20 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 7*/
if (reset) begin main_0_20 = 0; end
begin
main_0_20 = (1'd0 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %20 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 7*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_20_reg <= main_0_20;
if (reset == 1'b0 && ^(main_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_20_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %21 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 7*/
if (reset) begin main_0_21 = 0; end
begin
main_0_21 = (1'd0 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %21 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 7*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_21_reg <= main_0_21;
if (reset == 1'b0 && ^(main_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_21_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %22 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 8*/
if (reset) begin main_0_22 = 0; end
begin
main_0_22 = (1'd0 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %22 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 8*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_22_reg <= main_0_22;
if (reset == 1'b0 && ^(main_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_22_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %23 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 8*/
if (reset) begin main_0_23 = 0; end
begin
main_0_23 = (1'd0 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %23 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 8*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_23_reg <= main_0_23;
if (reset == 1'b0 && ^(main_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_23_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %24 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 9*/
if (reset) begin main_0_24 = 0; end
begin
main_0_24 = (1'd0 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %24 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 9*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_24_reg <= main_0_24;
if (reset == 1'b0 && ^(main_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_24_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %25 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 9*/
if (reset) begin main_0_25 = 0; end
begin
main_0_25 = (1'd0 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %25 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 9*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_25_reg <= main_0_25;
if (reset == 1'b0 && ^(main_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_25_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %26 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 10*/
if (reset) begin main_0_26 = 0; end
begin
main_0_26 = (1'd0 + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %26 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 10*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_26_reg <= main_0_26;
if (reset == 1'b0 && ^(main_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_26_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %27 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 10*/
if (reset) begin main_0_27 = 0; end
begin
main_0_27 = (1'd0 + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %27 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 10*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_27_reg <= main_0_27;
if (reset == 1'b0 && ^(main_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_27_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %28 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 11*/
if (reset) begin main_0_28 = 0; end
begin
main_0_28 = (1'd0 + (4 * 32'd11));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %28 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 11*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_28_reg <= main_0_28;
if (reset == 1'b0 && ^(main_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_28_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %29 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 11*/
if (reset) begin main_0_29 = 0; end
begin
main_0_29 = (1'd0 + (4 * 32'd11));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %29 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 11*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_29_reg <= main_0_29;
if (reset == 1'b0 && ^(main_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_29_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %30 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 12*/
if (reset) begin main_0_30 = 0; end
begin
main_0_30 = (1'd0 + (4 * 32'd12));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %30 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 12*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_30_reg <= main_0_30;
if (reset == 1'b0 && ^(main_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_30_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %31 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 12*/
if (reset) begin main_0_31 = 0; end
begin
main_0_31 = (1'd0 + (4 * 32'd12));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %31 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 12*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_31_reg <= main_0_31;
if (reset == 1'b0 && ^(main_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_31_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %32 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 13*/
if (reset) begin main_0_32 = 0; end
begin
main_0_32 = (1'd0 + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %32 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 13*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_32_reg <= main_0_32;
if (reset == 1'b0 && ^(main_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_32_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %33 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 13*/
if (reset) begin main_0_33 = 0; end
begin
main_0_33 = (1'd0 + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %33 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 13*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_33_reg <= main_0_33;
if (reset == 1'b0 && ^(main_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_33_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %34 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 14*/
if (reset) begin main_0_34 = 0; end
begin
main_0_34 = (1'd0 + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %34 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 14*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_34_reg <= main_0_34;
if (reset == 1'b0 && ^(main_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_34_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %35 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 14*/
if (reset) begin main_0_35 = 0; end
begin
main_0_35 = (1'd0 + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %35 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 14*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_35_reg <= main_0_35;
if (reset == 1'b0 && ^(main_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_35_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %36 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 15*/
if (reset) begin main_0_36 = 0; end
begin
main_0_36 = (1'd0 + (4 * 32'd15));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %36 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 15*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_36_reg <= main_0_36;
if (reset == 1'b0 && ^(main_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_36_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %37 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 15*/
if (reset) begin main_0_37 = 0; end
begin
main_0_37 = (1'd0 + (4 * 32'd15));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %37 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 15*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_37_reg <= main_0_37;
if (reset == 1'b0 && ^(main_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_37_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %38 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 16*/
if (reset) begin main_0_38 = 0; end
begin
main_0_38 = (1'd0 + (4 * 32'd16));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %38 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 16*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_38_reg <= main_0_38;
if (reset == 1'b0 && ^(main_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_38_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %39 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 16*/
if (reset) begin main_0_39 = 0; end
begin
main_0_39 = (1'd0 + (4 * 32'd16));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %39 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 16*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_39_reg <= main_0_39;
if (reset == 1'b0 && ^(main_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_39_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %40 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 17*/
if (reset) begin main_0_40 = 0; end
begin
main_0_40 = (1'd0 + (4 * 32'd17));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %40 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 17*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_40_reg <= main_0_40;
if (reset == 1'b0 && ^(main_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_40_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %41 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 17*/
if (reset) begin main_0_41 = 0; end
begin
main_0_41 = (1'd0 + (4 * 32'd17));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %41 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 17*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_41_reg <= main_0_41;
if (reset == 1'b0 && ^(main_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_41_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %42 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 18*/
if (reset) begin main_0_42 = 0; end
begin
main_0_42 = (1'd0 + (4 * 32'd18));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %42 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 18*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_42_reg <= main_0_42;
if (reset == 1'b0 && ^(main_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_42_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %43 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 18*/
if (reset) begin main_0_43 = 0; end
begin
main_0_43 = (1'd0 + (4 * 32'd18));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %43 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 18*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_43_reg <= main_0_43;
if (reset == 1'b0 && ^(main_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_43_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %44 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 19*/
if (reset) begin main_0_44 = 0; end
begin
main_0_44 = (1'd0 + (4 * 32'd19));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %44 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 19*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_44_reg <= main_0_44;
if (reset == 1'b0 && ^(main_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_44_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %45 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 19*/
if (reset) begin main_0_45 = 0; end
begin
main_0_45 = (1'd0 + (4 * 32'd19));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %45 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 19*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_45_reg <= main_0_45;
if (reset == 1'b0 && ^(main_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_45_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %46 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 20*/
if (reset) begin main_0_46 = 0; end
begin
main_0_46 = (1'd0 + (4 * 32'd20));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %46 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 20*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_46_reg <= main_0_46;
if (reset == 1'b0 && ^(main_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_46_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %47 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 20*/
if (reset) begin main_0_47 = 0; end
begin
main_0_47 = (1'd0 + (4 * 32'd20));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %47 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 20*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_47_reg <= main_0_47;
if (reset == 1'b0 && ^(main_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_47_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %48 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 21*/
if (reset) begin main_0_48 = 0; end
begin
main_0_48 = (1'd0 + (4 * 32'd21));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %48 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 21*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_48_reg <= main_0_48;
if (reset == 1'b0 && ^(main_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_48_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %49 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 21*/
if (reset) begin main_0_49 = 0; end
begin
main_0_49 = (1'd0 + (4 * 32'd21));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %49 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 21*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_49_reg <= main_0_49;
if (reset == 1'b0 && ^(main_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_49_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %50 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 22*/
if (reset) begin main_0_50 = 0; end
begin
main_0_50 = (1'd0 + (4 * 32'd22));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %50 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 22*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_50_reg <= main_0_50;
if (reset == 1'b0 && ^(main_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_50_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %51 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 22*/
if (reset) begin main_0_51 = 0; end
begin
main_0_51 = (1'd0 + (4 * 32'd22));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %51 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 22*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_51_reg <= main_0_51;
if (reset == 1'b0 && ^(main_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_51_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %52 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 23*/
if (reset) begin main_0_52 = 0; end
begin
main_0_52 = (1'd0 + (4 * 32'd23));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %52 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 23*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_52_reg <= main_0_52;
if (reset == 1'b0 && ^(main_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_52_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %53 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 23*/
if (reset) begin main_0_53 = 0; end
begin
main_0_53 = (1'd0 + (4 * 32'd23));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %53 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 23*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_53_reg <= main_0_53;
if (reset == 1'b0 && ^(main_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_53_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %54 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 24*/
if (reset) begin main_0_54 = 0; end
begin
main_0_54 = (1'd0 + (4 * 32'd24));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %54 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 24*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_54_reg <= main_0_54;
if (reset == 1'b0 && ^(main_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_54_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %55 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 24*/
if (reset) begin main_0_55 = 0; end
begin
main_0_55 = (1'd0 + (4 * 32'd24));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %55 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 24*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_55_reg <= main_0_55;
if (reset == 1'b0 && ^(main_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_55_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %56 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 25*/
if (reset) begin main_0_56 = 0; end
begin
main_0_56 = (1'd0 + (4 * 32'd25));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %56 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 25*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_56_reg <= main_0_56;
if (reset == 1'b0 && ^(main_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_56_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %57 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 25*/
if (reset) begin main_0_57 = 0; end
begin
main_0_57 = (1'd0 + (4 * 32'd25));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %57 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 25*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_57_reg <= main_0_57;
if (reset == 1'b0 && ^(main_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_57_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %58 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 26*/
if (reset) begin main_0_58 = 0; end
begin
main_0_58 = (1'd0 + (4 * 32'd26));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %58 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 26*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_58_reg <= main_0_58;
if (reset == 1'b0 && ^(main_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_58_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %59 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 26*/
if (reset) begin main_0_59 = 0; end
begin
main_0_59 = (1'd0 + (4 * 32'd26));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %59 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 26*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_59_reg <= main_0_59;
if (reset == 1'b0 && ^(main_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_59_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %60 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 27*/
if (reset) begin main_0_60 = 0; end
begin
main_0_60 = (1'd0 + (4 * 32'd27));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %60 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 27*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_60_reg <= main_0_60;
if (reset == 1'b0 && ^(main_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_60_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %61 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 27*/
if (reset) begin main_0_61 = 0; end
begin
main_0_61 = (1'd0 + (4 * 32'd27));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %61 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 27*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_61_reg <= main_0_61;
if (reset == 1'b0 && ^(main_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_61_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %62 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 28*/
if (reset) begin main_0_62 = 0; end
begin
main_0_62 = (1'd0 + (4 * 32'd28));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %62 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 28*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_62_reg <= main_0_62;
if (reset == 1'b0 && ^(main_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_62_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %63 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 28*/
if (reset) begin main_0_63 = 0; end
begin
main_0_63 = (1'd0 + (4 * 32'd28));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %63 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 28*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_63_reg <= main_0_63;
if (reset == 1'b0 && ^(main_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_63_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %64 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 29*/
if (reset) begin main_0_64 = 0; end
begin
main_0_64 = (1'd0 + (4 * 32'd29));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %64 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 29*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_64_reg <= main_0_64;
if (reset == 1'b0 && ^(main_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_64_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %65 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 29*/
if (reset) begin main_0_65 = 0; end
begin
main_0_65 = (1'd0 + (4 * 32'd29));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %65 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 29*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_65_reg <= main_0_65;
if (reset == 1'b0 && ^(main_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_65_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %66 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 30*/
if (reset) begin main_0_66 = 0; end
begin
main_0_66 = (1'd0 + (4 * 32'd30));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %66 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 30*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_66_reg <= main_0_66;
if (reset == 1'b0 && ^(main_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_66_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %67 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 30*/
if (reset) begin main_0_67 = 0; end
begin
main_0_67 = (1'd0 + (4 * 32'd30));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %67 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 30*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_67_reg <= main_0_67;
if (reset == 1'b0 && ^(main_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_67_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %68 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 31*/
if (reset) begin main_0_68 = 0; end
begin
main_0_68 = (1'd0 + (4 * 32'd31));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %68 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 31*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_68_reg <= main_0_68;
if (reset == 1'b0 && ^(main_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_68_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %69 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 31*/
if (reset) begin main_0_69 = 0; end
begin
main_0_69 = (1'd0 + (4 * 32'd31));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %69 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 31*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_69_reg <= main_0_69;
if (reset == 1'b0 && ^(main_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_69_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %70 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 32*/
if (reset) begin main_0_70 = 0; end
begin
main_0_70 = (1'd0 + (4 * 32'd32));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %70 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 32*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_70_reg <= main_0_70;
if (reset == 1'b0 && ^(main_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_70_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %71 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 32*/
if (reset) begin main_0_71 = 0; end
begin
main_0_71 = (1'd0 + (4 * 32'd32));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %71 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 32*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_71_reg <= main_0_71;
if (reset == 1'b0 && ^(main_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_71_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %72 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 33*/
if (reset) begin main_0_72 = 0; end
begin
main_0_72 = (1'd0 + (4 * 32'd33));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %72 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 33*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_72_reg <= main_0_72;
if (reset == 1'b0 && ^(main_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_72_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %73 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 33*/
if (reset) begin main_0_73 = 0; end
begin
main_0_73 = (1'd0 + (4 * 32'd33));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %73 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 33*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_73_reg <= main_0_73;
if (reset == 1'b0 && ^(main_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_73_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %74 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 34*/
if (reset) begin main_0_74 = 0; end
begin
main_0_74 = (1'd0 + (4 * 32'd34));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %74 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 34*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_74_reg <= main_0_74;
if (reset == 1'b0 && ^(main_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_74_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %75 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 34*/
if (reset) begin main_0_75 = 0; end
begin
main_0_75 = (1'd0 + (4 * 32'd34));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %75 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 34*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_75_reg <= main_0_75;
if (reset == 1'b0 && ^(main_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_75_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %76 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 35*/
if (reset) begin main_0_76 = 0; end
begin
main_0_76 = (1'd0 + (4 * 32'd35));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %76 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 35*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_76_reg <= main_0_76;
if (reset == 1'b0 && ^(main_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_76_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %77 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 35*/
if (reset) begin main_0_77 = 0; end
begin
main_0_77 = (1'd0 + (4 * 32'd35));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %77 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 35*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_77_reg <= main_0_77;
if (reset == 1'b0 && ^(main_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_77_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %78 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 36*/
if (reset) begin main_0_78 = 0; end
begin
main_0_78 = (1'd0 + (4 * 32'd36));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %78 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 36*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_78_reg <= main_0_78;
if (reset == 1'b0 && ^(main_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_78_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %79 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 36*/
if (reset) begin main_0_79 = 0; end
begin
main_0_79 = (1'd0 + (4 * 32'd36));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %79 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 36*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_79_reg <= main_0_79;
if (reset == 1'b0 && ^(main_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_79_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %80 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 1*/
if (reset) begin main_0_80 = 0; end
begin
main_0_80 = (1'd0 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %80 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_80_reg <= main_0_80;
if (reset == 1'b0 && ^(main_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_80_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %81 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 1*/
if (reset) begin main_0_81 = 0; end
begin
main_0_81 = (1'd0 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %81 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_81_reg <= main_0_81;
if (reset == 1'b0 && ^(main_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_81_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %82 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 2*/
if (reset) begin main_0_82 = 0; end
begin
main_0_82 = (1'd0 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %82 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_82_reg <= main_0_82;
if (reset == 1'b0 && ^(main_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_82_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %83 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 2*/
if (reset) begin main_0_83 = 0; end
begin
main_0_83 = (1'd0 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %83 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_83_reg <= main_0_83;
if (reset == 1'b0 && ^(main_0_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_83_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %84 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 3*/
if (reset) begin main_0_84 = 0; end
begin
main_0_84 = (1'd0 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %84 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_84_reg <= main_0_84;
if (reset == 1'b0 && ^(main_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_84_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %85 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 3*/
if (reset) begin main_0_85 = 0; end
begin
main_0_85 = (1'd0 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %85 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_85_reg <= main_0_85;
if (reset == 1'b0 && ^(main_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_85_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %86 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 4*/
if (reset) begin main_0_86 = 0; end
begin
main_0_86 = (1'd0 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %86 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_86_reg <= main_0_86;
if (reset == 1'b0 && ^(main_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_86_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %87 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 4*/
if (reset) begin main_0_87 = 0; end
begin
main_0_87 = (1'd0 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %87 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_87_reg <= main_0_87;
if (reset == 1'b0 && ^(main_0_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_87_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %88 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 5*/
if (reset) begin main_0_88 = 0; end
begin
main_0_88 = (1'd0 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %88 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 5*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_88_reg <= main_0_88;
if (reset == 1'b0 && ^(main_0_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_88_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %89 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 5*/
if (reset) begin main_0_89 = 0; end
begin
main_0_89 = (1'd0 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %89 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 5*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_89_reg <= main_0_89;
if (reset == 1'b0 && ^(main_0_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_89_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %90 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 6*/
if (reset) begin main_0_90 = 0; end
begin
main_0_90 = (1'd0 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %90 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 6*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_90_reg <= main_0_90;
if (reset == 1'b0 && ^(main_0_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_90_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %91 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 6*/
if (reset) begin main_0_91 = 0; end
begin
main_0_91 = (1'd0 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %91 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 6*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_91_reg <= main_0_91;
if (reset == 1'b0 && ^(main_0_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_91_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %92 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 7*/
if (reset) begin main_0_92 = 0; end
begin
main_0_92 = (1'd0 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %92 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 7*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_92_reg <= main_0_92;
if (reset == 1'b0 && ^(main_0_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_92_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %93 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 7*/
if (reset) begin main_0_93 = 0; end
begin
main_0_93 = (1'd0 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %93 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 7*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_93_reg <= main_0_93;
if (reset == 1'b0 && ^(main_0_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_93_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %94 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 8*/
if (reset) begin main_0_94 = 0; end
begin
main_0_94 = (1'd0 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %94 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 8*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_94_reg <= main_0_94;
if (reset == 1'b0 && ^(main_0_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_94_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %95 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 8*/
if (reset) begin main_0_95 = 0; end
begin
main_0_95 = (1'd0 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %95 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 8*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_95_reg <= main_0_95;
if (reset == 1'b0 && ^(main_0_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_95_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %96 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 9*/
if (reset) begin main_0_96 = 0; end
begin
main_0_96 = (1'd0 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %96 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 9*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_96_reg <= main_0_96;
if (reset == 1'b0 && ^(main_0_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_96_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %97 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 9*/
if (reset) begin main_0_97 = 0; end
begin
main_0_97 = (1'd0 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %97 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 9*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_97_reg <= main_0_97;
if (reset == 1'b0 && ^(main_0_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_97_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %98 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 10*/
if (reset) begin main_0_98 = 0; end
begin
main_0_98 = (1'd0 + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %98 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 10*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_98_reg <= main_0_98;
if (reset == 1'b0 && ^(main_0_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_98_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %99 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 10*/
if (reset) begin main_0_99 = 0; end
begin
main_0_99 = (1'd0 + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %99 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 10*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_99_reg <= main_0_99;
if (reset == 1'b0 && ^(main_0_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_99_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %100 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 11*/
if (reset) begin main_0_100 = 0; end
begin
main_0_100 = (1'd0 + (4 * 32'd11));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %100 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 11*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_100_reg <= main_0_100;
if (reset == 1'b0 && ^(main_0_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_100_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %101 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 11*/
if (reset) begin main_0_101 = 0; end
begin
main_0_101 = (1'd0 + (4 * 32'd11));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %101 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 11*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_101_reg <= main_0_101;
if (reset == 1'b0 && ^(main_0_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_101_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %102 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 12*/
if (reset) begin main_0_102 = 0; end
begin
main_0_102 = (1'd0 + (4 * 32'd12));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %102 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 12*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_102_reg <= main_0_102;
if (reset == 1'b0 && ^(main_0_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_102_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %103 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 12*/
if (reset) begin main_0_103 = 0; end
begin
main_0_103 = (1'd0 + (4 * 32'd12));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %103 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 12*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_103_reg <= main_0_103;
if (reset == 1'b0 && ^(main_0_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_103_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %104 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 13*/
if (reset) begin main_0_104 = 0; end
begin
main_0_104 = (1'd0 + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %104 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 13*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_104_reg <= main_0_104;
if (reset == 1'b0 && ^(main_0_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_104_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %105 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 13*/
if (reset) begin main_0_105 = 0; end
begin
main_0_105 = (1'd0 + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %105 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 13*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_105_reg <= main_0_105;
if (reset == 1'b0 && ^(main_0_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_105_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %106 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 14*/
if (reset) begin main_0_106 = 0; end
begin
main_0_106 = (1'd0 + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %106 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 14*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_106_reg <= main_0_106;
if (reset == 1'b0 && ^(main_0_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_106_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %107 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 14*/
if (reset) begin main_0_107 = 0; end
begin
main_0_107 = (1'd0 + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %107 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 14*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_107_reg <= main_0_107;
if (reset == 1'b0 && ^(main_0_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_107_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %108 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 15*/
if (reset) begin main_0_108 = 0; end
begin
main_0_108 = (1'd0 + (4 * 32'd15));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %108 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 15*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_108_reg <= main_0_108;
if (reset == 1'b0 && ^(main_0_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_108_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %109 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 15*/
if (reset) begin main_0_109 = 0; end
begin
main_0_109 = (1'd0 + (4 * 32'd15));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %109 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 15*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_109_reg <= main_0_109;
if (reset == 1'b0 && ^(main_0_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_109_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %110 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 16*/
if (reset) begin main_0_110 = 0; end
begin
main_0_110 = (1'd0 + (4 * 32'd16));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %110 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 16*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_110_reg <= main_0_110;
if (reset == 1'b0 && ^(main_0_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_110_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %111 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 16*/
if (reset) begin main_0_111 = 0; end
begin
main_0_111 = (1'd0 + (4 * 32'd16));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %111 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 16*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_111_reg <= main_0_111;
if (reset == 1'b0 && ^(main_0_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_111_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %112 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 17*/
if (reset) begin main_0_112 = 0; end
begin
main_0_112 = (1'd0 + (4 * 32'd17));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %112 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 17*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_112_reg <= main_0_112;
if (reset == 1'b0 && ^(main_0_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_112_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %113 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 17*/
if (reset) begin main_0_113 = 0; end
begin
main_0_113 = (1'd0 + (4 * 32'd17));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %113 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 17*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_113_reg <= main_0_113;
if (reset == 1'b0 && ^(main_0_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_113_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %114 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 18*/
if (reset) begin main_0_114 = 0; end
begin
main_0_114 = (1'd0 + (4 * 32'd18));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %114 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 18*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_114_reg <= main_0_114;
if (reset == 1'b0 && ^(main_0_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_114_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %115 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 18*/
if (reset) begin main_0_115 = 0; end
begin
main_0_115 = (1'd0 + (4 * 32'd18));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %115 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 18*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_115_reg <= main_0_115;
if (reset == 1'b0 && ^(main_0_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_115_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %116 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 19*/
if (reset) begin main_0_116 = 0; end
begin
main_0_116 = (1'd0 + (4 * 32'd19));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %116 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 19*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_116_reg <= main_0_116;
if (reset == 1'b0 && ^(main_0_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_116_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %117 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 19*/
if (reset) begin main_0_117 = 0; end
begin
main_0_117 = (1'd0 + (4 * 32'd19));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %117 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 19*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_117_reg <= main_0_117;
if (reset == 1'b0 && ^(main_0_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_117_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %118 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 20*/
if (reset) begin main_0_118 = 0; end
begin
main_0_118 = (1'd0 + (4 * 32'd20));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %118 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 20*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_118_reg <= main_0_118;
if (reset == 1'b0 && ^(main_0_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_118_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %119 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 20*/
if (reset) begin main_0_119 = 0; end
begin
main_0_119 = (1'd0 + (4 * 32'd20));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %119 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 20*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_119_reg <= main_0_119;
if (reset == 1'b0 && ^(main_0_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_119_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %120 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 21*/
if (reset) begin main_0_120 = 0; end
begin
main_0_120 = (1'd0 + (4 * 32'd21));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %120 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 21*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_120_reg <= main_0_120;
if (reset == 1'b0 && ^(main_0_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_120_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %121 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 21*/
if (reset) begin main_0_121 = 0; end
begin
main_0_121 = (1'd0 + (4 * 32'd21));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %121 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 21*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_121_reg <= main_0_121;
if (reset == 1'b0 && ^(main_0_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_121_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %122 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 22*/
if (reset) begin main_0_122 = 0; end
begin
main_0_122 = (1'd0 + (4 * 32'd22));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %122 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 22*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_122_reg <= main_0_122;
if (reset == 1'b0 && ^(main_0_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_122_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %123 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 22*/
if (reset) begin main_0_123 = 0; end
begin
main_0_123 = (1'd0 + (4 * 32'd22));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %123 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 22*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_123_reg <= main_0_123;
if (reset == 1'b0 && ^(main_0_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_123_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %124 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 23*/
if (reset) begin main_0_124 = 0; end
begin
main_0_124 = (1'd0 + (4 * 32'd23));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %124 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 23*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_124_reg <= main_0_124;
if (reset == 1'b0 && ^(main_0_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_124_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %125 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 23*/
if (reset) begin main_0_125 = 0; end
begin
main_0_125 = (1'd0 + (4 * 32'd23));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %125 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 23*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_125_reg <= main_0_125;
if (reset == 1'b0 && ^(main_0_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_125_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %126 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 24*/
if (reset) begin main_0_126 = 0; end
begin
main_0_126 = (1'd0 + (4 * 32'd24));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %126 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 24*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_126_reg <= main_0_126;
if (reset == 1'b0 && ^(main_0_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_126_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %127 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 24*/
if (reset) begin main_0_127 = 0; end
begin
main_0_127 = (1'd0 + (4 * 32'd24));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %127 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 24*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_127_reg <= main_0_127;
if (reset == 1'b0 && ^(main_0_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_127_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %128 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 25*/
if (reset) begin main_0_128 = 0; end
begin
main_0_128 = (1'd0 + (4 * 32'd25));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %128 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 25*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_128_reg <= main_0_128;
if (reset == 1'b0 && ^(main_0_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_128_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %129 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 25*/
if (reset) begin main_0_129 = 0; end
begin
main_0_129 = (1'd0 + (4 * 32'd25));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %129 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 25*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_129_reg <= main_0_129;
if (reset == 1'b0 && ^(main_0_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_129_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %130 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 26*/
if (reset) begin main_0_130 = 0; end
begin
main_0_130 = (1'd0 + (4 * 32'd26));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %130 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 26*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_130_reg <= main_0_130;
if (reset == 1'b0 && ^(main_0_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_130_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %131 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 26*/
if (reset) begin main_0_131 = 0; end
begin
main_0_131 = (1'd0 + (4 * 32'd26));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %131 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 26*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_131_reg <= main_0_131;
if (reset == 1'b0 && ^(main_0_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_131_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %132 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 27*/
if (reset) begin main_0_132 = 0; end
begin
main_0_132 = (1'd0 + (4 * 32'd27));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %132 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 27*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_132_reg <= main_0_132;
if (reset == 1'b0 && ^(main_0_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_132_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %133 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 27*/
if (reset) begin main_0_133 = 0; end
begin
main_0_133 = (1'd0 + (4 * 32'd27));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %133 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 27*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_133_reg <= main_0_133;
if (reset == 1'b0 && ^(main_0_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_133_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep54 = getelementptr [36 x i32]* %5, i32 0, i32 0*/
if (reset) begin main_0_scevgep54 = 0; end
begin
main_0_scevgep54 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep54 = getelementptr [36 x i32]* %5, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep54_reg <= main_0_scevgep54;
if (reset == 1'b0 && ^(main_0_scevgep54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep54_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %134 = getelementptr inbounds [35 x i32]* %3, i32 0, i32 0*/
if (reset) begin main_0_134 = 0; end
begin
main_0_134 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %134 = getelementptr inbounds [35 x i32]* %3, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_134_reg <= main_0_134;
if (reset == 1'b0 && ^(main_0_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_134_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %135 = getelementptr inbounds [35 x i32]* %4, i32 0, i32 0*/
if (reset) begin main_0_135 = 0; end
begin
main_0_135 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %135 = getelementptr inbounds [35 x i32]* %4, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_135_reg <= main_0_135;
if (reset == 1'b0 && ^(main_0_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_135_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %sum.0 = phi i32 [ 0, %0 ], [ %sum.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_sum_0 = 32'd0;
end
/* main: %.backedge*/
/*   %sum.0 = phi i32 [ 0, %0 ], [ %sum.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_sum_0 = main__backedge_backedge_sum_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %sum.0 = phi i32 [ 0, %0 ], [ %sum.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_sum_0_reg <= main__backedge_sum_0;
if (reset == 1'b0 && ^(main__backedge_sum_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_sum_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %sum.0 = phi i32 [ 0, %0 ], [ %sum.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_sum_0_reg <= main__backedge_sum_0;
if (reset == 1'b0 && ^(main__backedge_sum_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_sum_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %b.0 = phi i32 [ undef, %0 ], [ %b.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_b_0 = 0;
end
/* main: %.backedge*/
/*   %b.0 = phi i32 [ undef, %0 ], [ %b.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_b_0 = main__backedge_backedge_b_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %b.0 = phi i32 [ undef, %0 ], [ %b.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_b_0_reg <= main__backedge_b_0;
if (reset == 1'b0 && ^(main__backedge_b_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_b_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %b.0 = phi i32 [ undef, %0 ], [ %b.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_b_0_reg <= main__backedge_b_0;
if (reset == 1'b0 && ^(main__backedge_b_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_b_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %a.0 = phi i32 [ undef, %0 ], [ %a.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_a_0 = 0;
end
/* main: %.backedge*/
/*   %a.0 = phi i32 [ undef, %0 ], [ %a.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_a_0 = main__backedge_backedge_a_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %a.0 = phi i32 [ undef, %0 ], [ %a.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_a_0_reg <= main__backedge_a_0;
if (reset == 1'b0 && ^(main__backedge_a_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_a_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %a.0 = phi i32 [ undef, %0 ], [ %a.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_a_0_reg <= main__backedge_a_0;
if (reset == 1'b0 && ^(main__backedge_a_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_a_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %pos_b_X.0 = phi i32 [ undef, %0 ], [ %pos_b_X.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_b_X_0 = 0;
end
/* main: %.backedge*/
/*   %pos_b_X.0 = phi i32 [ undef, %0 ], [ %pos_b_X.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_pos_b_X_0 = main__backedge_backedge_pos_b_X_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %pos_b_X.0 = phi i32 [ undef, %0 ], [ %pos_b_X.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_b_X_0_reg <= main__backedge_pos_b_X_0;
if (reset == 1'b0 && ^(main__backedge_pos_b_X_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_pos_b_X_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %pos_b_X.0 = phi i32 [ undef, %0 ], [ %pos_b_X.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_b_X_0_reg <= main__backedge_pos_b_X_0;
if (reset == 1'b0 && ^(main__backedge_pos_b_X_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_pos_b_X_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %pos_a_Y.0 = phi i32 [ undef, %0 ], [ %pos_a_Y.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_a_Y_0 = 0;
end
/* main: %.backedge*/
/*   %pos_a_Y.0 = phi i32 [ undef, %0 ], [ %pos_a_Y.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_pos_a_Y_0 = main__backedge_backedge_pos_a_Y_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %pos_a_Y.0 = phi i32 [ undef, %0 ], [ %pos_a_Y.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_a_Y_0_reg <= main__backedge_pos_a_Y_0;
if (reset == 1'b0 && ^(main__backedge_pos_a_Y_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_pos_a_Y_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %pos_a_Y.0 = phi i32 [ undef, %0 ], [ %pos_a_Y.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_a_Y_0_reg <= main__backedge_pos_a_Y_0;
if (reset == 1'b0 && ^(main__backedge_pos_a_Y_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_pos_a_Y_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %pos_a_X.0 = phi i32 [ undef, %0 ], [ %pos_a_X.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_a_X_0 = 0;
end
/* main: %.backedge*/
/*   %pos_a_X.0 = phi i32 [ undef, %0 ], [ %pos_a_X.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_pos_a_X_0 = main__backedge_backedge_pos_a_X_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %pos_a_X.0 = phi i32 [ undef, %0 ], [ %pos_a_X.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_a_X_0_reg <= main__backedge_pos_a_X_0;
if (reset == 1'b0 && ^(main__backedge_pos_a_X_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_pos_a_X_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %pos_a_X.0 = phi i32 [ undef, %0 ], [ %pos_a_X.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_a_X_0_reg <= main__backedge_pos_a_X_0;
if (reset == 1'b0 && ^(main__backedge_pos_a_X_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_pos_a_X_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %j.0 = phi i32 [ undef, %0 ], [ %j.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_j_0 = 0;
end
/* main: %.backedge*/
/*   %j.0 = phi i32 [ undef, %0 ], [ %j.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_j_0 = main__backedge_backedge_j_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %j.0 = phi i32 [ undef, %0 ], [ %j.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_j_0_reg <= main__backedge_j_0;
if (reset == 1'b0 && ^(main__backedge_j_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_j_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %j.0 = phi i32 [ undef, %0 ], [ %j.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_j_0_reg <= main__backedge_j_0;
if (reset == 1'b0 && ^(main__backedge_j_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_j_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %i.0 = phi i32 [ undef, %0 ], [ %i.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_i_0 = 0;
end
/* main: %.backedge*/
/*   %i.0 = phi i32 [ undef, %0 ], [ %i.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_i_0 = main__backedge_backedge_i_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %i.0 = phi i32 [ undef, %0 ], [ %i.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_i_0_reg <= main__backedge_i_0;
if (reset == 1'b0 && ^(main__backedge_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %i.0 = phi i32 [ undef, %0 ], [ %i.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_i_0_reg <= main__backedge_i_0;
if (reset == 1'b0 && ^(main__backedge_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %state.0 = phi i32 [ 0, %0 ], [ %state.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_state_0 = 32'd0;
end
/* main: %.backedge*/
/*   %state.0 = phi i32 [ 0, %0 ], [ %state.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_state_0 = main__backedge_backedge_state_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %state.0 = phi i32 [ 0, %0 ], [ %state.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_state_0_reg <= main__backedge_state_0;
if (reset == 1'b0 && ^(main__backedge_state_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_state_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %state.0 = phi i32 [ 0, %0 ], [ %state.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_state_0_reg <= main__backedge_state_0;
if (reset == 1'b0 && ^(main__backedge_state_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_state_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %sum_1hop.0 = phi i32 [ 0, %0 ], [ %sum_1hop.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_sum_1hop_0 = 32'd0;
end
/* main: %.backedge*/
/*   %sum_1hop.0 = phi i32 [ 0, %0 ], [ %sum_1hop.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_sum_1hop_0 = main__backedge_backedge_sum_1hop_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %sum_1hop.0 = phi i32 [ 0, %0 ], [ %sum_1hop.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_sum_1hop_0_reg <= main__backedge_sum_1hop_0;
if (reset == 1'b0 && ^(main__backedge_sum_1hop_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_sum_1hop_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %sum_1hop.0 = phi i32 [ 0, %0 ], [ %sum_1hop.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_sum_1hop_0_reg <= main__backedge_sum_1hop_0;
if (reset == 1'b0 && ^(main__backedge_sum_1hop_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_sum_1hop_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %239, %218 ], [ %sum.0, %189 ], [ %sum.0, %204 ], [ %sum.0, %215 ], [ %sum.0, %143 ], [ %sum.0, %.backedge ], [ %sum.0, %144 ], [ %sum.0, %146 ], [ %sum.0, %158 ], [ %sum.0, %185 ], [ %sum.0, %212 ], [ %sum.0, %216 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %239, %218 ], [ %sum.0, %189 ], [ %sum.0, %204 ], [ %sum.0, %215 ], [ %sum.0, %143 ], [ %sum.0, %.backedge ], [ %sum.0, %144 ], [ %sum.0, %146 ], [ %sum.0, %158 ], [ %sum.0, %185 ], [ %sum.0, %212 ], [ %sum.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_143_32) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %239, %218 ], [ %sum.0, %189 ], [ %sum.0, %204 ], [ %sum.0, %215 ], [ %sum.0, %143 ], [ %sum.0, %.backedge ], [ %sum.0, %144 ], [ %sum.0, %146 ], [ %sum.0, %158 ], [ %sum.0, %185 ], [ %sum.0, %212 ], [ %sum.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_144_33) & (memory_controller_waitrequest == 1'd0)) & (main_144_145 == 1'd1)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %239, %218 ], [ %sum.0, %189 ], [ %sum.0, %204 ], [ %sum.0, %215 ], [ %sum.0, %143 ], [ %sum.0, %.backedge ], [ %sum.0, %144 ], [ %sum.0, %146 ], [ %sum.0, %158 ], [ %sum.0, %185 ], [ %sum.0, %212 ], [ %sum.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_146_36) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %239, %218 ], [ %sum.0, %189 ], [ %sum.0, %204 ], [ %sum.0, %215 ], [ %sum.0, %143 ], [ %sum.0, %.backedge ], [ %sum.0, %144 ], [ %sum.0, %146 ], [ %sum.0, %158 ], [ %sum.0, %185 ], [ %sum.0, %212 ], [ %sum.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_158_37) & (memory_controller_waitrequest == 1'd0)) & (main_158_159 == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %239, %218 ], [ %sum.0, %189 ], [ %sum.0, %204 ], [ %sum.0, %215 ], [ %sum.0, %143 ], [ %sum.0, %.backedge ], [ %sum.0, %144 ], [ %sum.0, %146 ], [ %sum.0, %158 ], [ %sum.0, %185 ], [ %sum.0, %212 ], [ %sum.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_185_48) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %239, %218 ], [ %sum.0, %189 ], [ %sum.0, %204 ], [ %sum.0, %215 ], [ %sum.0, %143 ], [ %sum.0, %.backedge ], [ %sum.0, %144 ], [ %sum.0, %146 ], [ %sum.0, %158 ], [ %sum.0, %185 ], [ %sum.0, %212 ], [ %sum.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_189_50) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %239, %218 ], [ %sum.0, %189 ], [ %sum.0, %204 ], [ %sum.0, %215 ], [ %sum.0, %143 ], [ %sum.0, %.backedge ], [ %sum.0, %144 ], [ %sum.0, %146 ], [ %sum.0, %158 ], [ %sum.0, %185 ], [ %sum.0, %212 ], [ %sum.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_204_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %239, %218 ], [ %sum.0, %189 ], [ %sum.0, %204 ], [ %sum.0, %215 ], [ %sum.0, %143 ], [ %sum.0, %.backedge ], [ %sum.0, %144 ], [ %sum.0, %146 ], [ %sum.0, %158 ], [ %sum.0, %185 ], [ %sum.0, %212 ], [ %sum.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_212_60) & (memory_controller_waitrequest == 1'd0)) & (main_187_188_reg == 1'd1)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %239, %218 ], [ %sum.0, %189 ], [ %sum.0, %204 ], [ %sum.0, %215 ], [ %sum.0, %143 ], [ %sum.0, %.backedge ], [ %sum.0, %144 ], [ %sum.0, %146 ], [ %sum.0, %158 ], [ %sum.0, %185 ], [ %sum.0, %212 ], [ %sum.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_215_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %239, %218 ], [ %sum.0, %189 ], [ %sum.0, %204 ], [ %sum.0, %215 ], [ %sum.0, %143 ], [ %sum.0, %.backedge ], [ %sum.0, %144 ], [ %sum.0, %146 ], [ %sum.0, %158 ], [ %sum.0, %185 ], [ %sum.0, %212 ], [ %sum.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_216_62) & (memory_controller_waitrequest == 1'd0)) & (main_216_217 == 1'd1)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %239, %218 ], [ %sum.0, %189 ], [ %sum.0, %204 ], [ %sum.0, %215 ], [ %sum.0, %143 ], [ %sum.0, %.backedge ], [ %sum.0, %144 ], [ %sum.0, %146 ], [ %sum.0, %158 ], [ %sum.0, %185 ], [ %sum.0, %212 ], [ %sum.0, %216 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_218_98) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_sum_0_be = main_218_239_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %239, %218 ], [ %sum.0, %189 ], [ %sum.0, %204 ], [ %sum.0, %215 ], [ %sum.0, %143 ], [ %sum.0, %.backedge ], [ %sum.0, %144 ], [ %sum.0, %146 ], [ %sum.0, %158 ], [ %sum.0, %185 ], [ %sum.0, %212 ], [ %sum.0, %216 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %239, %218 ], [ %sum.0, %189 ], [ %sum.0, %204 ], [ %sum.0, %215 ], [ %sum.0, %143 ], [ %sum.0, %.backedge ], [ %sum.0, %144 ], [ %sum.0, %146 ], [ %sum.0, %158 ], [ %sum.0, %185 ], [ %sum.0, %212 ], [ %sum.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_143_32) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %239, %218 ], [ %sum.0, %189 ], [ %sum.0, %204 ], [ %sum.0, %215 ], [ %sum.0, %143 ], [ %sum.0, %.backedge ], [ %sum.0, %144 ], [ %sum.0, %146 ], [ %sum.0, %158 ], [ %sum.0, %185 ], [ %sum.0, %212 ], [ %sum.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_144_33) & (memory_controller_waitrequest == 1'd0)) & (main_144_145 == 1'd1)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %239, %218 ], [ %sum.0, %189 ], [ %sum.0, %204 ], [ %sum.0, %215 ], [ %sum.0, %143 ], [ %sum.0, %.backedge ], [ %sum.0, %144 ], [ %sum.0, %146 ], [ %sum.0, %158 ], [ %sum.0, %185 ], [ %sum.0, %212 ], [ %sum.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_146_36) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %239, %218 ], [ %sum.0, %189 ], [ %sum.0, %204 ], [ %sum.0, %215 ], [ %sum.0, %143 ], [ %sum.0, %.backedge ], [ %sum.0, %144 ], [ %sum.0, %146 ], [ %sum.0, %158 ], [ %sum.0, %185 ], [ %sum.0, %212 ], [ %sum.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_158_37) & (memory_controller_waitrequest == 1'd0)) & (main_158_159 == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %239, %218 ], [ %sum.0, %189 ], [ %sum.0, %204 ], [ %sum.0, %215 ], [ %sum.0, %143 ], [ %sum.0, %.backedge ], [ %sum.0, %144 ], [ %sum.0, %146 ], [ %sum.0, %158 ], [ %sum.0, %185 ], [ %sum.0, %212 ], [ %sum.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_185_48) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %239, %218 ], [ %sum.0, %189 ], [ %sum.0, %204 ], [ %sum.0, %215 ], [ %sum.0, %143 ], [ %sum.0, %.backedge ], [ %sum.0, %144 ], [ %sum.0, %146 ], [ %sum.0, %158 ], [ %sum.0, %185 ], [ %sum.0, %212 ], [ %sum.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_189_50) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %239, %218 ], [ %sum.0, %189 ], [ %sum.0, %204 ], [ %sum.0, %215 ], [ %sum.0, %143 ], [ %sum.0, %.backedge ], [ %sum.0, %144 ], [ %sum.0, %146 ], [ %sum.0, %158 ], [ %sum.0, %185 ], [ %sum.0, %212 ], [ %sum.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_204_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %239, %218 ], [ %sum.0, %189 ], [ %sum.0, %204 ], [ %sum.0, %215 ], [ %sum.0, %143 ], [ %sum.0, %.backedge ], [ %sum.0, %144 ], [ %sum.0, %146 ], [ %sum.0, %158 ], [ %sum.0, %185 ], [ %sum.0, %212 ], [ %sum.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_212_60) & (memory_controller_waitrequest == 1'd0)) & (main_187_188_reg == 1'd1)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %239, %218 ], [ %sum.0, %189 ], [ %sum.0, %204 ], [ %sum.0, %215 ], [ %sum.0, %143 ], [ %sum.0, %.backedge ], [ %sum.0, %144 ], [ %sum.0, %146 ], [ %sum.0, %158 ], [ %sum.0, %185 ], [ %sum.0, %212 ], [ %sum.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_215_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %239, %218 ], [ %sum.0, %189 ], [ %sum.0, %204 ], [ %sum.0, %215 ], [ %sum.0, %143 ], [ %sum.0, %.backedge ], [ %sum.0, %144 ], [ %sum.0, %146 ], [ %sum.0, %158 ], [ %sum.0, %185 ], [ %sum.0, %212 ], [ %sum.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_216_62) & (memory_controller_waitrequest == 1'd0)) & (main_216_217 == 1'd1)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %239, %218 ], [ %sum.0, %189 ], [ %sum.0, %204 ], [ %sum.0, %215 ], [ %sum.0, %143 ], [ %sum.0, %.backedge ], [ %sum.0, %144 ], [ %sum.0, %146 ], [ %sum.0, %158 ], [ %sum.0, %185 ], [ %sum.0, %212 ], [ %sum.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_218_98) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %222, %218 ], [ %b.0, %189 ], [ %b.0, %204 ], [ %b.0, %215 ], [ %b.0, %143 ], [ %b.0, %.backedge ], [ %b.0, %144 ], [ %150, %146 ], [ %b.0, %158 ], [ %b.0, %185 ], [ %b.0, %212 ], [ %b.0, %216 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %222, %218 ], [ %b.0, %189 ], [ %b.0, %204 ], [ %b.0, %215 ], [ %b.0, %143 ], [ %b.0, %.backedge ], [ %b.0, %144 ], [ %150, %146 ], [ %b.0, %158 ], [ %b.0, %185 ], [ %b.0, %212 ], [ %b.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_143_32) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %222, %218 ], [ %b.0, %189 ], [ %b.0, %204 ], [ %b.0, %215 ], [ %b.0, %143 ], [ %b.0, %.backedge ], [ %b.0, %144 ], [ %150, %146 ], [ %b.0, %158 ], [ %b.0, %185 ], [ %b.0, %212 ], [ %b.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_144_33) & (memory_controller_waitrequest == 1'd0)) & (main_144_145 == 1'd1)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %222, %218 ], [ %b.0, %189 ], [ %b.0, %204 ], [ %b.0, %215 ], [ %b.0, %143 ], [ %b.0, %.backedge ], [ %b.0, %144 ], [ %150, %146 ], [ %b.0, %158 ], [ %b.0, %185 ], [ %b.0, %212 ], [ %b.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_146_36) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be = main_146_150_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %222, %218 ], [ %b.0, %189 ], [ %b.0, %204 ], [ %b.0, %215 ], [ %b.0, %143 ], [ %b.0, %.backedge ], [ %b.0, %144 ], [ %150, %146 ], [ %b.0, %158 ], [ %b.0, %185 ], [ %b.0, %212 ], [ %b.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_158_37) & (memory_controller_waitrequest == 1'd0)) & (main_158_159 == 1'd0)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %222, %218 ], [ %b.0, %189 ], [ %b.0, %204 ], [ %b.0, %215 ], [ %b.0, %143 ], [ %b.0, %.backedge ], [ %b.0, %144 ], [ %150, %146 ], [ %b.0, %158 ], [ %b.0, %185 ], [ %b.0, %212 ], [ %b.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_185_48) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %222, %218 ], [ %b.0, %189 ], [ %b.0, %204 ], [ %b.0, %215 ], [ %b.0, %143 ], [ %b.0, %.backedge ], [ %b.0, %144 ], [ %150, %146 ], [ %b.0, %158 ], [ %b.0, %185 ], [ %b.0, %212 ], [ %b.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_189_50) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %222, %218 ], [ %b.0, %189 ], [ %b.0, %204 ], [ %b.0, %215 ], [ %b.0, %143 ], [ %b.0, %.backedge ], [ %b.0, %144 ], [ %150, %146 ], [ %b.0, %158 ], [ %b.0, %185 ], [ %b.0, %212 ], [ %b.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_204_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %222, %218 ], [ %b.0, %189 ], [ %b.0, %204 ], [ %b.0, %215 ], [ %b.0, %143 ], [ %b.0, %.backedge ], [ %b.0, %144 ], [ %150, %146 ], [ %b.0, %158 ], [ %b.0, %185 ], [ %b.0, %212 ], [ %b.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_212_60) & (memory_controller_waitrequest == 1'd0)) & (main_187_188_reg == 1'd1)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %222, %218 ], [ %b.0, %189 ], [ %b.0, %204 ], [ %b.0, %215 ], [ %b.0, %143 ], [ %b.0, %.backedge ], [ %b.0, %144 ], [ %150, %146 ], [ %b.0, %158 ], [ %b.0, %185 ], [ %b.0, %212 ], [ %b.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_215_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %222, %218 ], [ %b.0, %189 ], [ %b.0, %204 ], [ %b.0, %215 ], [ %b.0, %143 ], [ %b.0, %.backedge ], [ %b.0, %144 ], [ %150, %146 ], [ %b.0, %158 ], [ %b.0, %185 ], [ %b.0, %212 ], [ %b.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_216_62) & (memory_controller_waitrequest == 1'd0)) & (main_216_217 == 1'd1)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %222, %218 ], [ %b.0, %189 ], [ %b.0, %204 ], [ %b.0, %215 ], [ %b.0, %143 ], [ %b.0, %.backedge ], [ %b.0, %144 ], [ %150, %146 ], [ %b.0, %158 ], [ %b.0, %185 ], [ %b.0, %212 ], [ %b.0, %216 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_218_98) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_b_0_be = main_218_222_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %222, %218 ], [ %b.0, %189 ], [ %b.0, %204 ], [ %b.0, %215 ], [ %b.0, %143 ], [ %b.0, %.backedge ], [ %b.0, %144 ], [ %150, %146 ], [ %b.0, %158 ], [ %b.0, %185 ], [ %b.0, %212 ], [ %b.0, %216 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %222, %218 ], [ %b.0, %189 ], [ %b.0, %204 ], [ %b.0, %215 ], [ %b.0, %143 ], [ %b.0, %.backedge ], [ %b.0, %144 ], [ %150, %146 ], [ %b.0, %158 ], [ %b.0, %185 ], [ %b.0, %212 ], [ %b.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_143_32) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %222, %218 ], [ %b.0, %189 ], [ %b.0, %204 ], [ %b.0, %215 ], [ %b.0, %143 ], [ %b.0, %.backedge ], [ %b.0, %144 ], [ %150, %146 ], [ %b.0, %158 ], [ %b.0, %185 ], [ %b.0, %212 ], [ %b.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_144_33) & (memory_controller_waitrequest == 1'd0)) & (main_144_145 == 1'd1)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %222, %218 ], [ %b.0, %189 ], [ %b.0, %204 ], [ %b.0, %215 ], [ %b.0, %143 ], [ %b.0, %.backedge ], [ %b.0, %144 ], [ %150, %146 ], [ %b.0, %158 ], [ %b.0, %185 ], [ %b.0, %212 ], [ %b.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_146_36) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %222, %218 ], [ %b.0, %189 ], [ %b.0, %204 ], [ %b.0, %215 ], [ %b.0, %143 ], [ %b.0, %.backedge ], [ %b.0, %144 ], [ %150, %146 ], [ %b.0, %158 ], [ %b.0, %185 ], [ %b.0, %212 ], [ %b.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_158_37) & (memory_controller_waitrequest == 1'd0)) & (main_158_159 == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %222, %218 ], [ %b.0, %189 ], [ %b.0, %204 ], [ %b.0, %215 ], [ %b.0, %143 ], [ %b.0, %.backedge ], [ %b.0, %144 ], [ %150, %146 ], [ %b.0, %158 ], [ %b.0, %185 ], [ %b.0, %212 ], [ %b.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_185_48) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %222, %218 ], [ %b.0, %189 ], [ %b.0, %204 ], [ %b.0, %215 ], [ %b.0, %143 ], [ %b.0, %.backedge ], [ %b.0, %144 ], [ %150, %146 ], [ %b.0, %158 ], [ %b.0, %185 ], [ %b.0, %212 ], [ %b.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_189_50) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %222, %218 ], [ %b.0, %189 ], [ %b.0, %204 ], [ %b.0, %215 ], [ %b.0, %143 ], [ %b.0, %.backedge ], [ %b.0, %144 ], [ %150, %146 ], [ %b.0, %158 ], [ %b.0, %185 ], [ %b.0, %212 ], [ %b.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_204_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %222, %218 ], [ %b.0, %189 ], [ %b.0, %204 ], [ %b.0, %215 ], [ %b.0, %143 ], [ %b.0, %.backedge ], [ %b.0, %144 ], [ %150, %146 ], [ %b.0, %158 ], [ %b.0, %185 ], [ %b.0, %212 ], [ %b.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_212_60) & (memory_controller_waitrequest == 1'd0)) & (main_187_188_reg == 1'd1)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %222, %218 ], [ %b.0, %189 ], [ %b.0, %204 ], [ %b.0, %215 ], [ %b.0, %143 ], [ %b.0, %.backedge ], [ %b.0, %144 ], [ %150, %146 ], [ %b.0, %158 ], [ %b.0, %185 ], [ %b.0, %212 ], [ %b.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_215_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %222, %218 ], [ %b.0, %189 ], [ %b.0, %204 ], [ %b.0, %215 ], [ %b.0, %143 ], [ %b.0, %.backedge ], [ %b.0, %144 ], [ %150, %146 ], [ %b.0, %158 ], [ %b.0, %185 ], [ %b.0, %212 ], [ %b.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_216_62) & (memory_controller_waitrequest == 1'd0)) & (main_216_217 == 1'd1)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %222, %218 ], [ %b.0, %189 ], [ %b.0, %204 ], [ %b.0, %215 ], [ %b.0, %143 ], [ %b.0, %.backedge ], [ %b.0, %144 ], [ %150, %146 ], [ %b.0, %158 ], [ %b.0, %185 ], [ %b.0, %212 ], [ %b.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_218_98) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %220, %218 ], [ %a.0, %189 ], [ %a.0, %204 ], [ %a.0, %215 ], [ 0, %143 ], [ %a.0, %.backedge ], [ %a.0, %144 ], [ %148, %146 ], [ %a.0, %158 ], [ %a.0, %185 ], [ %a.0, %212 ], [ %a.0, %216 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %220, %218 ], [ %a.0, %189 ], [ %a.0, %204 ], [ %a.0, %215 ], [ 0, %143 ], [ %a.0, %.backedge ], [ %a.0, %144 ], [ %148, %146 ], [ %a.0, %158 ], [ %a.0, %185 ], [ %a.0, %212 ], [ %a.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_143_32) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %220, %218 ], [ %a.0, %189 ], [ %a.0, %204 ], [ %a.0, %215 ], [ 0, %143 ], [ %a.0, %.backedge ], [ %a.0, %144 ], [ %148, %146 ], [ %a.0, %158 ], [ %a.0, %185 ], [ %a.0, %212 ], [ %a.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_144_33) & (memory_controller_waitrequest == 1'd0)) & (main_144_145 == 1'd1)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %220, %218 ], [ %a.0, %189 ], [ %a.0, %204 ], [ %a.0, %215 ], [ 0, %143 ], [ %a.0, %.backedge ], [ %a.0, %144 ], [ %148, %146 ], [ %a.0, %158 ], [ %a.0, %185 ], [ %a.0, %212 ], [ %a.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_146_36) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be = main_146_148_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %220, %218 ], [ %a.0, %189 ], [ %a.0, %204 ], [ %a.0, %215 ], [ 0, %143 ], [ %a.0, %.backedge ], [ %a.0, %144 ], [ %148, %146 ], [ %a.0, %158 ], [ %a.0, %185 ], [ %a.0, %212 ], [ %a.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_158_37) & (memory_controller_waitrequest == 1'd0)) & (main_158_159 == 1'd0)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %220, %218 ], [ %a.0, %189 ], [ %a.0, %204 ], [ %a.0, %215 ], [ 0, %143 ], [ %a.0, %.backedge ], [ %a.0, %144 ], [ %148, %146 ], [ %a.0, %158 ], [ %a.0, %185 ], [ %a.0, %212 ], [ %a.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_185_48) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %220, %218 ], [ %a.0, %189 ], [ %a.0, %204 ], [ %a.0, %215 ], [ 0, %143 ], [ %a.0, %.backedge ], [ %a.0, %144 ], [ %148, %146 ], [ %a.0, %158 ], [ %a.0, %185 ], [ %a.0, %212 ], [ %a.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_189_50) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %220, %218 ], [ %a.0, %189 ], [ %a.0, %204 ], [ %a.0, %215 ], [ 0, %143 ], [ %a.0, %.backedge ], [ %a.0, %144 ], [ %148, %146 ], [ %a.0, %158 ], [ %a.0, %185 ], [ %a.0, %212 ], [ %a.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_204_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %220, %218 ], [ %a.0, %189 ], [ %a.0, %204 ], [ %a.0, %215 ], [ 0, %143 ], [ %a.0, %.backedge ], [ %a.0, %144 ], [ %148, %146 ], [ %a.0, %158 ], [ %a.0, %185 ], [ %a.0, %212 ], [ %a.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_212_60) & (memory_controller_waitrequest == 1'd0)) & (main_187_188_reg == 1'd1)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %220, %218 ], [ %a.0, %189 ], [ %a.0, %204 ], [ %a.0, %215 ], [ 0, %143 ], [ %a.0, %.backedge ], [ %a.0, %144 ], [ %148, %146 ], [ %a.0, %158 ], [ %a.0, %185 ], [ %a.0, %212 ], [ %a.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_215_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %220, %218 ], [ %a.0, %189 ], [ %a.0, %204 ], [ %a.0, %215 ], [ 0, %143 ], [ %a.0, %.backedge ], [ %a.0, %144 ], [ %148, %146 ], [ %a.0, %158 ], [ %a.0, %185 ], [ %a.0, %212 ], [ %a.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_216_62) & (memory_controller_waitrequest == 1'd0)) & (main_216_217 == 1'd1)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %220, %218 ], [ %a.0, %189 ], [ %a.0, %204 ], [ %a.0, %215 ], [ 0, %143 ], [ %a.0, %.backedge ], [ %a.0, %144 ], [ %148, %146 ], [ %a.0, %158 ], [ %a.0, %185 ], [ %a.0, %212 ], [ %a.0, %216 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_218_98) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_a_0_be = main_218_220_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %220, %218 ], [ %a.0, %189 ], [ %a.0, %204 ], [ %a.0, %215 ], [ 0, %143 ], [ %a.0, %.backedge ], [ %a.0, %144 ], [ %148, %146 ], [ %a.0, %158 ], [ %a.0, %185 ], [ %a.0, %212 ], [ %a.0, %216 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %220, %218 ], [ %a.0, %189 ], [ %a.0, %204 ], [ %a.0, %215 ], [ 0, %143 ], [ %a.0, %.backedge ], [ %a.0, %144 ], [ %148, %146 ], [ %a.0, %158 ], [ %a.0, %185 ], [ %a.0, %212 ], [ %a.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_143_32) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %220, %218 ], [ %a.0, %189 ], [ %a.0, %204 ], [ %a.0, %215 ], [ 0, %143 ], [ %a.0, %.backedge ], [ %a.0, %144 ], [ %148, %146 ], [ %a.0, %158 ], [ %a.0, %185 ], [ %a.0, %212 ], [ %a.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_144_33) & (memory_controller_waitrequest == 1'd0)) & (main_144_145 == 1'd1)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %220, %218 ], [ %a.0, %189 ], [ %a.0, %204 ], [ %a.0, %215 ], [ 0, %143 ], [ %a.0, %.backedge ], [ %a.0, %144 ], [ %148, %146 ], [ %a.0, %158 ], [ %a.0, %185 ], [ %a.0, %212 ], [ %a.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_146_36) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %220, %218 ], [ %a.0, %189 ], [ %a.0, %204 ], [ %a.0, %215 ], [ 0, %143 ], [ %a.0, %.backedge ], [ %a.0, %144 ], [ %148, %146 ], [ %a.0, %158 ], [ %a.0, %185 ], [ %a.0, %212 ], [ %a.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_158_37) & (memory_controller_waitrequest == 1'd0)) & (main_158_159 == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %220, %218 ], [ %a.0, %189 ], [ %a.0, %204 ], [ %a.0, %215 ], [ 0, %143 ], [ %a.0, %.backedge ], [ %a.0, %144 ], [ %148, %146 ], [ %a.0, %158 ], [ %a.0, %185 ], [ %a.0, %212 ], [ %a.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_185_48) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %220, %218 ], [ %a.0, %189 ], [ %a.0, %204 ], [ %a.0, %215 ], [ 0, %143 ], [ %a.0, %.backedge ], [ %a.0, %144 ], [ %148, %146 ], [ %a.0, %158 ], [ %a.0, %185 ], [ %a.0, %212 ], [ %a.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_189_50) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %220, %218 ], [ %a.0, %189 ], [ %a.0, %204 ], [ %a.0, %215 ], [ 0, %143 ], [ %a.0, %.backedge ], [ %a.0, %144 ], [ %148, %146 ], [ %a.0, %158 ], [ %a.0, %185 ], [ %a.0, %212 ], [ %a.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_204_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %220, %218 ], [ %a.0, %189 ], [ %a.0, %204 ], [ %a.0, %215 ], [ 0, %143 ], [ %a.0, %.backedge ], [ %a.0, %144 ], [ %148, %146 ], [ %a.0, %158 ], [ %a.0, %185 ], [ %a.0, %212 ], [ %a.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_212_60) & (memory_controller_waitrequest == 1'd0)) & (main_187_188_reg == 1'd1)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %220, %218 ], [ %a.0, %189 ], [ %a.0, %204 ], [ %a.0, %215 ], [ 0, %143 ], [ %a.0, %.backedge ], [ %a.0, %144 ], [ %148, %146 ], [ %a.0, %158 ], [ %a.0, %185 ], [ %a.0, %212 ], [ %a.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_215_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %220, %218 ], [ %a.0, %189 ], [ %a.0, %204 ], [ %a.0, %215 ], [ 0, %143 ], [ %a.0, %.backedge ], [ %a.0, %144 ], [ %148, %146 ], [ %a.0, %158 ], [ %a.0, %185 ], [ %a.0, %212 ], [ %a.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_216_62) & (memory_controller_waitrequest == 1'd0)) & (main_216_217 == 1'd1)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %220, %218 ], [ %a.0, %189 ], [ %a.0, %204 ], [ %a.0, %215 ], [ 0, %143 ], [ %a.0, %.backedge ], [ %a.0, %144 ], [ %148, %146 ], [ %a.0, %158 ], [ %a.0, %185 ], [ %a.0, %212 ], [ %a.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_218_98) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %189 ], [ %194, %204 ], [ %pos_b_X.0, %215 ], [ %pos_b_X.0, %143 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %144 ], [ %156, %146 ], [ %pos_b_X.0, %158 ], [ %pos_b_X.0, %185 ], [ -1, %212 ], [ %pos_b_X.0, %216 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %189 ], [ %194, %204 ], [ %pos_b_X.0, %215 ], [ %pos_b_X.0, %143 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %144 ], [ %156, %146 ], [ %pos_b_X.0, %158 ], [ %pos_b_X.0, %185 ], [ -1, %212 ], [ %pos_b_X.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_143_32) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %189 ], [ %194, %204 ], [ %pos_b_X.0, %215 ], [ %pos_b_X.0, %143 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %144 ], [ %156, %146 ], [ %pos_b_X.0, %158 ], [ %pos_b_X.0, %185 ], [ -1, %212 ], [ %pos_b_X.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_144_33) & (memory_controller_waitrequest == 1'd0)) & (main_144_145 == 1'd1)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %189 ], [ %194, %204 ], [ %pos_b_X.0, %215 ], [ %pos_b_X.0, %143 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %144 ], [ %156, %146 ], [ %pos_b_X.0, %158 ], [ %pos_b_X.0, %185 ], [ -1, %212 ], [ %pos_b_X.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_146_36) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main_146_156;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %189 ], [ %194, %204 ], [ %pos_b_X.0, %215 ], [ %pos_b_X.0, %143 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %144 ], [ %156, %146 ], [ %pos_b_X.0, %158 ], [ %pos_b_X.0, %185 ], [ -1, %212 ], [ %pos_b_X.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_158_37) & (memory_controller_waitrequest == 1'd0)) & (main_158_159 == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %189 ], [ %194, %204 ], [ %pos_b_X.0, %215 ], [ %pos_b_X.0, %143 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %144 ], [ %156, %146 ], [ %pos_b_X.0, %158 ], [ %pos_b_X.0, %185 ], [ -1, %212 ], [ %pos_b_X.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_185_48) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %189 ], [ %194, %204 ], [ %pos_b_X.0, %215 ], [ %pos_b_X.0, %143 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %144 ], [ %156, %146 ], [ %pos_b_X.0, %158 ], [ %pos_b_X.0, %185 ], [ -1, %212 ], [ %pos_b_X.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_189_50) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %189 ], [ %194, %204 ], [ %pos_b_X.0, %215 ], [ %pos_b_X.0, %143 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %144 ], [ %156, %146 ], [ %pos_b_X.0, %158 ], [ %pos_b_X.0, %185 ], [ -1, %212 ], [ %pos_b_X.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_204_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main_191_194_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %189 ], [ %194, %204 ], [ %pos_b_X.0, %215 ], [ %pos_b_X.0, %143 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %144 ], [ %156, %146 ], [ %pos_b_X.0, %158 ], [ %pos_b_X.0, %185 ], [ -1, %212 ], [ %pos_b_X.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_212_60) & (memory_controller_waitrequest == 1'd0)) & (main_187_188_reg == 1'd1)))
begin
main__backedge_backedge_pos_b_X_0_be = -32'd1;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %189 ], [ %194, %204 ], [ %pos_b_X.0, %215 ], [ %pos_b_X.0, %143 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %144 ], [ %156, %146 ], [ %pos_b_X.0, %158 ], [ %pos_b_X.0, %185 ], [ -1, %212 ], [ %pos_b_X.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_215_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %189 ], [ %194, %204 ], [ %pos_b_X.0, %215 ], [ %pos_b_X.0, %143 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %144 ], [ %156, %146 ], [ %pos_b_X.0, %158 ], [ %pos_b_X.0, %185 ], [ -1, %212 ], [ %pos_b_X.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_216_62) & (memory_controller_waitrequest == 1'd0)) & (main_216_217 == 1'd1)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %189 ], [ %194, %204 ], [ %pos_b_X.0, %215 ], [ %pos_b_X.0, %143 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %144 ], [ %156, %146 ], [ %pos_b_X.0, %158 ], [ %pos_b_X.0, %185 ], [ -1, %212 ], [ %pos_b_X.0, %216 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_218_98) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %189 ], [ %194, %204 ], [ %pos_b_X.0, %215 ], [ %pos_b_X.0, %143 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %144 ], [ %156, %146 ], [ %pos_b_X.0, %158 ], [ %pos_b_X.0, %185 ], [ -1, %212 ], [ %pos_b_X.0, %216 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %189 ], [ %194, %204 ], [ %pos_b_X.0, %215 ], [ %pos_b_X.0, %143 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %144 ], [ %156, %146 ], [ %pos_b_X.0, %158 ], [ %pos_b_X.0, %185 ], [ -1, %212 ], [ %pos_b_X.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_143_32) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %189 ], [ %194, %204 ], [ %pos_b_X.0, %215 ], [ %pos_b_X.0, %143 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %144 ], [ %156, %146 ], [ %pos_b_X.0, %158 ], [ %pos_b_X.0, %185 ], [ -1, %212 ], [ %pos_b_X.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_144_33) & (memory_controller_waitrequest == 1'd0)) & (main_144_145 == 1'd1)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %189 ], [ %194, %204 ], [ %pos_b_X.0, %215 ], [ %pos_b_X.0, %143 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %144 ], [ %156, %146 ], [ %pos_b_X.0, %158 ], [ %pos_b_X.0, %185 ], [ -1, %212 ], [ %pos_b_X.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_146_36) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %189 ], [ %194, %204 ], [ %pos_b_X.0, %215 ], [ %pos_b_X.0, %143 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %144 ], [ %156, %146 ], [ %pos_b_X.0, %158 ], [ %pos_b_X.0, %185 ], [ -1, %212 ], [ %pos_b_X.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_158_37) & (memory_controller_waitrequest == 1'd0)) & (main_158_159 == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %189 ], [ %194, %204 ], [ %pos_b_X.0, %215 ], [ %pos_b_X.0, %143 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %144 ], [ %156, %146 ], [ %pos_b_X.0, %158 ], [ %pos_b_X.0, %185 ], [ -1, %212 ], [ %pos_b_X.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_185_48) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %189 ], [ %194, %204 ], [ %pos_b_X.0, %215 ], [ %pos_b_X.0, %143 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %144 ], [ %156, %146 ], [ %pos_b_X.0, %158 ], [ %pos_b_X.0, %185 ], [ -1, %212 ], [ %pos_b_X.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_189_50) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %189 ], [ %194, %204 ], [ %pos_b_X.0, %215 ], [ %pos_b_X.0, %143 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %144 ], [ %156, %146 ], [ %pos_b_X.0, %158 ], [ %pos_b_X.0, %185 ], [ -1, %212 ], [ %pos_b_X.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_204_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %189 ], [ %194, %204 ], [ %pos_b_X.0, %215 ], [ %pos_b_X.0, %143 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %144 ], [ %156, %146 ], [ %pos_b_X.0, %158 ], [ %pos_b_X.0, %185 ], [ -1, %212 ], [ %pos_b_X.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_212_60) & (memory_controller_waitrequest == 1'd0)) & (main_187_188_reg == 1'd1)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %189 ], [ %194, %204 ], [ %pos_b_X.0, %215 ], [ %pos_b_X.0, %143 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %144 ], [ %156, %146 ], [ %pos_b_X.0, %158 ], [ %pos_b_X.0, %185 ], [ -1, %212 ], [ %pos_b_X.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_215_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %189 ], [ %194, %204 ], [ %pos_b_X.0, %215 ], [ %pos_b_X.0, %143 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %144 ], [ %156, %146 ], [ %pos_b_X.0, %158 ], [ %pos_b_X.0, %185 ], [ -1, %212 ], [ %pos_b_X.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_216_62) & (memory_controller_waitrequest == 1'd0)) & (main_216_217 == 1'd1)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %189 ], [ %194, %204 ], [ %pos_b_X.0, %215 ], [ %pos_b_X.0, %143 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %144 ], [ %156, %146 ], [ %pos_b_X.0, %158 ], [ %pos_b_X.0, %185 ], [ -1, %212 ], [ %pos_b_X.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_218_98) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %189 ], [ %pos_a_Y.0, %204 ], [ %pos_a_Y.0, %215 ], [ %pos_a_Y.0, %143 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %144 ], [ %154, %146 ], [ %pos_a_Y.0, %158 ], [ %pos_a_Y.1, %185 ], [ %pos_a_Y.0, %212 ], [ %pos_a_Y.0, %216 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %189 ], [ %pos_a_Y.0, %204 ], [ %pos_a_Y.0, %215 ], [ %pos_a_Y.0, %143 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %144 ], [ %154, %146 ], [ %pos_a_Y.0, %158 ], [ %pos_a_Y.1, %185 ], [ %pos_a_Y.0, %212 ], [ %pos_a_Y.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_143_32) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %189 ], [ %pos_a_Y.0, %204 ], [ %pos_a_Y.0, %215 ], [ %pos_a_Y.0, %143 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %144 ], [ %154, %146 ], [ %pos_a_Y.0, %158 ], [ %pos_a_Y.1, %185 ], [ %pos_a_Y.0, %212 ], [ %pos_a_Y.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_144_33) & (memory_controller_waitrequest == 1'd0)) & (main_144_145 == 1'd1)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %189 ], [ %pos_a_Y.0, %204 ], [ %pos_a_Y.0, %215 ], [ %pos_a_Y.0, %143 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %144 ], [ %154, %146 ], [ %pos_a_Y.0, %158 ], [ %pos_a_Y.1, %185 ], [ %pos_a_Y.0, %212 ], [ %pos_a_Y.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_146_36) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main_146_154;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %189 ], [ %pos_a_Y.0, %204 ], [ %pos_a_Y.0, %215 ], [ %pos_a_Y.0, %143 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %144 ], [ %154, %146 ], [ %pos_a_Y.0, %158 ], [ %pos_a_Y.1, %185 ], [ %pos_a_Y.0, %212 ], [ %pos_a_Y.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_158_37) & (memory_controller_waitrequest == 1'd0)) & (main_158_159 == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %189 ], [ %pos_a_Y.0, %204 ], [ %pos_a_Y.0, %215 ], [ %pos_a_Y.0, %143 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %144 ], [ %154, %146 ], [ %pos_a_Y.0, %158 ], [ %pos_a_Y.1, %185 ], [ %pos_a_Y.0, %212 ], [ %pos_a_Y.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_185_48) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main_185_pos_a_Y_1_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %189 ], [ %pos_a_Y.0, %204 ], [ %pos_a_Y.0, %215 ], [ %pos_a_Y.0, %143 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %144 ], [ %154, %146 ], [ %pos_a_Y.0, %158 ], [ %pos_a_Y.1, %185 ], [ %pos_a_Y.0, %212 ], [ %pos_a_Y.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_189_50) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %189 ], [ %pos_a_Y.0, %204 ], [ %pos_a_Y.0, %215 ], [ %pos_a_Y.0, %143 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %144 ], [ %154, %146 ], [ %pos_a_Y.0, %158 ], [ %pos_a_Y.1, %185 ], [ %pos_a_Y.0, %212 ], [ %pos_a_Y.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_204_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %189 ], [ %pos_a_Y.0, %204 ], [ %pos_a_Y.0, %215 ], [ %pos_a_Y.0, %143 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %144 ], [ %154, %146 ], [ %pos_a_Y.0, %158 ], [ %pos_a_Y.1, %185 ], [ %pos_a_Y.0, %212 ], [ %pos_a_Y.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_212_60) & (memory_controller_waitrequest == 1'd0)) & (main_187_188_reg == 1'd1)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %189 ], [ %pos_a_Y.0, %204 ], [ %pos_a_Y.0, %215 ], [ %pos_a_Y.0, %143 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %144 ], [ %154, %146 ], [ %pos_a_Y.0, %158 ], [ %pos_a_Y.1, %185 ], [ %pos_a_Y.0, %212 ], [ %pos_a_Y.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_215_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %189 ], [ %pos_a_Y.0, %204 ], [ %pos_a_Y.0, %215 ], [ %pos_a_Y.0, %143 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %144 ], [ %154, %146 ], [ %pos_a_Y.0, %158 ], [ %pos_a_Y.1, %185 ], [ %pos_a_Y.0, %212 ], [ %pos_a_Y.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_216_62) & (memory_controller_waitrequest == 1'd0)) & (main_216_217 == 1'd1)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %189 ], [ %pos_a_Y.0, %204 ], [ %pos_a_Y.0, %215 ], [ %pos_a_Y.0, %143 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %144 ], [ %154, %146 ], [ %pos_a_Y.0, %158 ], [ %pos_a_Y.1, %185 ], [ %pos_a_Y.0, %212 ], [ %pos_a_Y.0, %216 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_218_98) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %189 ], [ %pos_a_Y.0, %204 ], [ %pos_a_Y.0, %215 ], [ %pos_a_Y.0, %143 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %144 ], [ %154, %146 ], [ %pos_a_Y.0, %158 ], [ %pos_a_Y.1, %185 ], [ %pos_a_Y.0, %212 ], [ %pos_a_Y.0, %216 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %189 ], [ %pos_a_Y.0, %204 ], [ %pos_a_Y.0, %215 ], [ %pos_a_Y.0, %143 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %144 ], [ %154, %146 ], [ %pos_a_Y.0, %158 ], [ %pos_a_Y.1, %185 ], [ %pos_a_Y.0, %212 ], [ %pos_a_Y.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_143_32) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %189 ], [ %pos_a_Y.0, %204 ], [ %pos_a_Y.0, %215 ], [ %pos_a_Y.0, %143 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %144 ], [ %154, %146 ], [ %pos_a_Y.0, %158 ], [ %pos_a_Y.1, %185 ], [ %pos_a_Y.0, %212 ], [ %pos_a_Y.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_144_33) & (memory_controller_waitrequest == 1'd0)) & (main_144_145 == 1'd1)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %189 ], [ %pos_a_Y.0, %204 ], [ %pos_a_Y.0, %215 ], [ %pos_a_Y.0, %143 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %144 ], [ %154, %146 ], [ %pos_a_Y.0, %158 ], [ %pos_a_Y.1, %185 ], [ %pos_a_Y.0, %212 ], [ %pos_a_Y.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_146_36) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %189 ], [ %pos_a_Y.0, %204 ], [ %pos_a_Y.0, %215 ], [ %pos_a_Y.0, %143 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %144 ], [ %154, %146 ], [ %pos_a_Y.0, %158 ], [ %pos_a_Y.1, %185 ], [ %pos_a_Y.0, %212 ], [ %pos_a_Y.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_158_37) & (memory_controller_waitrequest == 1'd0)) & (main_158_159 == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %189 ], [ %pos_a_Y.0, %204 ], [ %pos_a_Y.0, %215 ], [ %pos_a_Y.0, %143 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %144 ], [ %154, %146 ], [ %pos_a_Y.0, %158 ], [ %pos_a_Y.1, %185 ], [ %pos_a_Y.0, %212 ], [ %pos_a_Y.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_185_48) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %189 ], [ %pos_a_Y.0, %204 ], [ %pos_a_Y.0, %215 ], [ %pos_a_Y.0, %143 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %144 ], [ %154, %146 ], [ %pos_a_Y.0, %158 ], [ %pos_a_Y.1, %185 ], [ %pos_a_Y.0, %212 ], [ %pos_a_Y.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_189_50) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %189 ], [ %pos_a_Y.0, %204 ], [ %pos_a_Y.0, %215 ], [ %pos_a_Y.0, %143 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %144 ], [ %154, %146 ], [ %pos_a_Y.0, %158 ], [ %pos_a_Y.1, %185 ], [ %pos_a_Y.0, %212 ], [ %pos_a_Y.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_204_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %189 ], [ %pos_a_Y.0, %204 ], [ %pos_a_Y.0, %215 ], [ %pos_a_Y.0, %143 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %144 ], [ %154, %146 ], [ %pos_a_Y.0, %158 ], [ %pos_a_Y.1, %185 ], [ %pos_a_Y.0, %212 ], [ %pos_a_Y.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_212_60) & (memory_controller_waitrequest == 1'd0)) & (main_187_188_reg == 1'd1)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %189 ], [ %pos_a_Y.0, %204 ], [ %pos_a_Y.0, %215 ], [ %pos_a_Y.0, %143 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %144 ], [ %154, %146 ], [ %pos_a_Y.0, %158 ], [ %pos_a_Y.1, %185 ], [ %pos_a_Y.0, %212 ], [ %pos_a_Y.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_215_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %189 ], [ %pos_a_Y.0, %204 ], [ %pos_a_Y.0, %215 ], [ %pos_a_Y.0, %143 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %144 ], [ %154, %146 ], [ %pos_a_Y.0, %158 ], [ %pos_a_Y.1, %185 ], [ %pos_a_Y.0, %212 ], [ %pos_a_Y.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_216_62) & (memory_controller_waitrequest == 1'd0)) & (main_216_217 == 1'd1)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %189 ], [ %pos_a_Y.0, %204 ], [ %pos_a_Y.0, %215 ], [ %pos_a_Y.0, %143 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %144 ], [ %154, %146 ], [ %pos_a_Y.0, %158 ], [ %pos_a_Y.1, %185 ], [ %pos_a_Y.0, %212 ], [ %pos_a_Y.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_218_98) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %189 ], [ %pos_a_X.0, %204 ], [ %pos_a_X.0, %215 ], [ %pos_a_X.0, %143 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %144 ], [ %152, %146 ], [ %pos_a_X.0, %158 ], [ %pos_a_X.1, %185 ], [ %pos_a_X.0, %212 ], [ %pos_a_X.0, %216 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %189 ], [ %pos_a_X.0, %204 ], [ %pos_a_X.0, %215 ], [ %pos_a_X.0, %143 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %144 ], [ %152, %146 ], [ %pos_a_X.0, %158 ], [ %pos_a_X.1, %185 ], [ %pos_a_X.0, %212 ], [ %pos_a_X.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_143_32) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %189 ], [ %pos_a_X.0, %204 ], [ %pos_a_X.0, %215 ], [ %pos_a_X.0, %143 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %144 ], [ %152, %146 ], [ %pos_a_X.0, %158 ], [ %pos_a_X.1, %185 ], [ %pos_a_X.0, %212 ], [ %pos_a_X.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_144_33) & (memory_controller_waitrequest == 1'd0)) & (main_144_145 == 1'd1)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %189 ], [ %pos_a_X.0, %204 ], [ %pos_a_X.0, %215 ], [ %pos_a_X.0, %143 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %144 ], [ %152, %146 ], [ %pos_a_X.0, %158 ], [ %pos_a_X.1, %185 ], [ %pos_a_X.0, %212 ], [ %pos_a_X.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_146_36) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main_146_152;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %189 ], [ %pos_a_X.0, %204 ], [ %pos_a_X.0, %215 ], [ %pos_a_X.0, %143 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %144 ], [ %152, %146 ], [ %pos_a_X.0, %158 ], [ %pos_a_X.1, %185 ], [ %pos_a_X.0, %212 ], [ %pos_a_X.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_158_37) & (memory_controller_waitrequest == 1'd0)) & (main_158_159 == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %189 ], [ %pos_a_X.0, %204 ], [ %pos_a_X.0, %215 ], [ %pos_a_X.0, %143 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %144 ], [ %152, %146 ], [ %pos_a_X.0, %158 ], [ %pos_a_X.1, %185 ], [ %pos_a_X.0, %212 ], [ %pos_a_X.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_185_48) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main_185_pos_a_X_1_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %189 ], [ %pos_a_X.0, %204 ], [ %pos_a_X.0, %215 ], [ %pos_a_X.0, %143 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %144 ], [ %152, %146 ], [ %pos_a_X.0, %158 ], [ %pos_a_X.1, %185 ], [ %pos_a_X.0, %212 ], [ %pos_a_X.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_189_50) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %189 ], [ %pos_a_X.0, %204 ], [ %pos_a_X.0, %215 ], [ %pos_a_X.0, %143 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %144 ], [ %152, %146 ], [ %pos_a_X.0, %158 ], [ %pos_a_X.1, %185 ], [ %pos_a_X.0, %212 ], [ %pos_a_X.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_204_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %189 ], [ %pos_a_X.0, %204 ], [ %pos_a_X.0, %215 ], [ %pos_a_X.0, %143 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %144 ], [ %152, %146 ], [ %pos_a_X.0, %158 ], [ %pos_a_X.1, %185 ], [ %pos_a_X.0, %212 ], [ %pos_a_X.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_212_60) & (memory_controller_waitrequest == 1'd0)) & (main_187_188_reg == 1'd1)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %189 ], [ %pos_a_X.0, %204 ], [ %pos_a_X.0, %215 ], [ %pos_a_X.0, %143 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %144 ], [ %152, %146 ], [ %pos_a_X.0, %158 ], [ %pos_a_X.1, %185 ], [ %pos_a_X.0, %212 ], [ %pos_a_X.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_215_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %189 ], [ %pos_a_X.0, %204 ], [ %pos_a_X.0, %215 ], [ %pos_a_X.0, %143 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %144 ], [ %152, %146 ], [ %pos_a_X.0, %158 ], [ %pos_a_X.1, %185 ], [ %pos_a_X.0, %212 ], [ %pos_a_X.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_216_62) & (memory_controller_waitrequest == 1'd0)) & (main_216_217 == 1'd1)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %189 ], [ %pos_a_X.0, %204 ], [ %pos_a_X.0, %215 ], [ %pos_a_X.0, %143 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %144 ], [ %152, %146 ], [ %pos_a_X.0, %158 ], [ %pos_a_X.1, %185 ], [ %pos_a_X.0, %212 ], [ %pos_a_X.0, %216 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_218_98) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %189 ], [ %pos_a_X.0, %204 ], [ %pos_a_X.0, %215 ], [ %pos_a_X.0, %143 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %144 ], [ %152, %146 ], [ %pos_a_X.0, %158 ], [ %pos_a_X.1, %185 ], [ %pos_a_X.0, %212 ], [ %pos_a_X.0, %216 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %189 ], [ %pos_a_X.0, %204 ], [ %pos_a_X.0, %215 ], [ %pos_a_X.0, %143 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %144 ], [ %152, %146 ], [ %pos_a_X.0, %158 ], [ %pos_a_X.1, %185 ], [ %pos_a_X.0, %212 ], [ %pos_a_X.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_143_32) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %189 ], [ %pos_a_X.0, %204 ], [ %pos_a_X.0, %215 ], [ %pos_a_X.0, %143 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %144 ], [ %152, %146 ], [ %pos_a_X.0, %158 ], [ %pos_a_X.1, %185 ], [ %pos_a_X.0, %212 ], [ %pos_a_X.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_144_33) & (memory_controller_waitrequest == 1'd0)) & (main_144_145 == 1'd1)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %189 ], [ %pos_a_X.0, %204 ], [ %pos_a_X.0, %215 ], [ %pos_a_X.0, %143 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %144 ], [ %152, %146 ], [ %pos_a_X.0, %158 ], [ %pos_a_X.1, %185 ], [ %pos_a_X.0, %212 ], [ %pos_a_X.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_146_36) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %189 ], [ %pos_a_X.0, %204 ], [ %pos_a_X.0, %215 ], [ %pos_a_X.0, %143 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %144 ], [ %152, %146 ], [ %pos_a_X.0, %158 ], [ %pos_a_X.1, %185 ], [ %pos_a_X.0, %212 ], [ %pos_a_X.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_158_37) & (memory_controller_waitrequest == 1'd0)) & (main_158_159 == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %189 ], [ %pos_a_X.0, %204 ], [ %pos_a_X.0, %215 ], [ %pos_a_X.0, %143 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %144 ], [ %152, %146 ], [ %pos_a_X.0, %158 ], [ %pos_a_X.1, %185 ], [ %pos_a_X.0, %212 ], [ %pos_a_X.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_185_48) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %189 ], [ %pos_a_X.0, %204 ], [ %pos_a_X.0, %215 ], [ %pos_a_X.0, %143 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %144 ], [ %152, %146 ], [ %pos_a_X.0, %158 ], [ %pos_a_X.1, %185 ], [ %pos_a_X.0, %212 ], [ %pos_a_X.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_189_50) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %189 ], [ %pos_a_X.0, %204 ], [ %pos_a_X.0, %215 ], [ %pos_a_X.0, %143 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %144 ], [ %152, %146 ], [ %pos_a_X.0, %158 ], [ %pos_a_X.1, %185 ], [ %pos_a_X.0, %212 ], [ %pos_a_X.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_204_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %189 ], [ %pos_a_X.0, %204 ], [ %pos_a_X.0, %215 ], [ %pos_a_X.0, %143 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %144 ], [ %152, %146 ], [ %pos_a_X.0, %158 ], [ %pos_a_X.1, %185 ], [ %pos_a_X.0, %212 ], [ %pos_a_X.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_212_60) & (memory_controller_waitrequest == 1'd0)) & (main_187_188_reg == 1'd1)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %189 ], [ %pos_a_X.0, %204 ], [ %pos_a_X.0, %215 ], [ %pos_a_X.0, %143 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %144 ], [ %152, %146 ], [ %pos_a_X.0, %158 ], [ %pos_a_X.1, %185 ], [ %pos_a_X.0, %212 ], [ %pos_a_X.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_215_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %189 ], [ %pos_a_X.0, %204 ], [ %pos_a_X.0, %215 ], [ %pos_a_X.0, %143 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %144 ], [ %152, %146 ], [ %pos_a_X.0, %158 ], [ %pos_a_X.1, %185 ], [ %pos_a_X.0, %212 ], [ %pos_a_X.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_216_62) & (memory_controller_waitrequest == 1'd0)) & (main_216_217 == 1'd1)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %189 ], [ %pos_a_X.0, %204 ], [ %pos_a_X.0, %215 ], [ %pos_a_X.0, %143 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %144 ], [ %152, %146 ], [ %pos_a_X.0, %158 ], [ %pos_a_X.1, %185 ], [ %pos_a_X.0, %212 ], [ %pos_a_X.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_218_98) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %218 ], [ 0, %189 ], [ 0, %204 ], [ 0, %215 ], [ 0, %143 ], [ %j.0, %.backedge ], [ %j.0, %144 ], [ %j.0, %146 ], [ 0, %158 ], [ %.23, %185 ], [ %198, %212 ], [ %j.0, %216 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_j_0_be = main__backedge_j_0_reg;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %218 ], [ 0, %189 ], [ 0, %204 ], [ 0, %215 ], [ 0, %143 ], [ %j.0, %.backedge ], [ %j.0, %144 ], [ %j.0, %146 ], [ 0, %158 ], [ %.23, %185 ], [ %198, %212 ], [ %j.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_143_32) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %218 ], [ 0, %189 ], [ 0, %204 ], [ 0, %215 ], [ 0, %143 ], [ %j.0, %.backedge ], [ %j.0, %144 ], [ %j.0, %146 ], [ 0, %158 ], [ %.23, %185 ], [ %198, %212 ], [ %j.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_144_33) & (memory_controller_waitrequest == 1'd0)) & (main_144_145 == 1'd1)))
begin
main__backedge_backedge_j_0_be = main__backedge_j_0_reg;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %218 ], [ 0, %189 ], [ 0, %204 ], [ 0, %215 ], [ 0, %143 ], [ %j.0, %.backedge ], [ %j.0, %144 ], [ %j.0, %146 ], [ 0, %158 ], [ %.23, %185 ], [ %198, %212 ], [ %j.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_146_36) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be = main__backedge_j_0_reg;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %218 ], [ 0, %189 ], [ 0, %204 ], [ 0, %215 ], [ 0, %143 ], [ %j.0, %.backedge ], [ %j.0, %144 ], [ %j.0, %146 ], [ 0, %158 ], [ %.23, %185 ], [ %198, %212 ], [ %j.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_158_37) & (memory_controller_waitrequest == 1'd0)) & (main_158_159 == 1'd0)))
begin
main__backedge_backedge_j_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %218 ], [ 0, %189 ], [ 0, %204 ], [ 0, %215 ], [ 0, %143 ], [ %j.0, %.backedge ], [ %j.0, %144 ], [ %j.0, %146 ], [ 0, %158 ], [ %.23, %185 ], [ %198, %212 ], [ %j.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_185_48) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be = main_185__23;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %218 ], [ 0, %189 ], [ 0, %204 ], [ 0, %215 ], [ 0, %143 ], [ %j.0, %.backedge ], [ %j.0, %144 ], [ %j.0, %146 ], [ 0, %158 ], [ %.23, %185 ], [ %198, %212 ], [ %j.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_189_50) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %218 ], [ 0, %189 ], [ 0, %204 ], [ 0, %215 ], [ 0, %143 ], [ %j.0, %.backedge ], [ %j.0, %144 ], [ %j.0, %146 ], [ 0, %158 ], [ %.23, %185 ], [ %198, %212 ], [ %j.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_204_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %218 ], [ 0, %189 ], [ 0, %204 ], [ 0, %215 ], [ 0, %143 ], [ %j.0, %.backedge ], [ %j.0, %144 ], [ %j.0, %146 ], [ 0, %158 ], [ %.23, %185 ], [ %198, %212 ], [ %j.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_212_60) & (memory_controller_waitrequest == 1'd0)) & (main_187_188_reg == 1'd1)))
begin
main__backedge_backedge_j_0_be = main_191_198_reg;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %218 ], [ 0, %189 ], [ 0, %204 ], [ 0, %215 ], [ 0, %143 ], [ %j.0, %.backedge ], [ %j.0, %144 ], [ %j.0, %146 ], [ 0, %158 ], [ %.23, %185 ], [ %198, %212 ], [ %j.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_215_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %218 ], [ 0, %189 ], [ 0, %204 ], [ 0, %215 ], [ 0, %143 ], [ %j.0, %.backedge ], [ %j.0, %144 ], [ %j.0, %146 ], [ 0, %158 ], [ %.23, %185 ], [ %198, %212 ], [ %j.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_216_62) & (memory_controller_waitrequest == 1'd0)) & (main_216_217 == 1'd1)))
begin
main__backedge_backedge_j_0_be = main__backedge_j_0_reg;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %218 ], [ 0, %189 ], [ 0, %204 ], [ 0, %215 ], [ 0, %143 ], [ %j.0, %.backedge ], [ %j.0, %144 ], [ %j.0, %146 ], [ 0, %158 ], [ %.23, %185 ], [ %198, %212 ], [ %j.0, %216 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_218_98) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_j_0_be = main__backedge_j_0_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %218 ], [ 0, %189 ], [ 0, %204 ], [ 0, %215 ], [ 0, %143 ], [ %j.0, %.backedge ], [ %j.0, %144 ], [ %j.0, %146 ], [ 0, %158 ], [ %.23, %185 ], [ %198, %212 ], [ %j.0, %216 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %218 ], [ 0, %189 ], [ 0, %204 ], [ 0, %215 ], [ 0, %143 ], [ %j.0, %.backedge ], [ %j.0, %144 ], [ %j.0, %146 ], [ 0, %158 ], [ %.23, %185 ], [ %198, %212 ], [ %j.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_143_32) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %218 ], [ 0, %189 ], [ 0, %204 ], [ 0, %215 ], [ 0, %143 ], [ %j.0, %.backedge ], [ %j.0, %144 ], [ %j.0, %146 ], [ 0, %158 ], [ %.23, %185 ], [ %198, %212 ], [ %j.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_144_33) & (memory_controller_waitrequest == 1'd0)) & (main_144_145 == 1'd1)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %218 ], [ 0, %189 ], [ 0, %204 ], [ 0, %215 ], [ 0, %143 ], [ %j.0, %.backedge ], [ %j.0, %144 ], [ %j.0, %146 ], [ 0, %158 ], [ %.23, %185 ], [ %198, %212 ], [ %j.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_146_36) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %218 ], [ 0, %189 ], [ 0, %204 ], [ 0, %215 ], [ 0, %143 ], [ %j.0, %.backedge ], [ %j.0, %144 ], [ %j.0, %146 ], [ 0, %158 ], [ %.23, %185 ], [ %198, %212 ], [ %j.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_158_37) & (memory_controller_waitrequest == 1'd0)) & (main_158_159 == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %218 ], [ 0, %189 ], [ 0, %204 ], [ 0, %215 ], [ 0, %143 ], [ %j.0, %.backedge ], [ %j.0, %144 ], [ %j.0, %146 ], [ 0, %158 ], [ %.23, %185 ], [ %198, %212 ], [ %j.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_185_48) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %218 ], [ 0, %189 ], [ 0, %204 ], [ 0, %215 ], [ 0, %143 ], [ %j.0, %.backedge ], [ %j.0, %144 ], [ %j.0, %146 ], [ 0, %158 ], [ %.23, %185 ], [ %198, %212 ], [ %j.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_189_50) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %218 ], [ 0, %189 ], [ 0, %204 ], [ 0, %215 ], [ 0, %143 ], [ %j.0, %.backedge ], [ %j.0, %144 ], [ %j.0, %146 ], [ 0, %158 ], [ %.23, %185 ], [ %198, %212 ], [ %j.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_204_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %218 ], [ 0, %189 ], [ 0, %204 ], [ 0, %215 ], [ 0, %143 ], [ %j.0, %.backedge ], [ %j.0, %144 ], [ %j.0, %146 ], [ 0, %158 ], [ %.23, %185 ], [ %198, %212 ], [ %j.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_212_60) & (memory_controller_waitrequest == 1'd0)) & (main_187_188_reg == 1'd1)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %218 ], [ 0, %189 ], [ 0, %204 ], [ 0, %215 ], [ 0, %143 ], [ %j.0, %.backedge ], [ %j.0, %144 ], [ %j.0, %146 ], [ 0, %158 ], [ %.23, %185 ], [ %198, %212 ], [ %j.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_215_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %218 ], [ 0, %189 ], [ 0, %204 ], [ 0, %215 ], [ 0, %143 ], [ %j.0, %.backedge ], [ %j.0, %144 ], [ %j.0, %146 ], [ 0, %158 ], [ %.23, %185 ], [ %198, %212 ], [ %j.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_216_62) & (memory_controller_waitrequest == 1'd0)) & (main_216_217 == 1'd1)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %218 ], [ 0, %189 ], [ 0, %204 ], [ 0, %215 ], [ 0, %143 ], [ %j.0, %.backedge ], [ %j.0, %144 ], [ %j.0, %146 ], [ 0, %158 ], [ %.23, %185 ], [ %198, %212 ], [ %j.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_218_98) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %249, %218 ], [ %190, %189 ], [ %207, %204 ], [ %i.0., %215 ], [ 0, %143 ], [ %i.0, %.backedge ], [ 0, %144 ], [ %i.0, %146 ], [ %i.0, %158 ], [ %i.0, %185 ], [ %i.0., %212 ], [ 37, %216 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_i_0_be = main__backedge_i_0_reg;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %249, %218 ], [ %190, %189 ], [ %207, %204 ], [ %i.0., %215 ], [ 0, %143 ], [ %i.0, %.backedge ], [ 0, %144 ], [ %i.0, %146 ], [ %i.0, %158 ], [ %i.0, %185 ], [ %i.0., %212 ], [ 37, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_143_32) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %249, %218 ], [ %190, %189 ], [ %207, %204 ], [ %i.0., %215 ], [ 0, %143 ], [ %i.0, %.backedge ], [ 0, %144 ], [ %i.0, %146 ], [ %i.0, %158 ], [ %i.0, %185 ], [ %i.0., %212 ], [ 37, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_144_33) & (memory_controller_waitrequest == 1'd0)) & (main_144_145 == 1'd1)))
begin
main__backedge_backedge_i_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %249, %218 ], [ %190, %189 ], [ %207, %204 ], [ %i.0., %215 ], [ 0, %143 ], [ %i.0, %.backedge ], [ 0, %144 ], [ %i.0, %146 ], [ %i.0, %158 ], [ %i.0, %185 ], [ %i.0., %212 ], [ 37, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_146_36) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be = main__backedge_i_0_reg;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %249, %218 ], [ %190, %189 ], [ %207, %204 ], [ %i.0., %215 ], [ 0, %143 ], [ %i.0, %.backedge ], [ 0, %144 ], [ %i.0, %146 ], [ %i.0, %158 ], [ %i.0, %185 ], [ %i.0., %212 ], [ 37, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_158_37) & (memory_controller_waitrequest == 1'd0)) & (main_158_159 == 1'd0)))
begin
main__backedge_backedge_i_0_be = main__backedge_i_0_reg;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %249, %218 ], [ %190, %189 ], [ %207, %204 ], [ %i.0., %215 ], [ 0, %143 ], [ %i.0, %.backedge ], [ 0, %144 ], [ %i.0, %146 ], [ %i.0, %158 ], [ %i.0, %185 ], [ %i.0., %212 ], [ 37, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_185_48) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be = main__backedge_i_0_reg;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %249, %218 ], [ %190, %189 ], [ %207, %204 ], [ %i.0., %215 ], [ 0, %143 ], [ %i.0, %.backedge ], [ 0, %144 ], [ %i.0, %146 ], [ %i.0, %158 ], [ %i.0, %185 ], [ %i.0., %212 ], [ 37, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_189_50) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be = main_189_190;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %249, %218 ], [ %190, %189 ], [ %207, %204 ], [ %i.0., %215 ], [ 0, %143 ], [ %i.0, %.backedge ], [ 0, %144 ], [ %i.0, %146 ], [ %i.0, %158 ], [ %i.0, %185 ], [ %i.0., %212 ], [ 37, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_204_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be = main_204_207_reg;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %249, %218 ], [ %190, %189 ], [ %207, %204 ], [ %i.0., %215 ], [ 0, %143 ], [ %i.0, %.backedge ], [ 0, %144 ], [ %i.0, %146 ], [ %i.0, %158 ], [ %i.0, %185 ], [ %i.0., %212 ], [ 37, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_212_60) & (memory_controller_waitrequest == 1'd0)) & (main_187_188_reg == 1'd1)))
begin
main__backedge_backedge_i_0_be = main_212_i_0_;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %249, %218 ], [ %190, %189 ], [ %207, %204 ], [ %i.0., %215 ], [ 0, %143 ], [ %i.0, %.backedge ], [ 0, %144 ], [ %i.0, %146 ], [ %i.0, %158 ], [ %i.0, %185 ], [ %i.0., %212 ], [ 37, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_215_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be = main_212_i_0__reg;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %249, %218 ], [ %190, %189 ], [ %207, %204 ], [ %i.0., %215 ], [ 0, %143 ], [ %i.0, %.backedge ], [ 0, %144 ], [ %i.0, %146 ], [ %i.0, %158 ], [ %i.0, %185 ], [ %i.0., %212 ], [ 37, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_216_62) & (memory_controller_waitrequest == 1'd0)) & (main_216_217 == 1'd1)))
begin
main__backedge_backedge_i_0_be = 32'd37;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %249, %218 ], [ %190, %189 ], [ %207, %204 ], [ %i.0., %215 ], [ 0, %143 ], [ %i.0, %.backedge ], [ 0, %144 ], [ %i.0, %146 ], [ %i.0, %158 ], [ %i.0, %185 ], [ %i.0., %212 ], [ 37, %216 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_218_98) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_i_0_be = main_218_249_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %249, %218 ], [ %190, %189 ], [ %207, %204 ], [ %i.0., %215 ], [ 0, %143 ], [ %i.0, %.backedge ], [ 0, %144 ], [ %i.0, %146 ], [ %i.0, %158 ], [ %i.0, %185 ], [ %i.0., %212 ], [ 37, %216 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %249, %218 ], [ %190, %189 ], [ %207, %204 ], [ %i.0., %215 ], [ 0, %143 ], [ %i.0, %.backedge ], [ 0, %144 ], [ %i.0, %146 ], [ %i.0, %158 ], [ %i.0, %185 ], [ %i.0., %212 ], [ 37, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_143_32) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %249, %218 ], [ %190, %189 ], [ %207, %204 ], [ %i.0., %215 ], [ 0, %143 ], [ %i.0, %.backedge ], [ 0, %144 ], [ %i.0, %146 ], [ %i.0, %158 ], [ %i.0, %185 ], [ %i.0., %212 ], [ 37, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_144_33) & (memory_controller_waitrequest == 1'd0)) & (main_144_145 == 1'd1)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %249, %218 ], [ %190, %189 ], [ %207, %204 ], [ %i.0., %215 ], [ 0, %143 ], [ %i.0, %.backedge ], [ 0, %144 ], [ %i.0, %146 ], [ %i.0, %158 ], [ %i.0, %185 ], [ %i.0., %212 ], [ 37, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_146_36) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %249, %218 ], [ %190, %189 ], [ %207, %204 ], [ %i.0., %215 ], [ 0, %143 ], [ %i.0, %.backedge ], [ 0, %144 ], [ %i.0, %146 ], [ %i.0, %158 ], [ %i.0, %185 ], [ %i.0., %212 ], [ 37, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_158_37) & (memory_controller_waitrequest == 1'd0)) & (main_158_159 == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %249, %218 ], [ %190, %189 ], [ %207, %204 ], [ %i.0., %215 ], [ 0, %143 ], [ %i.0, %.backedge ], [ 0, %144 ], [ %i.0, %146 ], [ %i.0, %158 ], [ %i.0, %185 ], [ %i.0., %212 ], [ 37, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_185_48) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %249, %218 ], [ %190, %189 ], [ %207, %204 ], [ %i.0., %215 ], [ 0, %143 ], [ %i.0, %.backedge ], [ 0, %144 ], [ %i.0, %146 ], [ %i.0, %158 ], [ %i.0, %185 ], [ %i.0., %212 ], [ 37, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_189_50) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %249, %218 ], [ %190, %189 ], [ %207, %204 ], [ %i.0., %215 ], [ 0, %143 ], [ %i.0, %.backedge ], [ 0, %144 ], [ %i.0, %146 ], [ %i.0, %158 ], [ %i.0, %185 ], [ %i.0., %212 ], [ 37, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_204_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %249, %218 ], [ %190, %189 ], [ %207, %204 ], [ %i.0., %215 ], [ 0, %143 ], [ %i.0, %.backedge ], [ 0, %144 ], [ %i.0, %146 ], [ %i.0, %158 ], [ %i.0, %185 ], [ %i.0., %212 ], [ 37, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_212_60) & (memory_controller_waitrequest == 1'd0)) & (main_187_188_reg == 1'd1)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %249, %218 ], [ %190, %189 ], [ %207, %204 ], [ %i.0., %215 ], [ 0, %143 ], [ %i.0, %.backedge ], [ 0, %144 ], [ %i.0, %146 ], [ %i.0, %158 ], [ %i.0, %185 ], [ %i.0., %212 ], [ 37, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_215_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %249, %218 ], [ %190, %189 ], [ %207, %204 ], [ %i.0., %215 ], [ 0, %143 ], [ %i.0, %.backedge ], [ 0, %144 ], [ %i.0, %146 ], [ %i.0, %158 ], [ %i.0, %185 ], [ %i.0., %212 ], [ 37, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_216_62) & (memory_controller_waitrequest == 1'd0)) & (main_216_217 == 1'd1)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %249, %218 ], [ %190, %189 ], [ %207, %204 ], [ %i.0., %215 ], [ 0, %143 ], [ %i.0, %.backedge ], [ 0, %144 ], [ %i.0, %146 ], [ %i.0, %158 ], [ %i.0, %185 ], [ %i.0., %212 ], [ 37, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_218_98) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %218 ], [ 1, %189 ], [ 1, %204 ], [ 1, %215 ], [ 1, %143 ], [ %state.0, %.backedge ], [ 4, %144 ], [ %., %146 ], [ 3, %158 ], [ %.24, %185 ], [ 3, %212 ], [ 5, %216 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_state_0_be = main__backedge_state_0_reg;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %218 ], [ 1, %189 ], [ 1, %204 ], [ 1, %215 ], [ 1, %143 ], [ %state.0, %.backedge ], [ 4, %144 ], [ %., %146 ], [ 3, %158 ], [ %.24, %185 ], [ 3, %212 ], [ 5, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_143_32) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be = 32'd1;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %218 ], [ 1, %189 ], [ 1, %204 ], [ 1, %215 ], [ 1, %143 ], [ %state.0, %.backedge ], [ 4, %144 ], [ %., %146 ], [ 3, %158 ], [ %.24, %185 ], [ 3, %212 ], [ 5, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_144_33) & (memory_controller_waitrequest == 1'd0)) & (main_144_145 == 1'd1)))
begin
main__backedge_backedge_state_0_be = 32'd4;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %218 ], [ 1, %189 ], [ 1, %204 ], [ 1, %215 ], [ 1, %143 ], [ %state.0, %.backedge ], [ 4, %144 ], [ %., %146 ], [ 3, %158 ], [ %.24, %185 ], [ 3, %212 ], [ 5, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_146_36) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be = main_146___reg;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %218 ], [ 1, %189 ], [ 1, %204 ], [ 1, %215 ], [ 1, %143 ], [ %state.0, %.backedge ], [ 4, %144 ], [ %., %146 ], [ 3, %158 ], [ %.24, %185 ], [ 3, %212 ], [ 5, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_158_37) & (memory_controller_waitrequest == 1'd0)) & (main_158_159 == 1'd0)))
begin
main__backedge_backedge_state_0_be = 32'd3;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %218 ], [ 1, %189 ], [ 1, %204 ], [ 1, %215 ], [ 1, %143 ], [ %state.0, %.backedge ], [ 4, %144 ], [ %., %146 ], [ 3, %158 ], [ %.24, %185 ], [ 3, %212 ], [ 5, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_185_48) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be = main_185__24;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %218 ], [ 1, %189 ], [ 1, %204 ], [ 1, %215 ], [ 1, %143 ], [ %state.0, %.backedge ], [ 4, %144 ], [ %., %146 ], [ 3, %158 ], [ %.24, %185 ], [ 3, %212 ], [ 5, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_189_50) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be = 32'd1;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %218 ], [ 1, %189 ], [ 1, %204 ], [ 1, %215 ], [ 1, %143 ], [ %state.0, %.backedge ], [ 4, %144 ], [ %., %146 ], [ 3, %158 ], [ %.24, %185 ], [ 3, %212 ], [ 5, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_204_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be = 32'd1;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %218 ], [ 1, %189 ], [ 1, %204 ], [ 1, %215 ], [ 1, %143 ], [ %state.0, %.backedge ], [ 4, %144 ], [ %., %146 ], [ 3, %158 ], [ %.24, %185 ], [ 3, %212 ], [ 5, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_212_60) & (memory_controller_waitrequest == 1'd0)) & (main_187_188_reg == 1'd1)))
begin
main__backedge_backedge_state_0_be = 32'd3;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %218 ], [ 1, %189 ], [ 1, %204 ], [ 1, %215 ], [ 1, %143 ], [ %state.0, %.backedge ], [ 4, %144 ], [ %., %146 ], [ 3, %158 ], [ %.24, %185 ], [ 3, %212 ], [ 5, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_215_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be = 32'd1;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %218 ], [ 1, %189 ], [ 1, %204 ], [ 1, %215 ], [ 1, %143 ], [ %state.0, %.backedge ], [ 4, %144 ], [ %., %146 ], [ 3, %158 ], [ %.24, %185 ], [ 3, %212 ], [ 5, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_216_62) & (memory_controller_waitrequest == 1'd0)) & (main_216_217 == 1'd1)))
begin
main__backedge_backedge_state_0_be = 32'd5;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %218 ], [ 1, %189 ], [ 1, %204 ], [ 1, %215 ], [ 1, %143 ], [ %state.0, %.backedge ], [ 4, %144 ], [ %., %146 ], [ 3, %158 ], [ %.24, %185 ], [ 3, %212 ], [ 5, %216 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_218_98) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_state_0_be = main__backedge_state_0_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %218 ], [ 1, %189 ], [ 1, %204 ], [ 1, %215 ], [ 1, %143 ], [ %state.0, %.backedge ], [ 4, %144 ], [ %., %146 ], [ 3, %158 ], [ %.24, %185 ], [ 3, %212 ], [ 5, %216 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %218 ], [ 1, %189 ], [ 1, %204 ], [ 1, %215 ], [ 1, %143 ], [ %state.0, %.backedge ], [ 4, %144 ], [ %., %146 ], [ 3, %158 ], [ %.24, %185 ], [ 3, %212 ], [ 5, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_143_32) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %218 ], [ 1, %189 ], [ 1, %204 ], [ 1, %215 ], [ 1, %143 ], [ %state.0, %.backedge ], [ 4, %144 ], [ %., %146 ], [ 3, %158 ], [ %.24, %185 ], [ 3, %212 ], [ 5, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_144_33) & (memory_controller_waitrequest == 1'd0)) & (main_144_145 == 1'd1)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %218 ], [ 1, %189 ], [ 1, %204 ], [ 1, %215 ], [ 1, %143 ], [ %state.0, %.backedge ], [ 4, %144 ], [ %., %146 ], [ 3, %158 ], [ %.24, %185 ], [ 3, %212 ], [ 5, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_146_36) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %218 ], [ 1, %189 ], [ 1, %204 ], [ 1, %215 ], [ 1, %143 ], [ %state.0, %.backedge ], [ 4, %144 ], [ %., %146 ], [ 3, %158 ], [ %.24, %185 ], [ 3, %212 ], [ 5, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_158_37) & (memory_controller_waitrequest == 1'd0)) & (main_158_159 == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %218 ], [ 1, %189 ], [ 1, %204 ], [ 1, %215 ], [ 1, %143 ], [ %state.0, %.backedge ], [ 4, %144 ], [ %., %146 ], [ 3, %158 ], [ %.24, %185 ], [ 3, %212 ], [ 5, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_185_48) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %218 ], [ 1, %189 ], [ 1, %204 ], [ 1, %215 ], [ 1, %143 ], [ %state.0, %.backedge ], [ 4, %144 ], [ %., %146 ], [ 3, %158 ], [ %.24, %185 ], [ 3, %212 ], [ 5, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_189_50) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %218 ], [ 1, %189 ], [ 1, %204 ], [ 1, %215 ], [ 1, %143 ], [ %state.0, %.backedge ], [ 4, %144 ], [ %., %146 ], [ 3, %158 ], [ %.24, %185 ], [ 3, %212 ], [ 5, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_204_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %218 ], [ 1, %189 ], [ 1, %204 ], [ 1, %215 ], [ 1, %143 ], [ %state.0, %.backedge ], [ 4, %144 ], [ %., %146 ], [ 3, %158 ], [ %.24, %185 ], [ 3, %212 ], [ 5, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_212_60) & (memory_controller_waitrequest == 1'd0)) & (main_187_188_reg == 1'd1)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %218 ], [ 1, %189 ], [ 1, %204 ], [ 1, %215 ], [ 1, %143 ], [ %state.0, %.backedge ], [ 4, %144 ], [ %., %146 ], [ 3, %158 ], [ %.24, %185 ], [ 3, %212 ], [ 5, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_215_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %218 ], [ 1, %189 ], [ 1, %204 ], [ 1, %215 ], [ 1, %143 ], [ %state.0, %.backedge ], [ 4, %144 ], [ %., %146 ], [ 3, %158 ], [ %.24, %185 ], [ 3, %212 ], [ 5, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_216_62) & (memory_controller_waitrequest == 1'd0)) & (main_216_217 == 1'd1)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %218 ], [ 1, %189 ], [ 1, %204 ], [ 1, %215 ], [ 1, %143 ], [ %state.0, %.backedge ], [ 4, %144 ], [ %., %146 ], [ 3, %158 ], [ %.24, %185 ], [ 3, %212 ], [ 5, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_218_98) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %248, %218 ], [ %sum_1hop.0, %189 ], [ %sum_1hop.0, %204 ], [ %sum_1hop.0, %215 ], [ %sum_1hop.0, %143 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %144 ], [ %sum_1hop.0, %146 ], [ %sum_1hop.0, %158 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %212 ], [ %sum_1hop.0, %216 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %248, %218 ], [ %sum_1hop.0, %189 ], [ %sum_1hop.0, %204 ], [ %sum_1hop.0, %215 ], [ %sum_1hop.0, %143 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %144 ], [ %sum_1hop.0, %146 ], [ %sum_1hop.0, %158 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %212 ], [ %sum_1hop.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_143_32) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %248, %218 ], [ %sum_1hop.0, %189 ], [ %sum_1hop.0, %204 ], [ %sum_1hop.0, %215 ], [ %sum_1hop.0, %143 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %144 ], [ %sum_1hop.0, %146 ], [ %sum_1hop.0, %158 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %212 ], [ %sum_1hop.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_144_33) & (memory_controller_waitrequest == 1'd0)) & (main_144_145 == 1'd1)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %248, %218 ], [ %sum_1hop.0, %189 ], [ %sum_1hop.0, %204 ], [ %sum_1hop.0, %215 ], [ %sum_1hop.0, %143 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %144 ], [ %sum_1hop.0, %146 ], [ %sum_1hop.0, %158 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %212 ], [ %sum_1hop.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_146_36) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %248, %218 ], [ %sum_1hop.0, %189 ], [ %sum_1hop.0, %204 ], [ %sum_1hop.0, %215 ], [ %sum_1hop.0, %143 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %144 ], [ %sum_1hop.0, %146 ], [ %sum_1hop.0, %158 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %212 ], [ %sum_1hop.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_158_37) & (memory_controller_waitrequest == 1'd0)) & (main_158_159 == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %248, %218 ], [ %sum_1hop.0, %189 ], [ %sum_1hop.0, %204 ], [ %sum_1hop.0, %215 ], [ %sum_1hop.0, %143 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %144 ], [ %sum_1hop.0, %146 ], [ %sum_1hop.0, %158 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %212 ], [ %sum_1hop.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_185_48) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %248, %218 ], [ %sum_1hop.0, %189 ], [ %sum_1hop.0, %204 ], [ %sum_1hop.0, %215 ], [ %sum_1hop.0, %143 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %144 ], [ %sum_1hop.0, %146 ], [ %sum_1hop.0, %158 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %212 ], [ %sum_1hop.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_189_50) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %248, %218 ], [ %sum_1hop.0, %189 ], [ %sum_1hop.0, %204 ], [ %sum_1hop.0, %215 ], [ %sum_1hop.0, %143 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %144 ], [ %sum_1hop.0, %146 ], [ %sum_1hop.0, %158 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %212 ], [ %sum_1hop.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_204_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %248, %218 ], [ %sum_1hop.0, %189 ], [ %sum_1hop.0, %204 ], [ %sum_1hop.0, %215 ], [ %sum_1hop.0, %143 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %144 ], [ %sum_1hop.0, %146 ], [ %sum_1hop.0, %158 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %212 ], [ %sum_1hop.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_212_60) & (memory_controller_waitrequest == 1'd0)) & (main_187_188_reg == 1'd1)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %248, %218 ], [ %sum_1hop.0, %189 ], [ %sum_1hop.0, %204 ], [ %sum_1hop.0, %215 ], [ %sum_1hop.0, %143 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %144 ], [ %sum_1hop.0, %146 ], [ %sum_1hop.0, %158 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %212 ], [ %sum_1hop.0, %216 ]*/
else if (((cur_state == LEGUP_F_main_BB_215_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %248, %218 ], [ %sum_1hop.0, %189 ], [ %sum_1hop.0, %204 ], [ %sum_1hop.0, %215 ], [ %sum_1hop.0, %143 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %144 ], [ %sum_1hop.0, %146 ], [ %sum_1hop.0, %158 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %212 ], [ %sum_1hop.0, %216 ]*/
else if ((((cur_state == LEGUP_F_main_BB_216_62) & (memory_controller_waitrequest == 1'd0)) & (main_216_217 == 1'd1)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %248, %218 ], [ %sum_1hop.0, %189 ], [ %sum_1hop.0, %204 ], [ %sum_1hop.0, %215 ], [ %sum_1hop.0, %143 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %144 ], [ %sum_1hop.0, %146 ], [ %sum_1hop.0, %158 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %212 ], [ %sum_1hop.0, %216 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_218_98) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_sum_1hop_0_be = main_218_248;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %248, %218 ], [ %sum_1hop.0, %189 ], [ %sum_1hop.0, %204 ], [ %sum_1hop.0, %215 ], [ %sum_1hop.0, %143 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %144 ], [ %sum_1hop.0, %146 ], [ %sum_1hop.0, %158 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %212 ], [ %sum_1hop.0, %216 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %248, %218 ], [ %sum_1hop.0, %189 ], [ %sum_1hop.0, %204 ], [ %sum_1hop.0, %215 ], [ %sum_1hop.0, %143 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %144 ], [ %sum_1hop.0, %146 ], [ %sum_1hop.0, %158 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %212 ], [ %sum_1hop.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_143_32) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %248, %218 ], [ %sum_1hop.0, %189 ], [ %sum_1hop.0, %204 ], [ %sum_1hop.0, %215 ], [ %sum_1hop.0, %143 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %144 ], [ %sum_1hop.0, %146 ], [ %sum_1hop.0, %158 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %212 ], [ %sum_1hop.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_144_33) & (memory_controller_waitrequest == 1'd0)) & (main_144_145 == 1'd1)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %248, %218 ], [ %sum_1hop.0, %189 ], [ %sum_1hop.0, %204 ], [ %sum_1hop.0, %215 ], [ %sum_1hop.0, %143 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %144 ], [ %sum_1hop.0, %146 ], [ %sum_1hop.0, %158 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %212 ], [ %sum_1hop.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_146_36) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %248, %218 ], [ %sum_1hop.0, %189 ], [ %sum_1hop.0, %204 ], [ %sum_1hop.0, %215 ], [ %sum_1hop.0, %143 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %144 ], [ %sum_1hop.0, %146 ], [ %sum_1hop.0, %158 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %212 ], [ %sum_1hop.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_158_37) & (memory_controller_waitrequest == 1'd0)) & (main_158_159 == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %248, %218 ], [ %sum_1hop.0, %189 ], [ %sum_1hop.0, %204 ], [ %sum_1hop.0, %215 ], [ %sum_1hop.0, %143 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %144 ], [ %sum_1hop.0, %146 ], [ %sum_1hop.0, %158 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %212 ], [ %sum_1hop.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_185_48) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %248, %218 ], [ %sum_1hop.0, %189 ], [ %sum_1hop.0, %204 ], [ %sum_1hop.0, %215 ], [ %sum_1hop.0, %143 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %144 ], [ %sum_1hop.0, %146 ], [ %sum_1hop.0, %158 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %212 ], [ %sum_1hop.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_189_50) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %248, %218 ], [ %sum_1hop.0, %189 ], [ %sum_1hop.0, %204 ], [ %sum_1hop.0, %215 ], [ %sum_1hop.0, %143 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %144 ], [ %sum_1hop.0, %146 ], [ %sum_1hop.0, %158 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %212 ], [ %sum_1hop.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_204_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %248, %218 ], [ %sum_1hop.0, %189 ], [ %sum_1hop.0, %204 ], [ %sum_1hop.0, %215 ], [ %sum_1hop.0, %143 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %144 ], [ %sum_1hop.0, %146 ], [ %sum_1hop.0, %158 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %212 ], [ %sum_1hop.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_212_60) & (memory_controller_waitrequest == 1'd0)) & (main_187_188_reg == 1'd1)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %248, %218 ], [ %sum_1hop.0, %189 ], [ %sum_1hop.0, %204 ], [ %sum_1hop.0, %215 ], [ %sum_1hop.0, %143 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %144 ], [ %sum_1hop.0, %146 ], [ %sum_1hop.0, %158 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %212 ], [ %sum_1hop.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_215_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %248, %218 ], [ %sum_1hop.0, %189 ], [ %sum_1hop.0, %204 ], [ %sum_1hop.0, %215 ], [ %sum_1hop.0, %143 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %144 ], [ %sum_1hop.0, %146 ], [ %sum_1hop.0, %158 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %212 ], [ %sum_1hop.0, %216 ]*/
if ((((cur_state == LEGUP_F_main_BB_216_62) & (memory_controller_waitrequest == 1'd0)) & (main_216_217 == 1'd1)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %248, %218 ], [ %sum_1hop.0, %189 ], [ %sum_1hop.0, %204 ], [ %sum_1hop.0, %215 ], [ %sum_1hop.0, %143 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %144 ], [ %sum_1hop.0, %146 ], [ %sum_1hop.0, %158 ], [ %sum_1hop.0, %185 ], [ %sum_1hop.0, %212 ], [ %sum_1hop.0, %216 ]*/
if (((cur_state == LEGUP_F_main_BB_218_98) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %136*/
/*   %s.i.0 = phi i32* [ %scevgep54, %.preheader31 ], [ %141, %139 ]*/
if (((cur_state == LEGUP_F_main_BB__preheader31_24) & (memory_controller_waitrequest == 1'd0)))
begin
main_136_s_i_0 = main_0_scevgep54_reg;
end
/* main: %136*/
/*   %s.i.0 = phi i32* [ %scevgep54, %.preheader31 ], [ %141, %139 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_139_27) & (memory_controller_waitrequest == 1'd0))) */
begin
main_136_s_i_0 = main_139_141_reg;
end
end
always @(posedge clk) begin
/* main: %136*/
/*   %s.i.0 = phi i32* [ %scevgep54, %.preheader31 ], [ %141, %139 ]*/
if (((cur_state == LEGUP_F_main_BB__preheader31_24) & (memory_controller_waitrequest == 1'd0)))
begin
main_136_s_i_0_reg <= main_136_s_i_0;
if (reset == 1'b0 && ^(main_136_s_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_s_i_0_reg"); $finish; end
end
/* main: %136*/
/*   %s.i.0 = phi i32* [ %scevgep54, %.preheader31 ], [ %141, %139 ]*/
if (((cur_state == LEGUP_F_main_BB_139_27) & (memory_controller_waitrequest == 1'd0)))
begin
main_136_s_i_0_reg <= main_136_s_i_0;
if (reset == 1'b0 && ^(main_136_s_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_s_i_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %136*/
/*   %137 = phi i32 [ 36, %.preheader31 ], [ %140, %139 ]*/
if (((cur_state == LEGUP_F_main_BB__preheader31_24) & (memory_controller_waitrequest == 1'd0)))
begin
main_136_137 = 32'd36;
end
/* main: %136*/
/*   %137 = phi i32 [ 36, %.preheader31 ], [ %140, %139 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_139_27) & (memory_controller_waitrequest == 1'd0))) */
begin
main_136_137 = main_139_140_reg;
end
end
always @(posedge clk) begin
/* main: %136*/
/*   %137 = phi i32 [ 36, %.preheader31 ], [ %140, %139 ]*/
if (((cur_state == LEGUP_F_main_BB__preheader31_24) & (memory_controller_waitrequest == 1'd0)))
begin
main_136_137_reg <= main_136_137;
if (reset == 1'b0 && ^(main_136_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_137_reg"); $finish; end
end
/* main: %136*/
/*   %137 = phi i32 [ 36, %.preheader31 ], [ %140, %139 ]*/
if (((cur_state == LEGUP_F_main_BB_139_27) & (memory_controller_waitrequest == 1'd0)))
begin
main_136_137_reg <= main_136_137;
if (reset == 1'b0 && ^(main_136_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_137_reg"); $finish; end
end
end
always @(*) begin
/* main: %136*/
/*   %138 = icmp eq i32 %137, 0*/
begin
main_136_138 = (main_136_137_reg == 32'd0);
end
end
always @(posedge clk) begin
/* main: %136*/
/*   %138 = icmp eq i32 %137, 0*/
if ((cur_state == LEGUP_F_main_BB_136_25))
begin
main_136_138_reg <= main_136_138;
if (reset == 1'b0 && ^(main_136_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_138_reg"); $finish; end
end
end
always @(*) begin
/* main: %139*/
/*   %140 = add i32 %137, -1*/
begin
main_139_140 = (main_136_137_reg + -32'd1);
end
end
always @(posedge clk) begin
/* main: %139*/
/*   %140 = add i32 %137, -1*/
if ((cur_state == LEGUP_F_main_BB_139_26))
begin
main_139_140_reg <= main_139_140;
if (reset == 1'b0 && ^(main_139_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_139_140_reg"); $finish; end
end
end
always @(*) begin
/* main: %139*/
/*   %141 = getelementptr inbounds i32* %s.i.0, i32 1*/
begin
main_139_141 = (main_136_s_i_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %139*/
/*   %141 = getelementptr inbounds i32* %s.i.0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_139_26))
begin
main_139_141_reg <= main_139_141;
if (reset == 1'b0 && ^(main_139_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_139_141_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_4.exit*/
/*   %i.234 = phi i32 [ %142, %legup_memset_4.exit ], [ 0, %legup_memset_4.exit.loopexit ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_loopexit_28) & (memory_controller_waitrequest == 1'd0)))
begin
main_legup_memset_4_exit_i_234 = 32'd0;
end
/* main: %legup_memset_4.exit*/
/*   %i.234 = phi i32 [ %142, %legup_memset_4.exit ], [ 0, %legup_memset_4.exit.loopexit ]*/
else /* if ((((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_30) & (memory_controller_waitrequest == 1'd0)) & (main_legup_memset_4_exit_exitcond73_reg == 1'd0))) */
begin
main_legup_memset_4_exit_i_234 = main_legup_memset_4_exit_142_reg;
end
end
always @(posedge clk) begin
/* main: %legup_memset_4.exit*/
/*   %i.234 = phi i32 [ %142, %legup_memset_4.exit ], [ 0, %legup_memset_4.exit.loopexit ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_loopexit_28) & (memory_controller_waitrequest == 1'd0)))
begin
main_legup_memset_4_exit_i_234_reg <= main_legup_memset_4_exit_i_234;
if (reset == 1'b0 && ^(main_legup_memset_4_exit_i_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_exit_i_234_reg"); $finish; end
end
/* main: %legup_memset_4.exit*/
/*   %i.234 = phi i32 [ %142, %legup_memset_4.exit ], [ 0, %legup_memset_4.exit.loopexit ]*/
if ((((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_30) & (memory_controller_waitrequest == 1'd0)) & (main_legup_memset_4_exit_exitcond73_reg == 1'd0)))
begin
main_legup_memset_4_exit_i_234_reg <= main_legup_memset_4_exit_i_234;
if (reset == 1'b0 && ^(main_legup_memset_4_exit_i_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_exit_i_234_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_4.exit*/
/*   %scevgep74 = getelementptr [35 x i32]* %3, i32 0, i32 %i.234*/
begin
main_legup_memset_4_exit_scevgep74 = (1'd0 + (4 * main_legup_memset_4_exit_i_234_reg));
end
end
always @(posedge clk) begin
/* main: %legup_memset_4.exit*/
/*   %scevgep74 = getelementptr [35 x i32]* %3, i32 0, i32 %i.234*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_29))
begin
main_legup_memset_4_exit_scevgep74_reg <= main_legup_memset_4_exit_scevgep74;
if (reset == 1'b0 && ^(main_legup_memset_4_exit_scevgep74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_exit_scevgep74_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_4.exit*/
/*   %scevgep75 = getelementptr [35 x i32]* %4, i32 0, i32 %i.234*/
begin
main_legup_memset_4_exit_scevgep75 = (1'd0 + (4 * main_legup_memset_4_exit_i_234_reg));
end
end
always @(posedge clk) begin
/* main: %legup_memset_4.exit*/
/*   %scevgep75 = getelementptr [35 x i32]* %4, i32 0, i32 %i.234*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_29))
begin
main_legup_memset_4_exit_scevgep75_reg <= main_legup_memset_4_exit_scevgep75;
if (reset == 1'b0 && ^(main_legup_memset_4_exit_scevgep75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_exit_scevgep75_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_4.exit*/
/*   %142 = add nsw i32 %i.234, 1*/
begin
main_legup_memset_4_exit_142 = (main_legup_memset_4_exit_i_234_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %legup_memset_4.exit*/
/*   %142 = add nsw i32 %i.234, 1*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_29))
begin
main_legup_memset_4_exit_142_reg <= main_legup_memset_4_exit_142;
if (reset == 1'b0 && ^(main_legup_memset_4_exit_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_exit_142_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_4.exit*/
/*   %exitcond73 = icmp eq i32 %142, 35*/
begin
main_legup_memset_4_exit_exitcond73 = (main_legup_memset_4_exit_142 == 32'd35);
end
end
always @(posedge clk) begin
/* main: %legup_memset_4.exit*/
/*   %exitcond73 = icmp eq i32 %142, 35*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_29))
begin
main_legup_memset_4_exit_exitcond73_reg <= main_legup_memset_4_exit_exitcond73;
if (reset == 1'b0 && ^(main_legup_memset_4_exit_exitcond73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_exit_exitcond73_reg"); $finish; end
end
end
always @(*) begin
/* main: %144*/
/*   %145 = icmp eq i32 %i.0, 37*/
begin
main_144_145 = (main__backedge_i_0_reg == 32'd37);
end
end
always @(posedge clk) begin
/* main: %144*/
/*   %145 = icmp eq i32 %i.0, 37*/
if ((cur_state == LEGUP_F_main_BB_144_33))
begin
main_144_145_reg <= main_144_145;
if (reset == 1'b0 && ^(main_144_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_144_145_reg"); $finish; end
end
end
always @(*) begin
/* main: %146*/
/*   %147 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 %i.0*/
begin
main_146_147 = (1'd0 + (4 * main__backedge_i_0_reg));
end
end
always @(posedge clk) begin
/* main: %146*/
/*   %147 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 %i.0*/
if ((cur_state == LEGUP_F_main_BB_146_34))
begin
main_146_147_reg <= main_146_147;
if (reset == 1'b0 && ^(main_146_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_147_reg"); $finish; end
end
end
always @(*) begin
/* main: %146*/
/*   %148 = load i32* %147, align 4, !tbaa !0*/
begin
main_146_148 = main_0_1_out_b;
end
end
always @(posedge clk) begin
/* main: %146*/
/*   %148 = load i32* %147, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_146_35))
begin
main_146_148_reg <= main_146_148;
if (reset == 1'b0 && ^(main_146_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_148_reg"); $finish; end
end
end
always @(*) begin
/* main: %146*/
/*   %149 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 %i.0*/
begin
main_146_149 = (1'd0 + (4 * main__backedge_i_0_reg));
end
end
always @(posedge clk) begin
/* main: %146*/
/*   %149 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 %i.0*/
if ((cur_state == LEGUP_F_main_BB_146_34))
begin
main_146_149_reg <= main_146_149;
if (reset == 1'b0 && ^(main_146_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_149_reg"); $finish; end
end
end
always @(*) begin
/* main: %146*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
begin
main_146_150 = main_0_2_out_b;
end
end
always @(posedge clk) begin
/* main: %146*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_146_35))
begin
main_146_150_reg <= main_146_150;
if (reset == 1'b0 && ^(main_146_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_150_reg"); $finish; end
end
end
always @(*) begin
/* main: %146*/
/*   %151 = getelementptr inbounds [35 x i32]* %3, i32 0, i32 %148*/
begin
main_146_151 = (1'd0 + (4 * main_146_148));
end
end
always @(posedge clk) begin
/* main: %146*/
/*   %151 = getelementptr inbounds [35 x i32]* %3, i32 0, i32 %148*/
if ((cur_state == LEGUP_F_main_BB_146_35))
begin
main_146_151_reg <= main_146_151;
if (reset == 1'b0 && ^(main_146_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_151_reg"); $finish; end
end
end
always @(*) begin
/* main: %146*/
/*   %152 = load i32* %151, align 4, !tbaa !0*/
begin
main_146_152 = main_0_3_out_a;
end
end
always @(posedge clk) begin
/* main: %146*/
/*   %152 = load i32* %151, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_146_36))
begin
main_146_152_reg <= main_146_152;
if (reset == 1'b0 && ^(main_146_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_152_reg"); $finish; end
end
end
always @(*) begin
/* main: %146*/
/*   %153 = getelementptr inbounds [35 x i32]* %4, i32 0, i32 %148*/
begin
main_146_153 = (1'd0 + (4 * main_146_148));
end
end
always @(posedge clk) begin
/* main: %146*/
/*   %153 = getelementptr inbounds [35 x i32]* %4, i32 0, i32 %148*/
if ((cur_state == LEGUP_F_main_BB_146_35))
begin
main_146_153_reg <= main_146_153;
if (reset == 1'b0 && ^(main_146_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_153_reg"); $finish; end
end
end
always @(*) begin
/* main: %146*/
/*   %154 = load i32* %153, align 4, !tbaa !0*/
begin
main_146_154 = main_0_4_out_a;
end
end
always @(posedge clk) begin
/* main: %146*/
/*   %154 = load i32* %153, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_146_36))
begin
main_146_154_reg <= main_146_154;
if (reset == 1'b0 && ^(main_146_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_154_reg"); $finish; end
end
end
always @(*) begin
/* main: %146*/
/*   %155 = getelementptr inbounds [35 x i32]* %3, i32 0, i32 %150*/
begin
main_146_155 = (1'd0 + (4 * main_146_150));
end
end
always @(posedge clk) begin
/* main: %146*/
/*   %155 = getelementptr inbounds [35 x i32]* %3, i32 0, i32 %150*/
if ((cur_state == LEGUP_F_main_BB_146_35))
begin
main_146_155_reg <= main_146_155;
if (reset == 1'b0 && ^(main_146_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_155_reg"); $finish; end
end
end
always @(*) begin
/* main: %146*/
/*   %156 = load i32* %155, align 4, !tbaa !0*/
begin
main_146_156 = main_0_3_out_b;
end
end
always @(posedge clk) begin
/* main: %146*/
/*   %156 = load i32* %155, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_146_36))
begin
main_146_156_reg <= main_146_156;
if (reset == 1'b0 && ^(main_146_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_156_reg"); $finish; end
end
end
always @(*) begin
/* main: %146*/
/*   %157 = icmp eq i32 %i.0, 0*/
begin
main_146_157 = (main__backedge_i_0_reg == 32'd0);
end
end
always @(posedge clk) begin
/* main: %146*/
/*   %157 = icmp eq i32 %i.0, 0*/
if ((cur_state == LEGUP_F_main_BB_146_34))
begin
main_146_157_reg <= main_146_157;
if (reset == 1'b0 && ^(main_146_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_157_reg"); $finish; end
end
end
always @(*) begin
/* main: %146*/
/*   %. = select i1 %157, i32 3, i32 2*/
begin
main_146__ = (main_146_157 ? 32'd3 : 32'd2);
end
end
always @(posedge clk) begin
/* main: %146*/
/*   %. = select i1 %157, i32 3, i32 2*/
if ((cur_state == LEGUP_F_main_BB_146_34))
begin
main_146___reg <= main_146__;
if (reset == 1'b0 && ^(main_146__) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146___reg"); $finish; end
end
end
always @(*) begin
/* main: %158*/
/*   %159 = icmp eq i32 %pos_a_X.0, -1*/
begin
main_158_159 = (main__backedge_pos_a_X_0_reg == -32'd1);
end
end
always @(posedge clk) begin
/* main: %158*/
/*   %159 = icmp eq i32 %pos_a_X.0, -1*/
if ((cur_state == LEGUP_F_main_BB_158_37))
begin
main_158_159_reg <= main_158_159;
if (reset == 1'b0 && ^(main_158_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_158_159_reg"); $finish; end
end
end
always @(*) begin
/* main: %160*/
/*   %161 = add nsw i32 %i.0, -1*/
begin
main_160_161 = (main__backedge_i_0_reg + -32'd1);
end
end
always @(posedge clk) begin
/* main: %160*/
/*   %161 = add nsw i32 %i.0, -1*/
if ((cur_state == LEGUP_F_main_BB_160_38))
begin
main_160_161_reg <= main_160_161;
if (reset == 1'b0 && ^(main_160_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_161_reg"); $finish; end
end
end
always @(*) begin
/* main: %160*/
/*   %162 = getelementptr inbounds [35 x i32]* %3, i32 0, i32 %161*/
begin
main_160_162 = (1'd0 + (4 * main_160_161_reg));
end
end
always @(posedge clk) begin
/* main: %160*/
/*   %162 = getelementptr inbounds [35 x i32]* %3, i32 0, i32 %161*/
if ((cur_state == LEGUP_F_main_BB_160_39))
begin
main_160_162_reg <= main_160_162;
if (reset == 1'b0 && ^(main_160_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_162_reg"); $finish; end
end
end
always @(*) begin
/* main: %160*/
/*   %163 = load i32* %162, align 4, !tbaa !0*/
begin
main_160_163 = main_0_3_out_b;
end
end
always @(posedge clk) begin
/* main: %160*/
/*   %163 = load i32* %162, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_160_40))
begin
main_160_163_reg <= main_160_163;
if (reset == 1'b0 && ^(main_160_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_163_reg"); $finish; end
end
end
always @(*) begin
/* main: %160*/
/*   %164 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 %j.0*/
begin
main_160_164 = (1'd0 + (4 * main__backedge_j_0_reg));
end
end
always @(posedge clk) begin
/* main: %160*/
/*   %164 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 %j.0*/
if ((cur_state == LEGUP_F_main_BB_160_38))
begin
main_160_164_reg <= main_160_164;
if (reset == 1'b0 && ^(main_160_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_164_reg"); $finish; end
end
end
always @(*) begin
/* main: %160*/
/*   %165 = load i32* %164, align 4, !tbaa !0*/
begin
main_160_165 = main_0_6_out_a;
end
end
always @(posedge clk) begin
/* main: %160*/
/*   %165 = load i32* %164, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_160_39))
begin
main_160_165_reg <= main_160_165;
if (reset == 1'b0 && ^(main_160_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_165_reg"); $finish; end
end
end
always @(*) begin
/* main: %160*/
/*   %166 = add nsw i32 %165, %163*/
begin
main_160_166 = (main_160_165_reg + main_160_163);
end
end
always @(posedge clk) begin
/* main: %160*/
/*   %166 = add nsw i32 %165, %163*/
if ((cur_state == LEGUP_F_main_BB_160_40))
begin
main_160_166_reg <= main_160_166;
if (reset == 1'b0 && ^(main_160_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_166_reg"); $finish; end
end
end
always @(*) begin
/* main: %160*/
/*   %167 = getelementptr inbounds [35 x i32]* %3, i32 0, i32 %a.0*/
begin
main_160_167 = (1'd0 + (4 * main__backedge_a_0_reg));
end
end
always @(posedge clk) begin
/* main: %160*/
/*   %167 = getelementptr inbounds [35 x i32]* %3, i32 0, i32 %a.0*/
if ((cur_state == LEGUP_F_main_BB_160_38))
begin
main_160_167_reg <= main_160_167;
if (reset == 1'b0 && ^(main_160_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_167_reg"); $finish; end
end
end
always @(*) begin
/* main: %160*/
/*   %168 = getelementptr inbounds [35 x i32]* %4, i32 0, i32 %161*/
begin
main_160_168 = (1'd0 + (4 * main_160_161_reg));
end
end
always @(posedge clk) begin
/* main: %160*/
/*   %168 = getelementptr inbounds [35 x i32]* %4, i32 0, i32 %161*/
if ((cur_state == LEGUP_F_main_BB_160_39))
begin
main_160_168_reg <= main_160_168;
if (reset == 1'b0 && ^(main_160_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_168_reg"); $finish; end
end
end
always @(*) begin
/* main: %160*/
/*   %169 = load i32* %168, align 4, !tbaa !0*/
begin
main_160_169 = main_0_4_out_a;
end
end
always @(posedge clk) begin
/* main: %160*/
/*   %169 = load i32* %168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_160_40))
begin
main_160_169_reg <= main_160_169;
if (reset == 1'b0 && ^(main_160_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_169_reg"); $finish; end
end
end
always @(*) begin
/* main: %160*/
/*   %170 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 %j.0*/
begin
main_160_170 = (1'd0 + (4 * main__backedge_j_0_reg));
end
end
always @(posedge clk) begin
/* main: %160*/
/*   %170 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 %j.0*/
if ((cur_state == LEGUP_F_main_BB_160_38))
begin
main_160_170_reg <= main_160_170;
if (reset == 1'b0 && ^(main_160_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_170_reg"); $finish; end
end
end
always @(*) begin
/* main: %160*/
/*   %171 = load i32* %170, align 4, !tbaa !0*/
begin
main_160_171 = main_0_7_out_a;
end
end
always @(posedge clk) begin
/* main: %160*/
/*   %171 = load i32* %170, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_160_39))
begin
main_160_171_reg <= main_160_171;
if (reset == 1'b0 && ^(main_160_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_171_reg"); $finish; end
end
end
always @(*) begin
/* main: %160*/
/*   %172 = add nsw i32 %171, %169*/
begin
main_160_172 = (main_160_171_reg + main_160_169);
end
end
always @(posedge clk) begin
/* main: %160*/
/*   %172 = add nsw i32 %171, %169*/
if ((cur_state == LEGUP_F_main_BB_160_40))
begin
main_160_172_reg <= main_160_172;
if (reset == 1'b0 && ^(main_160_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_172_reg"); $finish; end
end
end
always @(*) begin
/* main: %160*/
/*   %173 = getelementptr inbounds [35 x i32]* %4, i32 0, i32 %a.0*/
begin
main_160_173 = (1'd0 + (4 * main__backedge_a_0_reg));
end
end
always @(posedge clk) begin
/* main: %160*/
/*   %173 = getelementptr inbounds [35 x i32]* %4, i32 0, i32 %a.0*/
if ((cur_state == LEGUP_F_main_BB_160_38))
begin
main_160_173_reg <= main_160_173;
if (reset == 1'b0 && ^(main_160_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_173_reg"); $finish; end
end
end
always @(*) begin
/* main: %160*/
/*   %174 = add nsw i32 %j.0, 1*/
begin
main_160_174 = (main__backedge_j_0_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %160*/
/*   %174 = add nsw i32 %j.0, 1*/
if ((cur_state == LEGUP_F_main_BB_160_38))
begin
main_160_174_reg <= main_160_174;
if (reset == 1'b0 && ^(main_160_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_174_reg"); $finish; end
end
end
always @(*) begin
main_160_idxscale17 = main_160_idxscale17_stage0_reg;
end
always @(posedge clk) begin
/* main: %160*/
/*   %idxscale17 = mul i32 %166, 6*/
if ((cur_state == LEGUP_F_main_BB_160_41))
begin
main_160_idxscale17_reg <= main_160_idxscale17;
if (reset == 1'b0 && ^(main_160_idxscale17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_idxscale17_reg"); $finish; end
end
/* main: %160*/
/*   %idxscale17 = mul i32 %166, 6*/
if ((cur_state == LEGUP_F_main_BB_160_41))
begin
main_160_idxscale17_reg <= main_160_idxscale17;
if (reset == 1'b0 && ^(main_160_idxscale17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_idxscale17_reg"); $finish; end
end
end
always @(*) begin
/* main: %160*/
/*   %.sum18 = add i32 %idxscale17, %172*/
begin
main_160__sum18 = (main_160_idxscale17 + main_160_172_reg);
end
end
always @(posedge clk) begin
/* main: %160*/
/*   %.sum18 = add i32 %idxscale17, %172*/
if ((cur_state == LEGUP_F_main_BB_160_41))
begin
main_160__sum18_reg <= main_160__sum18;
if (reset == 1'b0 && ^(main_160__sum18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160__sum18_reg"); $finish; end
end
end
always @(*) begin
/* main: %160*/
/*   %175 = getelementptr inbounds [36 x i32]* %5, i32 0, i32 %.sum18*/
begin
main_160_175 = (1'd0 + (4 * main_160__sum18_reg));
end
end
always @(posedge clk) begin
/* main: %160*/
/*   %175 = getelementptr inbounds [36 x i32]* %5, i32 0, i32 %.sum18*/
if ((cur_state == LEGUP_F_main_BB_160_42))
begin
main_160_175_reg <= main_160_175;
if (reset == 1'b0 && ^(main_160_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_175_reg"); $finish; end
end
end
always @(*) begin
/* main: %160*/
/*   %176 = load i32* %175, align 4, !tbaa !0*/
begin
main_160_176 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %160*/
/*   %176 = load i32* %175, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_160_43))
begin
main_160_176_reg <= main_160_176;
if (reset == 1'b0 && ^(main_160_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_176_reg"); $finish; end
end
end
always @(*) begin
/* main: %160*/
/*   %177 = icmp eq i32 %176, -1*/
begin
main_160_177 = (main_160_176 == -32'd1);
end
end
always @(posedge clk) begin
/* main: %160*/
/*   %177 = icmp eq i32 %176, -1*/
if ((cur_state == LEGUP_F_main_BB_160_43))
begin
main_160_177_reg <= main_160_177;
if (reset == 1'b0 && ^(main_160_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_177_reg"); $finish; end
end
end
always @(*) begin
/* main: %160*/
/*   %178 = icmp ult i32 %166, 6*/
begin
main_160_178 = (main_160_166 < 32'd6);
end
end
always @(posedge clk) begin
/* main: %160*/
/*   %178 = icmp ult i32 %166, 6*/
if ((cur_state == LEGUP_F_main_BB_160_40))
begin
main_160_178_reg <= main_160_178;
if (reset == 1'b0 && ^(main_160_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_178_reg"); $finish; end
end
end
always @(*) begin
/* main: %160*/
/*   %or.cond = and i1 %177, %178*/
begin
main_160_or_cond = (main_160_177 & main_160_178_reg);
end
end
always @(posedge clk) begin
/* main: %160*/
/*   %or.cond = and i1 %177, %178*/
if ((cur_state == LEGUP_F_main_BB_160_43))
begin
main_160_or_cond_reg <= main_160_or_cond;
if (reset == 1'b0 && ^(main_160_or_cond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_or_cond_reg"); $finish; end
end
end
always @(*) begin
/* main: %160*/
/*   %179 = icmp ult i32 %172, 6*/
begin
main_160_179 = (main_160_172 < 32'd6);
end
end
always @(posedge clk) begin
/* main: %160*/
/*   %179 = icmp ult i32 %172, 6*/
if ((cur_state == LEGUP_F_main_BB_160_40))
begin
main_160_179_reg <= main_160_179;
if (reset == 1'b0 && ^(main_160_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_179_reg"); $finish; end
end
end
always @(*) begin
/* main: %160*/
/*   %or.cond22 = and i1 %or.cond, %179*/
begin
main_160_or_cond22 = (main_160_or_cond & main_160_179_reg);
end
end
always @(posedge clk) begin
/* main: %160*/
/*   %or.cond22 = and i1 %or.cond, %179*/
if ((cur_state == LEGUP_F_main_BB_160_43))
begin
main_160_or_cond22_reg <= main_160_or_cond22;
if (reset == 1'b0 && ^(main_160_or_cond22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_or_cond22_reg"); $finish; end
end
end
always @(*) begin
/* main: %181*/
/*   %182 = icmp sgt i32 %174, 28*/
begin
main_181_182 = ($signed(main_160_174_reg) > $signed(32'd28));
end
end
always @(posedge clk) begin
/* main: %181*/
/*   %182 = icmp sgt i32 %174, 28*/
if ((cur_state == LEGUP_F_main_BB_181_46))
begin
main_181_182_reg <= main_181_182;
if (reset == 1'b0 && ^(main_181_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_181_182_reg"); $finish; end
end
end
always @(*) begin
/* main: %185*/
/*   %pos_a_Y.1 = phi i32 [ %172, %180 ], [ %pos_a_Y.0, %181 ]*/
if (((cur_state == LEGUP_F_main_BB_180_45) & (memory_controller_waitrequest == 1'd0)))
begin
main_185_pos_a_Y_1 = main_160_172_reg;
end
/* main: %185*/
/*   %pos_a_Y.1 = phi i32 [ %172, %180 ], [ %pos_a_Y.0, %181 ]*/
else /* if ((((cur_state == LEGUP_F_main_BB_181_46) & (memory_controller_waitrequest == 1'd0)) & (main_181_182 == 1'd0))) */
begin
main_185_pos_a_Y_1 = main__backedge_pos_a_Y_0_reg;
end
end
always @(posedge clk) begin
/* main: %185*/
/*   %pos_a_Y.1 = phi i32 [ %172, %180 ], [ %pos_a_Y.0, %181 ]*/
if (((cur_state == LEGUP_F_main_BB_180_45) & (memory_controller_waitrequest == 1'd0)))
begin
main_185_pos_a_Y_1_reg <= main_185_pos_a_Y_1;
if (reset == 1'b0 && ^(main_185_pos_a_Y_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_pos_a_Y_1_reg"); $finish; end
end
/* main: %185*/
/*   %pos_a_Y.1 = phi i32 [ %172, %180 ], [ %pos_a_Y.0, %181 ]*/
if ((((cur_state == LEGUP_F_main_BB_181_46) & (memory_controller_waitrequest == 1'd0)) & (main_181_182 == 1'd0)))
begin
main_185_pos_a_Y_1_reg <= main_185_pos_a_Y_1;
if (reset == 1'b0 && ^(main_185_pos_a_Y_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_pos_a_Y_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %185*/
/*   %pos_a_X.1 = phi i32 [ %166, %180 ], [ %pos_a_X.0, %181 ]*/
if (((cur_state == LEGUP_F_main_BB_180_45) & (memory_controller_waitrequest == 1'd0)))
begin
main_185_pos_a_X_1 = main_160_166_reg;
end
/* main: %185*/
/*   %pos_a_X.1 = phi i32 [ %166, %180 ], [ %pos_a_X.0, %181 ]*/
else /* if ((((cur_state == LEGUP_F_main_BB_181_46) & (memory_controller_waitrequest == 1'd0)) & (main_181_182 == 1'd0))) */
begin
main_185_pos_a_X_1 = main__backedge_pos_a_X_0_reg;
end
end
always @(posedge clk) begin
/* main: %185*/
/*   %pos_a_X.1 = phi i32 [ %166, %180 ], [ %pos_a_X.0, %181 ]*/
if (((cur_state == LEGUP_F_main_BB_180_45) & (memory_controller_waitrequest == 1'd0)))
begin
main_185_pos_a_X_1_reg <= main_185_pos_a_X_1;
if (reset == 1'b0 && ^(main_185_pos_a_X_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_pos_a_X_1_reg"); $finish; end
end
/* main: %185*/
/*   %pos_a_X.1 = phi i32 [ %166, %180 ], [ %pos_a_X.0, %181 ]*/
if ((((cur_state == LEGUP_F_main_BB_181_46) & (memory_controller_waitrequest == 1'd0)) & (main_181_182 == 1'd0)))
begin
main_185_pos_a_X_1_reg <= main_185_pos_a_X_1;
if (reset == 1'b0 && ^(main_185_pos_a_X_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_pos_a_X_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %185*/
/*   %186 = icmp eq i32 %pos_a_X.1, -1*/
begin
main_185_186 = (main_185_pos_a_X_1_reg == -32'd1);
end
end
always @(posedge clk) begin
/* main: %185*/
/*   %186 = icmp eq i32 %pos_a_X.1, -1*/
if ((cur_state == LEGUP_F_main_BB_185_48))
begin
main_185_186_reg <= main_185_186;
if (reset == 1'b0 && ^(main_185_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_186_reg"); $finish; end
end
end
always @(*) begin
/* main: %185*/
/*   %.23 = select i1 %186, i32 %174, i32 0*/
begin
main_185__23 = (main_185_186 ? main_160_174_reg : 32'd0);
end
end
always @(posedge clk) begin
/* main: %185*/
/*   %.23 = select i1 %186, i32 %174, i32 0*/
if ((cur_state == LEGUP_F_main_BB_185_48))
begin
main_185__23_reg <= main_185__23;
if (reset == 1'b0 && ^(main_185__23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185__23_reg"); $finish; end
end
end
always @(*) begin
/* main: %185*/
/*   %.24 = select i1 %186, i32 2, i32 3*/
begin
main_185__24 = (main_185_186 ? 32'd2 : 32'd3);
end
end
always @(posedge clk) begin
/* main: %185*/
/*   %.24 = select i1 %186, i32 2, i32 3*/
if ((cur_state == LEGUP_F_main_BB_185_48))
begin
main_185__24_reg <= main_185__24;
if (reset == 1'b0 && ^(main_185__24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185__24_reg"); $finish; end
end
end
always @(*) begin
/* main: %187*/
/*   %188 = icmp eq i32 %pos_b_X.0, -1*/
begin
main_187_188 = (main__backedge_pos_b_X_0_reg == -32'd1);
end
end
always @(posedge clk) begin
/* main: %187*/
/*   %188 = icmp eq i32 %pos_b_X.0, -1*/
if ((cur_state == LEGUP_F_main_BB_187_49))
begin
main_187_188_reg <= main_187_188;
if (reset == 1'b0 && ^(main_187_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_188_reg"); $finish; end
end
end
always @(*) begin
/* main: %189*/
/*   %190 = add nsw i32 %i.0, 1*/
begin
main_189_190 = (main__backedge_i_0_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %189*/
/*   %190 = add nsw i32 %i.0, 1*/
if ((cur_state == LEGUP_F_main_BB_189_50))
begin
main_189_190_reg <= main_189_190;
if (reset == 1'b0 && ^(main_189_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_190_reg"); $finish; end
end
end
always @(*) begin
/* main: %191*/
/*   %192 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 %j.0*/
begin
main_191_192 = (1'd0 + (4 * main__backedge_j_0_reg));
end
end
always @(posedge clk) begin
/* main: %191*/
/*   %192 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 %j.0*/
if ((cur_state == LEGUP_F_main_BB_191_51))
begin
main_191_192_reg <= main_191_192;
if (reset == 1'b0 && ^(main_191_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_191_192_reg"); $finish; end
end
end
always @(*) begin
/* main: %191*/
/*   %193 = load i32* %192, align 4, !tbaa !0*/
begin
main_191_193 = main_0_6_out_b;
end
end
always @(posedge clk) begin
/* main: %191*/
/*   %193 = load i32* %192, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_191_52))
begin
main_191_193_reg <= main_191_193;
if (reset == 1'b0 && ^(main_191_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_191_193_reg"); $finish; end
end
end
always @(*) begin
/* main: %191*/
/*   %194 = add nsw i32 %193, %pos_a_X.0*/
begin
main_191_194 = (main_191_193 + main__backedge_pos_a_X_0_reg);
end
end
always @(posedge clk) begin
/* main: %191*/
/*   %194 = add nsw i32 %193, %pos_a_X.0*/
if ((cur_state == LEGUP_F_main_BB_191_52))
begin
main_191_194_reg <= main_191_194;
if (reset == 1'b0 && ^(main_191_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_191_194_reg"); $finish; end
end
end
always @(*) begin
/* main: %191*/
/*   %195 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 %j.0*/
begin
main_191_195 = (1'd0 + (4 * main__backedge_j_0_reg));
end
end
always @(posedge clk) begin
/* main: %191*/
/*   %195 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 %j.0*/
if ((cur_state == LEGUP_F_main_BB_191_51))
begin
main_191_195_reg <= main_191_195;
if (reset == 1'b0 && ^(main_191_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_191_195_reg"); $finish; end
end
end
always @(*) begin
/* main: %191*/
/*   %196 = load i32* %195, align 4, !tbaa !0*/
begin
main_191_196 = main_0_7_out_b;
end
end
always @(posedge clk) begin
/* main: %191*/
/*   %196 = load i32* %195, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_191_52))
begin
main_191_196_reg <= main_191_196;
if (reset == 1'b0 && ^(main_191_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_191_196_reg"); $finish; end
end
end
always @(*) begin
/* main: %191*/
/*   %197 = add nsw i32 %196, %pos_a_Y.0*/
begin
main_191_197 = (main_191_196 + main__backedge_pos_a_Y_0_reg);
end
end
always @(posedge clk) begin
/* main: %191*/
/*   %197 = add nsw i32 %196, %pos_a_Y.0*/
if ((cur_state == LEGUP_F_main_BB_191_52))
begin
main_191_197_reg <= main_191_197;
if (reset == 1'b0 && ^(main_191_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_191_197_reg"); $finish; end
end
end
always @(*) begin
/* main: %191*/
/*   %198 = add nsw i32 %j.0, 1*/
begin
main_191_198 = (main__backedge_j_0_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %191*/
/*   %198 = add nsw i32 %j.0, 1*/
if ((cur_state == LEGUP_F_main_BB_191_51))
begin
main_191_198_reg <= main_191_198;
if (reset == 1'b0 && ^(main_191_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_191_198_reg"); $finish; end
end
end
always @(*) begin
main_191_idxscale15 = main_191_idxscale15_stage0_reg;
end
always @(posedge clk) begin
/* main: %191*/
/*   %idxscale15 = mul i32 %194, 6*/
if ((cur_state == LEGUP_F_main_BB_191_53))
begin
main_191_idxscale15_reg <= main_191_idxscale15;
if (reset == 1'b0 && ^(main_191_idxscale15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_191_idxscale15_reg"); $finish; end
end
/* main: %191*/
/*   %idxscale15 = mul i32 %194, 6*/
if ((cur_state == LEGUP_F_main_BB_191_53))
begin
main_191_idxscale15_reg <= main_191_idxscale15;
if (reset == 1'b0 && ^(main_191_idxscale15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_191_idxscale15_reg"); $finish; end
end
end
always @(*) begin
/* main: %191*/
/*   %.sum16 = add i32 %idxscale15, %197*/
begin
main_191__sum16 = (main_191_idxscale15 + main_191_197_reg);
end
end
always @(posedge clk) begin
/* main: %191*/
/*   %.sum16 = add i32 %idxscale15, %197*/
if ((cur_state == LEGUP_F_main_BB_191_53))
begin
main_191__sum16_reg <= main_191__sum16;
if (reset == 1'b0 && ^(main_191__sum16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_191__sum16_reg"); $finish; end
end
end
always @(*) begin
/* main: %191*/
/*   %199 = getelementptr inbounds [36 x i32]* %5, i32 0, i32 %.sum16*/
begin
main_191_199 = (1'd0 + (4 * main_191__sum16_reg));
end
end
always @(posedge clk) begin
/* main: %191*/
/*   %199 = getelementptr inbounds [36 x i32]* %5, i32 0, i32 %.sum16*/
if ((cur_state == LEGUP_F_main_BB_191_54))
begin
main_191_199_reg <= main_191_199;
if (reset == 1'b0 && ^(main_191_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_191_199_reg"); $finish; end
end
end
always @(*) begin
/* main: %191*/
/*   %200 = load i32* %199, align 4, !tbaa !0*/
begin
main_191_200 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %191*/
/*   %200 = load i32* %199, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_191_55))
begin
main_191_200_reg <= main_191_200;
if (reset == 1'b0 && ^(main_191_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_191_200_reg"); $finish; end
end
end
always @(*) begin
/* main: %191*/
/*   %201 = icmp eq i32 %200, -1*/
begin
main_191_201 = (main_191_200 == -32'd1);
end
end
always @(posedge clk) begin
/* main: %191*/
/*   %201 = icmp eq i32 %200, -1*/
if ((cur_state == LEGUP_F_main_BB_191_55))
begin
main_191_201_reg <= main_191_201;
if (reset == 1'b0 && ^(main_191_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_191_201_reg"); $finish; end
end
end
always @(*) begin
/* main: %191*/
/*   %202 = icmp ult i32 %194, 6*/
begin
main_191_202 = (main_191_194 < 32'd6);
end
end
always @(posedge clk) begin
/* main: %191*/
/*   %202 = icmp ult i32 %194, 6*/
if ((cur_state == LEGUP_F_main_BB_191_52))
begin
main_191_202_reg <= main_191_202;
if (reset == 1'b0 && ^(main_191_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_191_202_reg"); $finish; end
end
end
always @(*) begin
/* main: %191*/
/*   %or.cond25 = and i1 %201, %202*/
begin
main_191_or_cond25 = (main_191_201 & main_191_202_reg);
end
end
always @(posedge clk) begin
/* main: %191*/
/*   %or.cond25 = and i1 %201, %202*/
if ((cur_state == LEGUP_F_main_BB_191_55))
begin
main_191_or_cond25_reg <= main_191_or_cond25;
if (reset == 1'b0 && ^(main_191_or_cond25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_191_or_cond25_reg"); $finish; end
end
end
always @(*) begin
/* main: %191*/
/*   %203 = icmp ult i32 %197, 6*/
begin
main_191_203 = (main_191_197 < 32'd6);
end
end
always @(posedge clk) begin
/* main: %191*/
/*   %203 = icmp ult i32 %197, 6*/
if ((cur_state == LEGUP_F_main_BB_191_52))
begin
main_191_203_reg <= main_191_203;
if (reset == 1'b0 && ^(main_191_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_191_203_reg"); $finish; end
end
end
always @(*) begin
/* main: %191*/
/*   %or.cond26 = and i1 %or.cond25, %203*/
begin
main_191_or_cond26 = (main_191_or_cond25 & main_191_203_reg);
end
end
always @(posedge clk) begin
/* main: %191*/
/*   %or.cond26 = and i1 %or.cond25, %203*/
if ((cur_state == LEGUP_F_main_BB_191_55))
begin
main_191_or_cond26_reg <= main_191_or_cond26;
if (reset == 1'b0 && ^(main_191_or_cond26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_191_or_cond26_reg"); $finish; end
end
end
always @(*) begin
/* main: %204*/
/*   %205 = getelementptr inbounds [35 x i32]* %3, i32 0, i32 %b.0*/
begin
main_204_205 = (1'd0 + (4 * main__backedge_b_0_reg));
end
end
always @(posedge clk) begin
/* main: %204*/
/*   %205 = getelementptr inbounds [35 x i32]* %3, i32 0, i32 %b.0*/
if ((cur_state == LEGUP_F_main_BB_204_56))
begin
main_204_205_reg <= main_204_205;
if (reset == 1'b0 && ^(main_204_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_204_205_reg"); $finish; end
end
end
always @(*) begin
/* main: %204*/
/*   %206 = getelementptr inbounds [35 x i32]* %4, i32 0, i32 %b.0*/
begin
main_204_206 = (1'd0 + (4 * main__backedge_b_0_reg));
end
end
always @(posedge clk) begin
/* main: %204*/
/*   %206 = getelementptr inbounds [35 x i32]* %4, i32 0, i32 %b.0*/
if ((cur_state == LEGUP_F_main_BB_204_56))
begin
main_204_206_reg <= main_204_206;
if (reset == 1'b0 && ^(main_204_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_204_206_reg"); $finish; end
end
end
always @(*) begin
/* main: %204*/
/*   %207 = add nsw i32 %i.0, 1*/
begin
main_204_207 = (main__backedge_i_0_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %204*/
/*   %207 = add nsw i32 %i.0, 1*/
if ((cur_state == LEGUP_F_main_BB_204_56))
begin
main_204_207_reg <= main_204_207;
if (reset == 1'b0 && ^(main_204_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_204_207_reg"); $finish; end
end
end
always @(*) begin
/* main: %208*/
/*   %209 = icmp sgt i32 %198, 28*/
begin
main_208_209 = ($signed(main_191_198_reg) > $signed(32'd28));
end
end
always @(posedge clk) begin
/* main: %208*/
/*   %209 = icmp sgt i32 %198, 28*/
if ((cur_state == LEGUP_F_main_BB_208_58))
begin
main_208_209_reg <= main_208_209;
if (reset == 1'b0 && ^(main_208_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_208_209_reg"); $finish; end
end
end
always @(*) begin
/* main: %212*/
/*   %213 = zext i1 %188 to i32*/
begin
main_212_213 = main_187_188_reg;
end
end
always @(posedge clk) begin
/* main: %212*/
/*   %213 = zext i1 %188 to i32*/
if ((cur_state == LEGUP_F_main_BB_212_60))
begin
main_212_213_reg <= main_212_213;
if (reset == 1'b0 && ^(main_212_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_212_213_reg"); $finish; end
end
end
always @(*) begin
/* main: %212*/
/*   %214 = xor i32 %213, 1*/
begin
main_212_214 = (main_212_213 ^ 32'd1);
end
end
always @(posedge clk) begin
/* main: %212*/
/*   %214 = xor i32 %213, 1*/
if ((cur_state == LEGUP_F_main_BB_212_60))
begin
main_212_214_reg <= main_212_214;
if (reset == 1'b0 && ^(main_212_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_212_214_reg"); $finish; end
end
end
always @(*) begin
/* main: %212*/
/*   %i.0. = add i32 %i.0, %214*/
begin
main_212_i_0_ = (main__backedge_i_0_reg + main_212_214);
end
end
always @(posedge clk) begin
/* main: %212*/
/*   %i.0. = add i32 %i.0, %214*/
if ((cur_state == LEGUP_F_main_BB_212_60))
begin
main_212_i_0__reg <= main_212_i_0_;
if (reset == 1'b0 && ^(main_212_i_0_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_212_i_0__reg"); $finish; end
end
end
always @(*) begin
/* main: %216*/
/*   %217 = icmp eq i32 %i.0, 37*/
begin
main_216_217 = (main__backedge_i_0_reg == 32'd37);
end
end
always @(posedge clk) begin
/* main: %216*/
/*   %217 = icmp eq i32 %i.0, 37*/
if ((cur_state == LEGUP_F_main_BB_216_62))
begin
main_216_217_reg <= main_216_217;
if (reset == 1'b0 && ^(main_216_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_216_217_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %219 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 %i.0*/
begin
main_218_219 = (1'd0 + (4 * main__backedge_i_0_reg));
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %219 = getelementptr inbounds [37 x i32]* %1, i32 0, i32 %i.0*/
if ((cur_state == LEGUP_F_main_BB_218_63))
begin
main_218_219_reg <= main_218_219;
if (reset == 1'b0 && ^(main_218_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_219_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %220 = load i32* %219, align 4, !tbaa !0*/
begin
main_218_220 = main_0_1_out_a;
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %220 = load i32* %219, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_64))
begin
main_218_220_reg <= main_218_220;
if (reset == 1'b0 && ^(main_218_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_220_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %221 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 %i.0*/
begin
main_218_221 = (1'd0 + (4 * main__backedge_i_0_reg));
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %221 = getelementptr inbounds [37 x i32]* %2, i32 0, i32 %i.0*/
if ((cur_state == LEGUP_F_main_BB_218_63))
begin
main_218_221_reg <= main_218_221;
if (reset == 1'b0 && ^(main_218_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_221_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %222 = load i32* %221, align 4, !tbaa !0*/
begin
main_218_222 = main_0_2_out_a;
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %222 = load i32* %221, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_64))
begin
main_218_222_reg <= main_218_222;
if (reset == 1'b0 && ^(main_218_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_222_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %223 = getelementptr inbounds [35 x i32]* %3, i32 0, i32 %220*/
begin
main_218_223 = (1'd0 + (4 * main_218_220));
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %223 = getelementptr inbounds [35 x i32]* %3, i32 0, i32 %220*/
if ((cur_state == LEGUP_F_main_BB_218_64))
begin
main_218_223_reg <= main_218_223;
if (reset == 1'b0 && ^(main_218_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_223_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %224 = load i32* %223, align 4, !tbaa !0*/
begin
main_218_224 = main_0_3_out_a;
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %224 = load i32* %223, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_65))
begin
main_218_224_reg <= main_218_224;
if (reset == 1'b0 && ^(main_218_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_224_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %225 = getelementptr inbounds [35 x i32]* %3, i32 0, i32 %222*/
begin
main_218_225 = (1'd0 + (4 * main_218_222));
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %225 = getelementptr inbounds [35 x i32]* %3, i32 0, i32 %222*/
if ((cur_state == LEGUP_F_main_BB_218_64))
begin
main_218_225_reg <= main_218_225;
if (reset == 1'b0 && ^(main_218_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_225_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %226 = load i32* %225, align 4, !tbaa !0*/
begin
main_218_226 = main_0_3_out_b;
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %226 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_65))
begin
main_218_226_reg <= main_218_226;
if (reset == 1'b0 && ^(main_218_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_226_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %227 = sub nsw i32 %224, %226*/
begin
main_218_227 = (main_218_224 - main_218_226);
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %227 = sub nsw i32 %224, %226*/
if ((cur_state == LEGUP_F_main_BB_218_65))
begin
main_218_227_reg <= main_218_227;
if (reset == 1'b0 && ^(main_218_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_227_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %228 = sub i32 0, %227*/
begin
main_218_228 = (32'd0 - main_218_227);
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %228 = sub i32 0, %227*/
if ((cur_state == LEGUP_F_main_BB_218_65))
begin
main_218_228_reg <= main_218_228;
if (reset == 1'b0 && ^(main_218_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_228_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %229 = icmp slt i32 %227, 0*/
begin
main_218_229 = ($signed(main_218_227) < $signed(32'd0));
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %229 = icmp slt i32 %227, 0*/
if ((cur_state == LEGUP_F_main_BB_218_65))
begin
main_218_229_reg <= main_218_229;
if (reset == 1'b0 && ^(main_218_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_229_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %.27 = select i1 %229, i32 %228, i32 %227*/
begin
main_218__27 = (main_218_229 ? main_218_228 : main_218_227);
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %.27 = select i1 %229, i32 %228, i32 %227*/
if ((cur_state == LEGUP_F_main_BB_218_65))
begin
main_218__27_reg <= main_218__27;
if (reset == 1'b0 && ^(main_218__27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218__27_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %230 = getelementptr inbounds [35 x i32]* %4, i32 0, i32 %220*/
begin
main_218_230 = (1'd0 + (4 * main_218_220));
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %230 = getelementptr inbounds [35 x i32]* %4, i32 0, i32 %220*/
if ((cur_state == LEGUP_F_main_BB_218_64))
begin
main_218_230_reg <= main_218_230;
if (reset == 1'b0 && ^(main_218_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_230_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %231 = load i32* %230, align 4, !tbaa !0*/
begin
main_218_231 = main_0_4_out_a;
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %231 = load i32* %230, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_65))
begin
main_218_231_reg <= main_218_231;
if (reset == 1'b0 && ^(main_218_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_231_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %232 = getelementptr inbounds [35 x i32]* %4, i32 0, i32 %222*/
begin
main_218_232 = (1'd0 + (4 * main_218_222));
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %232 = getelementptr inbounds [35 x i32]* %4, i32 0, i32 %222*/
if ((cur_state == LEGUP_F_main_BB_218_64))
begin
main_218_232_reg <= main_218_232;
if (reset == 1'b0 && ^(main_218_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_232_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %233 = load i32* %232, align 4, !tbaa !0*/
begin
main_218_233 = main_0_4_out_b;
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %233 = load i32* %232, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_65))
begin
main_218_233_reg <= main_218_233;
if (reset == 1'b0 && ^(main_218_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_233_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %234 = sub nsw i32 %231, %233*/
begin
main_218_234 = (main_218_231 - main_218_233);
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %234 = sub nsw i32 %231, %233*/
if ((cur_state == LEGUP_F_main_BB_218_65))
begin
main_218_234_reg <= main_218_234;
if (reset == 1'b0 && ^(main_218_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_234_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %235 = icmp slt i32 %234, 0*/
begin
main_218_235 = ($signed(main_218_234) < $signed(32'd0));
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %235 = icmp slt i32 %234, 0*/
if ((cur_state == LEGUP_F_main_BB_218_65))
begin
main_218_235_reg <= main_218_235;
if (reset == 1'b0 && ^(main_218_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_235_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %236 = sub i32 0, %234*/
begin
main_218_236 = (32'd0 - main_218_234);
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %236 = sub i32 0, %234*/
if ((cur_state == LEGUP_F_main_BB_218_65))
begin
main_218_236_reg <= main_218_236;
if (reset == 1'b0 && ^(main_218_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_236_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %diff_pos_y.0 = select i1 %235, i32 %236, i32 %234*/
begin
main_218_diff_pos_y_0 = (main_218_235 ? main_218_236 : main_218_234);
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %diff_pos_y.0 = select i1 %235, i32 %236, i32 %234*/
if ((cur_state == LEGUP_F_main_BB_218_65))
begin
main_218_diff_pos_y_0_reg <= main_218_diff_pos_y_0;
if (reset == 1'b0 && ^(main_218_diff_pos_y_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_diff_pos_y_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %237 = add i32 %sum.0, -1*/
begin
main_218_237 = (main__backedge_sum_0_reg + -32'd1);
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %237 = add i32 %sum.0, -1*/
if ((cur_state == LEGUP_F_main_BB_218_63))
begin
main_218_237_reg <= main_218_237;
if (reset == 1'b0 && ^(main_218_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_237_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %238 = add i32 %237, %.27*/
begin
main_218_238 = (main_218_237_reg + main_218__27_reg);
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %238 = add i32 %237, %.27*/
if ((cur_state == LEGUP_F_main_BB_218_66))
begin
main_218_238_reg <= main_218_238;
if (reset == 1'b0 && ^(main_218_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_238_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %239 = add i32 %238, %diff_pos_y.0*/
begin
main_218_239 = (main_218_238 + main_218_diff_pos_y_0_reg);
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %239 = add i32 %238, %diff_pos_y.0*/
if ((cur_state == LEGUP_F_main_BB_218_66))
begin
main_218_239_reg <= main_218_239;
if (reset == 1'b0 && ^(main_218_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_239_reg"); $finish; end
end
end
always @(*) begin
main_218_240 = main_signed_divide_32_0;
end
always @(posedge clk) begin
/* main: %218*/
/*   %240 = sdiv i32 %.27, 2*/
if ((cur_state == LEGUP_F_main_BB_218_97))
begin
main_218_240_reg <= main_218_240;
if (reset == 1'b0 && ^(main_218_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_240_reg"); $finish; end
end
/* main: %218*/
/*   %240 = sdiv i32 %.27, 2*/
if ((cur_state == LEGUP_F_main_BB_218_97))
begin
main_218_240_reg <= main_218_240;
if (reset == 1'b0 && ^(main_218_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_240_reg"); $finish; end
end
/* main: %218*/
/*   %242 = sdiv i32 %diff_pos_y.0, 2*/
if ((cur_state == LEGUP_F_main_BB_218_98))
begin
main_218_240_reg <= main_218_242;
if (reset == 1'b0 && ^(main_218_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_240_reg"); $finish; end
end
end
always @(*) begin
main_218_241 = main_signed_modulus_32_0;
end
always @(posedge clk) begin
/* main: %218*/
/*   %241 = srem i32 %.27, 2*/
if ((cur_state == LEGUP_F_main_BB_218_97))
begin
main_218_241_reg <= main_218_241;
if (reset == 1'b0 && ^(main_218_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_241_reg"); $finish; end
end
/* main: %218*/
/*   %241 = srem i32 %.27, 2*/
if ((cur_state == LEGUP_F_main_BB_218_97))
begin
main_218_241_reg <= main_218_241;
if (reset == 1'b0 && ^(main_218_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_241_reg"); $finish; end
end
end
always @(*) begin
main_218_242 = main_signed_divide_32_0;
end
always @(*) begin
/* main: %218*/
/*   %242 = sdiv i32 %diff_pos_y.0, 2*/
main_218_242_reg = main_218_240_reg;
end
always @(*) begin
main_218_243 = main_signed_modulus_32_1;
end
always @(posedge clk) begin
/* main: %218*/
/*   %243 = srem i32 %diff_pos_y.0, 2*/
if ((cur_state == LEGUP_F_main_BB_218_97))
begin
main_218_243_reg <= main_218_243;
if (reset == 1'b0 && ^(main_218_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_243_reg"); $finish; end
end
/* main: %218*/
/*   %243 = srem i32 %diff_pos_y.0, 2*/
if ((cur_state == LEGUP_F_main_BB_218_97))
begin
main_218_243_reg <= main_218_243;
if (reset == 1'b0 && ^(main_218_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_243_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %244 = add i32 %sum_1hop.0, -1*/
begin
main_218_244 = (main__backedge_sum_1hop_0_reg + -32'd1);
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %244 = add i32 %sum_1hop.0, -1*/
if ((cur_state == LEGUP_F_main_BB_218_63))
begin
main_218_244_reg <= main_218_244;
if (reset == 1'b0 && ^(main_218_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_244_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %245 = add i32 %244, %240*/
begin
main_218_245 = (main_218_244_reg + main_218_240);
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %245 = add i32 %244, %240*/
if ((cur_state == LEGUP_F_main_BB_218_97))
begin
main_218_245_reg <= main_218_245;
if (reset == 1'b0 && ^(main_218_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_245_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %246 = add i32 %245, %241*/
begin
main_218_246 = (main_218_245 + main_218_241);
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %246 = add i32 %245, %241*/
if ((cur_state == LEGUP_F_main_BB_218_97))
begin
main_218_246_reg <= main_218_246;
if (reset == 1'b0 && ^(main_218_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_246_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %247 = add i32 %246, %242*/
begin
main_218_247 = (main_218_246_reg + main_218_242);
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %247 = add i32 %246, %242*/
if ((cur_state == LEGUP_F_main_BB_218_98))
begin
main_218_247_reg <= main_218_247;
if (reset == 1'b0 && ^(main_218_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_247_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %248 = add i32 %247, %243*/
begin
main_218_248 = (main_218_247 + main_218_243_reg);
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %248 = add i32 %247, %243*/
if ((cur_state == LEGUP_F_main_BB_218_98))
begin
main_218_248_reg <= main_218_248;
if (reset == 1'b0 && ^(main_218_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_248_reg"); $finish; end
end
end
always @(*) begin
/* main: %218*/
/*   %249 = add nsw i32 %i.0, 1*/
begin
main_218_249 = (main__backedge_i_0_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %218*/
/*   %249 = add nsw i32 %i.0, 1*/
if ((cur_state == LEGUP_F_main_BB_218_63))
begin
main_218_249_reg <= main_218_249;
if (reset == 1'b0 && ^(main_218_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_218_249_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %i.330 = phi i32 [ %263, %.preheader ], [ 0, %.preheader.preheader ]*/
if (((cur_state == LEGUP_F_main_BB__preheader_preheader_4) & (memory_controller_waitrequest == 1'd0)))
begin
main__preheader_i_330 = 32'd0;
end
/* main: %.preheader*/
/*   %i.330 = phi i32 [ %263, %.preheader ], [ 0, %.preheader.preheader ]*/
else /* if ((((cur_state == LEGUP_F_main_BB__preheader_103) & (memory_controller_waitrequest == 1'd0)) & (main__preheader_exitcond_reg == 1'd0))) */
begin
main__preheader_i_330 = main__preheader_263_reg;
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %i.330 = phi i32 [ %263, %.preheader ], [ 0, %.preheader.preheader ]*/
if (((cur_state == LEGUP_F_main_BB__preheader_preheader_4) & (memory_controller_waitrequest == 1'd0)))
begin
main__preheader_i_330_reg <= main__preheader_i_330;
if (reset == 1'b0 && ^(main__preheader_i_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_i_330_reg"); $finish; end
end
/* main: %.preheader*/
/*   %i.330 = phi i32 [ %263, %.preheader ], [ 0, %.preheader.preheader ]*/
if ((((cur_state == LEGUP_F_main_BB__preheader_103) & (memory_controller_waitrequest == 1'd0)) & (main__preheader_exitcond_reg == 1'd0)))
begin
main__preheader_i_330_reg <= main__preheader_i_330;
if (reset == 1'b0 && ^(main__preheader_i_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_i_330_reg"); $finish; end
end
end
always @(*) begin
main__preheader_tmp40 = main__preheader_tmp40_stage0_reg;
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %tmp40 = mul i32 %i.330, 6*/
if ((cur_state == LEGUP_F_main_BB__preheader_100))
begin
main__preheader_tmp40_reg <= main__preheader_tmp40;
if (reset == 1'b0 && ^(main__preheader_tmp40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_tmp40_reg"); $finish; end
end
/* main: %.preheader*/
/*   %tmp40 = mul i32 %i.330, 6*/
if ((cur_state == LEGUP_F_main_BB__preheader_100))
begin
main__preheader_tmp40_reg <= main__preheader_tmp40;
if (reset == 1'b0 && ^(main__preheader_tmp40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_tmp40_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %tmp5080 = or i32 %tmp40, 1*/
begin
main__preheader_tmp5080 = (main__preheader_tmp40 | 32'd1);
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %tmp5080 = or i32 %tmp40, 1*/
if ((cur_state == LEGUP_F_main_BB__preheader_100))
begin
main__preheader_tmp5080_reg <= main__preheader_tmp5080;
if (reset == 1'b0 && ^(main__preheader_tmp5080) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_tmp5080_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %tmp48 = add i32 %tmp40, 2*/
begin
main__preheader_tmp48 = (main__preheader_tmp40 + 32'd2);
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %tmp48 = add i32 %tmp40, 2*/
if ((cur_state == LEGUP_F_main_BB__preheader_100))
begin
main__preheader_tmp48_reg <= main__preheader_tmp48;
if (reset == 1'b0 && ^(main__preheader_tmp48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_tmp48_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %tmp46 = add i32 %tmp40, 3*/
begin
main__preheader_tmp46 = (main__preheader_tmp40 + 32'd3);
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %tmp46 = add i32 %tmp40, 3*/
if ((cur_state == LEGUP_F_main_BB__preheader_100))
begin
main__preheader_tmp46_reg <= main__preheader_tmp46;
if (reset == 1'b0 && ^(main__preheader_tmp46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_tmp46_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %tmp44 = add i32 %tmp40, 4*/
begin
main__preheader_tmp44 = (main__preheader_tmp40 + 32'd4);
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %tmp44 = add i32 %tmp40, 4*/
if ((cur_state == LEGUP_F_main_BB__preheader_100))
begin
main__preheader_tmp44_reg <= main__preheader_tmp44;
if (reset == 1'b0 && ^(main__preheader_tmp44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_tmp44_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %tmp42 = add i32 %tmp40, 5*/
begin
main__preheader_tmp42 = (main__preheader_tmp40 + 32'd5);
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %tmp42 = add i32 %tmp40, 5*/
if ((cur_state == LEGUP_F_main_BB__preheader_100))
begin
main__preheader_tmp42_reg <= main__preheader_tmp42;
if (reset == 1'b0 && ^(main__preheader_tmp42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_tmp42_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %scevgep.1 = getelementptr [36 x i32]* %5, i32 0, i32 %tmp5080*/
begin
main__preheader_scevgep_1 = (1'd0 + (4 * main__preheader_tmp5080));
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %scevgep.1 = getelementptr [36 x i32]* %5, i32 0, i32 %tmp5080*/
if ((cur_state == LEGUP_F_main_BB__preheader_100))
begin
main__preheader_scevgep_1_reg <= main__preheader_scevgep_1;
if (reset == 1'b0 && ^(main__preheader_scevgep_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_scevgep_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %scevgep.2 = getelementptr [36 x i32]* %5, i32 0, i32 %tmp48*/
begin
main__preheader_scevgep_2 = (1'd0 + (4 * main__preheader_tmp48_reg));
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %scevgep.2 = getelementptr [36 x i32]* %5, i32 0, i32 %tmp48*/
if ((cur_state == LEGUP_F_main_BB__preheader_101))
begin
main__preheader_scevgep_2_reg <= main__preheader_scevgep_2;
if (reset == 1'b0 && ^(main__preheader_scevgep_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_scevgep_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %scevgep.3 = getelementptr [36 x i32]* %5, i32 0, i32 %tmp46*/
begin
main__preheader_scevgep_3 = (1'd0 + (4 * main__preheader_tmp46_reg));
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %scevgep.3 = getelementptr [36 x i32]* %5, i32 0, i32 %tmp46*/
if ((cur_state == LEGUP_F_main_BB__preheader_101))
begin
main__preheader_scevgep_3_reg <= main__preheader_scevgep_3;
if (reset == 1'b0 && ^(main__preheader_scevgep_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_scevgep_3_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %scevgep.4 = getelementptr [36 x i32]* %5, i32 0, i32 %tmp44*/
begin
main__preheader_scevgep_4 = (1'd0 + (4 * main__preheader_tmp44_reg));
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %scevgep.4 = getelementptr [36 x i32]* %5, i32 0, i32 %tmp44*/
if ((cur_state == LEGUP_F_main_BB__preheader_101))
begin
main__preheader_scevgep_4_reg <= main__preheader_scevgep_4;
if (reset == 1'b0 && ^(main__preheader_scevgep_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_scevgep_4_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %scevgep.5 = getelementptr [36 x i32]* %5, i32 0, i32 %tmp42*/
begin
main__preheader_scevgep_5 = (1'd0 + (4 * main__preheader_tmp42_reg));
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %scevgep.5 = getelementptr [36 x i32]* %5, i32 0, i32 %tmp42*/
if ((cur_state == LEGUP_F_main_BB__preheader_101))
begin
main__preheader_scevgep_5_reg <= main__preheader_scevgep_5;
if (reset == 1'b0 && ^(main__preheader_scevgep_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_scevgep_5_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %scevgep = getelementptr [36 x i32]* %5, i32 0, i32 %tmp40*/
begin
main__preheader_scevgep = (1'd0 + (4 * main__preheader_tmp40));
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %scevgep = getelementptr [36 x i32]* %5, i32 0, i32 %tmp40*/
if ((cur_state == LEGUP_F_main_BB__preheader_100))
begin
main__preheader_scevgep_reg <= main__preheader_scevgep;
if (reset == 1'b0 && ^(main__preheader_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_scevgep_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %250 = load i32* %scevgep, align 4, !tbaa !0*/
begin
main__preheader_250 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %250 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_101))
begin
main__preheader_250_reg <= main__preheader_250;
if (reset == 1'b0 && ^(main__preheader_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_250_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %252 = load i32* %scevgep.1, align 4, !tbaa !0*/
begin
main__preheader_252 = main_0_5_out_b;
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %252 = load i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_101))
begin
main__preheader_252_reg <= main__preheader_252;
if (reset == 1'b0 && ^(main__preheader_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_252_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %254 = load i32* %scevgep.2, align 4, !tbaa !0*/
begin
main__preheader_254 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %254 = load i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_102))
begin
main__preheader_254_reg <= main__preheader_254;
if (reset == 1'b0 && ^(main__preheader_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_254_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %256 = load i32* %scevgep.3, align 4, !tbaa !0*/
begin
main__preheader_256 = main_0_5_out_b;
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %256 = load i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_102))
begin
main__preheader_256_reg <= main__preheader_256;
if (reset == 1'b0 && ^(main__preheader_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_256_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %258 = load i32* %scevgep.4, align 4, !tbaa !0*/
begin
main__preheader_258 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %258 = load i32* %scevgep.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_103))
begin
main__preheader_258_reg <= main__preheader_258;
if (reset == 1'b0 && ^(main__preheader_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_258_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %260 = load i32* %scevgep.5, align 4, !tbaa !0*/
begin
main__preheader_260 = main_0_5_out_b;
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %260 = load i32* %scevgep.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_103))
begin
main__preheader_260_reg <= main__preheader_260;
if (reset == 1'b0 && ^(main__preheader_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_260_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %263 = add nsw i32 %i.330, 1*/
begin
main__preheader_263 = (main__preheader_i_330_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %263 = add nsw i32 %i.330, 1*/
if ((cur_state == LEGUP_F_main_BB__preheader_99))
begin
main__preheader_263_reg <= main__preheader_263;
if (reset == 1'b0 && ^(main__preheader_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_263_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %exitcond = icmp eq i32 %263, 6*/
begin
main__preheader_exitcond = (main__preheader_263 == 32'd6);
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %exitcond = icmp eq i32 %263, 6*/
if ((cur_state == LEGUP_F_main_BB__preheader_99))
begin
main__preheader_exitcond_reg <= main__preheader_exitcond;
if (reset == 1'b0 && ^(main__preheader_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_exitcond_reg"); $finish; end
end
end
always @(*) begin
/* main: %266*/
/*   %.0 = phi i32 [ 0, %210 ], [ 0, %183 ], [ 1, %264 ]*/
if (((cur_state == LEGUP_F_main_BB_183_47) & (memory_controller_waitrequest == 1'd0)))
begin
main_266__0 = 32'd0;
end
/* main: %266*/
/*   %.0 = phi i32 [ 0, %210 ], [ 0, %183 ], [ 1, %264 ]*/
else if (((cur_state == LEGUP_F_main_BB_210_59) & (memory_controller_waitrequest == 1'd0)))
begin
main_266__0 = 32'd0;
end
/* main: %266*/
/*   %.0 = phi i32 [ 0, %210 ], [ 0, %183 ], [ 1, %264 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_264_104) & (memory_controller_waitrequest == 1'd0))) */
begin
main_266__0 = 32'd1;
end
end
always @(posedge clk) begin
/* main: %266*/
/*   %.0 = phi i32 [ 0, %210 ], [ 0, %183 ], [ 1, %264 ]*/
if (((cur_state == LEGUP_F_main_BB_183_47) & (memory_controller_waitrequest == 1'd0)))
begin
main_266__0_reg <= main_266__0;
if (reset == 1'b0 && ^(main_266__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_266__0_reg"); $finish; end
end
/* main: %266*/
/*   %.0 = phi i32 [ 0, %210 ], [ 0, %183 ], [ 1, %264 ]*/
if (((cur_state == LEGUP_F_main_BB_210_59) & (memory_controller_waitrequest == 1'd0)))
begin
main_266__0_reg <= main_266__0;
if (reset == 1'b0 && ^(main_266__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_266__0_reg"); $finish; end
end
/* main: %266*/
/*   %.0 = phi i32 [ 0, %210 ], [ 0, %183 ], [ 1, %264 ]*/
if (((cur_state == LEGUP_F_main_BB_264_104) & (memory_controller_waitrequest == 1'd0)))
begin
main_266__0_reg <= main_266__0;
if (reset == 1'b0 && ^(main_266__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_266__0_reg"); $finish; end
end
end
always @(*) begin
main_0_1_address_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 0, i32* %.sub8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_5))
begin
main_0_1_address_a = (main_0__sub8_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 2, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_6))
begin
main_0_1_address_a = (main_0_10_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 4, i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_7))
begin
main_0_1_address_a = (main_0_14_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 6, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_8))
begin
main_0_1_address_a = (main_0_18_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 8, i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_9))
begin
main_0_1_address_a = (main_0_22_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 10, i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_10))
begin
main_0_1_address_a = (main_0_26_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 12, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_11))
begin
main_0_1_address_a = (main_0_30_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 13, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_12))
begin
main_0_1_address_a = (main_0_34_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 13, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_1_address_a = (main_0_38_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 15, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_1_address_a = (main_0_42_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 17, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_1_address_a = (main_0_46_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 19, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_1_address_a = (main_0_50_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 21, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_1_address_a = (main_0_54_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 23, i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_1_address_a = (main_0_58_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 25, i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_19))
begin
main_0_1_address_a = (main_0_62_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 27, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_20))
begin
main_0_1_address_a = (main_0_66_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 29, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_21))
begin
main_0_1_address_a = (main_0_70_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 31, i32* %74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_22))
begin
main_0_1_address_a = (main_0_74_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 33, i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_23))
begin
main_0_1_address_a = (main_0_78_reg >>> 3'd2);
end
/* main: %218*/
/*   %220 = load i32* %219, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_63))
begin
main_0_1_address_a = (main_218_219 >>> 3'd2);
end
end
always @(*) begin
main_0_1_write_enable_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 0, i32* %.sub8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_5))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_6))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 4, i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_7))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 6, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_8))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 8, i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_9))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 10, i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_10))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 12, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_11))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 13, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_12))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 13, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 15, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 17, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 19, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 21, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 23, i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 25, i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_19))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 27, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_20))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 29, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_21))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 31, i32* %74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_22))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 33, i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_23))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %218*/
/*   %220 = load i32* %219, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_63))
begin
main_0_1_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_1_in_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 0, i32* %.sub8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_5))
begin
main_0_1_in_a = 32'd0;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_6))
begin
main_0_1_in_a = 32'd2;
end
/* main: %.preheader31*/
/*   store i32 4, i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_7))
begin
main_0_1_in_a = 32'd4;
end
/* main: %.preheader31*/
/*   store i32 6, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_8))
begin
main_0_1_in_a = 32'd6;
end
/* main: %.preheader31*/
/*   store i32 8, i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_9))
begin
main_0_1_in_a = 32'd8;
end
/* main: %.preheader31*/
/*   store i32 10, i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_10))
begin
main_0_1_in_a = 32'd10;
end
/* main: %.preheader31*/
/*   store i32 12, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_11))
begin
main_0_1_in_a = 32'd12;
end
/* main: %.preheader31*/
/*   store i32 13, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_12))
begin
main_0_1_in_a = 32'd13;
end
/* main: %.preheader31*/
/*   store i32 13, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_1_in_a = 32'd13;
end
/* main: %.preheader31*/
/*   store i32 15, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_1_in_a = 32'd15;
end
/* main: %.preheader31*/
/*   store i32 17, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_1_in_a = 32'd17;
end
/* main: %.preheader31*/
/*   store i32 19, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_1_in_a = 32'd19;
end
/* main: %.preheader31*/
/*   store i32 21, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_1_in_a = 32'd21;
end
/* main: %.preheader31*/
/*   store i32 23, i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_1_in_a = 32'd23;
end
/* main: %.preheader31*/
/*   store i32 25, i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_19))
begin
main_0_1_in_a = 32'd25;
end
/* main: %.preheader31*/
/*   store i32 27, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_20))
begin
main_0_1_in_a = 32'd27;
end
/* main: %.preheader31*/
/*   store i32 29, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_21))
begin
main_0_1_in_a = 32'd29;
end
/* main: %.preheader31*/
/*   store i32 31, i32* %74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_22))
begin
main_0_1_in_a = 32'd31;
end
/* main: %.preheader31*/
/*   store i32 33, i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_23))
begin
main_0_1_in_a = 32'd33;
end
end
always @(*) begin
main_0_1_address_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 1, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_5))
begin
main_0_1_address_b = (main_0_8_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 3, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_6))
begin
main_0_1_address_b = (main_0_12_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 5, i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_7))
begin
main_0_1_address_b = (main_0_16_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 7, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_8))
begin
main_0_1_address_b = (main_0_20_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 9, i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_9))
begin
main_0_1_address_b = (main_0_24_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 11, i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_10))
begin
main_0_1_address_b = (main_0_28_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 13, i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_11))
begin
main_0_1_address_b = (main_0_32_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 13, i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_12))
begin
main_0_1_address_b = (main_0_36_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 14, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_1_address_b = (main_0_40_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 16, i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_1_address_b = (main_0_44_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 18, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_1_address_b = (main_0_48_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 20, i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_1_address_b = (main_0_52_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 22, i32* %56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_1_address_b = (main_0_56_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 24, i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_1_address_b = (main_0_60_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 26, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_19))
begin
main_0_1_address_b = (main_0_64_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 28, i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_20))
begin
main_0_1_address_b = (main_0_68_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 30, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_21))
begin
main_0_1_address_b = (main_0_72_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 32, i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_22))
begin
main_0_1_address_b = (main_0_76_reg >>> 3'd2);
end
/* main: %146*/
/*   %148 = load i32* %147, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_146_34))
begin
main_0_1_address_b = (main_146_147 >>> 3'd2);
end
end
always @(*) begin
main_0_1_write_enable_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 1, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_5))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 3, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_6))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 5, i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_7))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 7, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_8))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 9, i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_9))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 11, i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_10))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 13, i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_11))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 13, i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_12))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 14, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 16, i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 18, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 20, i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 22, i32* %56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 24, i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 26, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_19))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 28, i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_20))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 30, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_21))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 32, i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_22))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %146*/
/*   %148 = load i32* %147, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_146_34))
begin
main_0_1_write_enable_b = 1'd0;
end
end
always @(*) begin
main_0_1_in_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 1, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_5))
begin
main_0_1_in_b = 32'd1;
end
/* main: %.preheader31*/
/*   store i32 3, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_6))
begin
main_0_1_in_b = 32'd3;
end
/* main: %.preheader31*/
/*   store i32 5, i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_7))
begin
main_0_1_in_b = 32'd5;
end
/* main: %.preheader31*/
/*   store i32 7, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_8))
begin
main_0_1_in_b = 32'd7;
end
/* main: %.preheader31*/
/*   store i32 9, i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_9))
begin
main_0_1_in_b = 32'd9;
end
/* main: %.preheader31*/
/*   store i32 11, i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_10))
begin
main_0_1_in_b = 32'd11;
end
/* main: %.preheader31*/
/*   store i32 13, i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_11))
begin
main_0_1_in_b = 32'd13;
end
/* main: %.preheader31*/
/*   store i32 13, i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_12))
begin
main_0_1_in_b = 32'd13;
end
/* main: %.preheader31*/
/*   store i32 14, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_1_in_b = 32'd14;
end
/* main: %.preheader31*/
/*   store i32 16, i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_1_in_b = 32'd16;
end
/* main: %.preheader31*/
/*   store i32 18, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_1_in_b = 32'd18;
end
/* main: %.preheader31*/
/*   store i32 20, i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_1_in_b = 32'd20;
end
/* main: %.preheader31*/
/*   store i32 22, i32* %56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_1_in_b = 32'd22;
end
/* main: %.preheader31*/
/*   store i32 24, i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_1_in_b = 32'd24;
end
/* main: %.preheader31*/
/*   store i32 26, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_19))
begin
main_0_1_in_b = 32'd26;
end
/* main: %.preheader31*/
/*   store i32 28, i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_20))
begin
main_0_1_in_b = 32'd28;
end
/* main: %.preheader31*/
/*   store i32 30, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_21))
begin
main_0_1_in_b = 32'd30;
end
/* main: %.preheader31*/
/*   store i32 32, i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_22))
begin
main_0_1_in_b = 32'd32;
end
end
always @(*) begin
main_0_2_address_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 11, i32* %.sub9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_5))
begin
main_0_2_address_a = (main_0__sub9_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 13, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_6))
begin
main_0_2_address_a = (main_0_11_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 15, i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_7))
begin
main_0_2_address_a = (main_0_15_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 17, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_8))
begin
main_0_2_address_a = (main_0_19_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 19, i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_9))
begin
main_0_2_address_a = (main_0_23_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 21, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_10))
begin
main_0_2_address_a = (main_0_27_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 23, i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_11))
begin
main_0_2_address_a = (main_0_31_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 11, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_12))
begin
main_0_2_address_a = (main_0_35_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 19, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_2_address_a = (main_0_39_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 25, i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_2_address_a = (main_0_43_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 26, i32* %47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_2_address_a = (main_0_47_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 20, i32* %51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_2_address_a = (main_0_51_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 29, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_2_address_a = (main_0_55_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 30, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_2_address_a = (main_0_59_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 30, i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_19))
begin
main_0_2_address_a = (main_0_63_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 31, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_20))
begin
main_0_2_address_a = (main_0_67_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 32, i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_21))
begin
main_0_2_address_a = (main_0_71_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 33, i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_22))
begin
main_0_2_address_a = (main_0_75_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 34, i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_23))
begin
main_0_2_address_a = (main_0_79_reg >>> 3'd2);
end
/* main: %218*/
/*   %222 = load i32* %221, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_63))
begin
main_0_2_address_a = (main_218_221 >>> 3'd2);
end
end
always @(*) begin
main_0_2_write_enable_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 11, i32* %.sub9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_5))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 13, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_6))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 15, i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_7))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 17, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_8))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 19, i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_9))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 21, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_10))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 23, i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_11))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 11, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_12))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 19, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 25, i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 26, i32* %47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 20, i32* %51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 29, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 30, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 30, i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_19))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 31, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_20))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 32, i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_21))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 33, i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_22))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 34, i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_23))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %218*/
/*   %222 = load i32* %221, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_63))
begin
main_0_2_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_2_in_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 11, i32* %.sub9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_5))
begin
main_0_2_in_a = 32'd11;
end
/* main: %.preheader31*/
/*   store i32 13, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_6))
begin
main_0_2_in_a = 32'd13;
end
/* main: %.preheader31*/
/*   store i32 15, i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_7))
begin
main_0_2_in_a = 32'd15;
end
/* main: %.preheader31*/
/*   store i32 17, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_8))
begin
main_0_2_in_a = 32'd17;
end
/* main: %.preheader31*/
/*   store i32 19, i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_9))
begin
main_0_2_in_a = 32'd19;
end
/* main: %.preheader31*/
/*   store i32 21, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_10))
begin
main_0_2_in_a = 32'd21;
end
/* main: %.preheader31*/
/*   store i32 23, i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_11))
begin
main_0_2_in_a = 32'd23;
end
/* main: %.preheader31*/
/*   store i32 11, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_12))
begin
main_0_2_in_a = 32'd11;
end
/* main: %.preheader31*/
/*   store i32 19, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_2_in_a = 32'd19;
end
/* main: %.preheader31*/
/*   store i32 25, i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_2_in_a = 32'd25;
end
/* main: %.preheader31*/
/*   store i32 26, i32* %47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_2_in_a = 32'd26;
end
/* main: %.preheader31*/
/*   store i32 20, i32* %51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_2_in_a = 32'd20;
end
/* main: %.preheader31*/
/*   store i32 29, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_2_in_a = 32'd29;
end
/* main: %.preheader31*/
/*   store i32 30, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_2_in_a = 32'd30;
end
/* main: %.preheader31*/
/*   store i32 30, i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_19))
begin
main_0_2_in_a = 32'd30;
end
/* main: %.preheader31*/
/*   store i32 31, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_20))
begin
main_0_2_in_a = 32'd31;
end
/* main: %.preheader31*/
/*   store i32 32, i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_21))
begin
main_0_2_in_a = 32'd32;
end
/* main: %.preheader31*/
/*   store i32 33, i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_22))
begin
main_0_2_in_a = 32'd33;
end
/* main: %.preheader31*/
/*   store i32 34, i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_23))
begin
main_0_2_in_a = 32'd34;
end
end
always @(*) begin
main_0_2_address_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 12, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_5))
begin
main_0_2_address_b = (main_0_9_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 14, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_6))
begin
main_0_2_address_b = (main_0_13_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 16, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_7))
begin
main_0_2_address_b = (main_0_17_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 18, i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_8))
begin
main_0_2_address_b = (main_0_21_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 20, i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_9))
begin
main_0_2_address_b = (main_0_25_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 22, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_10))
begin
main_0_2_address_b = (main_0_29_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 14, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_11))
begin
main_0_2_address_b = (main_0_33_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 16, i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_12))
begin
main_0_2_address_b = (main_0_37_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 24, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_2_address_b = (main_0_41_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 17, i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_2_address_b = (main_0_45_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 27, i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_2_address_b = (main_0_49_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 28, i32* %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_2_address_b = (main_0_53_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 12, i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_2_address_b = (main_0_57_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 15, i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_2_address_b = (main_0_61_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 18, i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_19))
begin
main_0_2_address_b = (main_0_65_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 21, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_20))
begin
main_0_2_address_b = (main_0_69_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 31, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_21))
begin
main_0_2_address_b = (main_0_73_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 33, i32* %77, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_22))
begin
main_0_2_address_b = (main_0_77_reg >>> 3'd2);
end
/* main: %146*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_146_34))
begin
main_0_2_address_b = (main_146_149 >>> 3'd2);
end
end
always @(*) begin
main_0_2_write_enable_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 12, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_5))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 14, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_6))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 16, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_7))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 18, i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_8))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 20, i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_9))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 22, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_10))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 14, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_11))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 16, i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_12))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 24, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 17, i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 27, i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 28, i32* %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 12, i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 15, i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 18, i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_19))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 21, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_20))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 31, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_21))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 33, i32* %77, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_22))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %146*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_146_34))
begin
main_0_2_write_enable_b = 1'd0;
end
end
always @(*) begin
main_0_2_in_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 12, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_5))
begin
main_0_2_in_b = 32'd12;
end
/* main: %.preheader31*/
/*   store i32 14, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_6))
begin
main_0_2_in_b = 32'd14;
end
/* main: %.preheader31*/
/*   store i32 16, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_7))
begin
main_0_2_in_b = 32'd16;
end
/* main: %.preheader31*/
/*   store i32 18, i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_8))
begin
main_0_2_in_b = 32'd18;
end
/* main: %.preheader31*/
/*   store i32 20, i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_9))
begin
main_0_2_in_b = 32'd20;
end
/* main: %.preheader31*/
/*   store i32 22, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_10))
begin
main_0_2_in_b = 32'd22;
end
/* main: %.preheader31*/
/*   store i32 14, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_11))
begin
main_0_2_in_b = 32'd14;
end
/* main: %.preheader31*/
/*   store i32 16, i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_12))
begin
main_0_2_in_b = 32'd16;
end
/* main: %.preheader31*/
/*   store i32 24, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_2_in_b = 32'd24;
end
/* main: %.preheader31*/
/*   store i32 17, i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_2_in_b = 32'd17;
end
/* main: %.preheader31*/
/*   store i32 27, i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_2_in_b = 32'd27;
end
/* main: %.preheader31*/
/*   store i32 28, i32* %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_2_in_b = 32'd28;
end
/* main: %.preheader31*/
/*   store i32 12, i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_2_in_b = 32'd12;
end
/* main: %.preheader31*/
/*   store i32 15, i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_2_in_b = 32'd15;
end
/* main: %.preheader31*/
/*   store i32 18, i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_19))
begin
main_0_2_in_b = 32'd18;
end
/* main: %.preheader31*/
/*   store i32 21, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_20))
begin
main_0_2_in_b = 32'd21;
end
/* main: %.preheader31*/
/*   store i32 31, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_21))
begin
main_0_2_in_b = 32'd31;
end
/* main: %.preheader31*/
/*   store i32 33, i32* %77, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_22))
begin
main_0_2_in_b = 32'd33;
end
end
always @(*) begin
main_0_3_address_a = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_29))
begin
main_0_3_address_a = (main_legup_memset_4_exit_scevgep74 >>> 3'd2);
end
/* main: %143*/
/*   store i32 0, i32* %134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_143_31))
begin
main_0_3_address_a = (main_0_134_reg >>> 3'd2);
end
/* main: %146*/
/*   %152 = load i32* %151, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_146_35))
begin
main_0_3_address_a = (main_146_151 >>> 3'd2);
end
/* main: %204*/
/*   store i32 %194, i32* %205, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_204_56))
begin
main_0_3_address_a = (main_204_205 >>> 3'd2);
end
/* main: %218*/
/*   %224 = load i32* %223, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_64))
begin
main_0_3_address_a = (main_218_223 >>> 3'd2);
end
end
always @(*) begin
main_0_3_write_enable_a = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_29))
begin
main_0_3_write_enable_a = 1'd1;
end
/* main: %143*/
/*   store i32 0, i32* %134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_143_31))
begin
main_0_3_write_enable_a = 1'd1;
end
/* main: %146*/
/*   %152 = load i32* %151, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_146_35))
begin
main_0_3_write_enable_a = 1'd0;
end
/* main: %204*/
/*   store i32 %194, i32* %205, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_204_56))
begin
main_0_3_write_enable_a = 1'd1;
end
/* main: %218*/
/*   %224 = load i32* %223, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_64))
begin
main_0_3_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_3_in_a = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_29))
begin
main_0_3_in_a = -32'd1;
end
/* main: %143*/
/*   store i32 0, i32* %134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_143_31))
begin
main_0_3_in_a = 32'd0;
end
/* main: %204*/
/*   store i32 %194, i32* %205, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_204_56))
begin
main_0_3_in_a = main_191_194_reg;
end
end
always @(*) begin
main_0_3_address_b = 1'd0;
/* main: %146*/
/*   %156 = load i32* %155, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_146_35))
begin
main_0_3_address_b = (main_146_155 >>> 3'd2);
end
/* main: %160*/
/*   %163 = load i32* %162, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_160_39))
begin
main_0_3_address_b = (main_160_162 >>> 3'd2);
end
/* main: %160*/
/*   store i32 %166, i32* %167, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_160_40))
begin
main_0_3_address_b = (main_160_167_reg >>> 3'd2);
end
/* main: %218*/
/*   %226 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_64))
begin
main_0_3_address_b = (main_218_225 >>> 3'd2);
end
end
always @(*) begin
main_0_3_write_enable_b = 1'd0;
/* main: %146*/
/*   %156 = load i32* %155, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_146_35))
begin
main_0_3_write_enable_b = 1'd0;
end
/* main: %160*/
/*   %163 = load i32* %162, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_160_39))
begin
main_0_3_write_enable_b = 1'd0;
end
/* main: %160*/
/*   store i32 %166, i32* %167, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_160_40))
begin
main_0_3_write_enable_b = 1'd1;
end
/* main: %218*/
/*   %226 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_64))
begin
main_0_3_write_enable_b = 1'd0;
end
end
always @(*) begin
main_0_3_in_b = 1'd0;
/* main: %160*/
/*   store i32 %166, i32* %167, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_160_40))
begin
main_0_3_in_b = main_160_166;
end
end
always @(*) begin
main_0_4_address_a = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_29))
begin
main_0_4_address_a = (main_legup_memset_4_exit_scevgep75 >>> 3'd2);
end
/* main: %143*/
/*   store i32 0, i32* %135, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_143_31))
begin
main_0_4_address_a = (main_0_135_reg >>> 3'd2);
end
/* main: %146*/
/*   %154 = load i32* %153, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_146_35))
begin
main_0_4_address_a = (main_146_153 >>> 3'd2);
end
/* main: %160*/
/*   %169 = load i32* %168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_160_39))
begin
main_0_4_address_a = (main_160_168 >>> 3'd2);
end
/* main: %160*/
/*   store i32 %172, i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_160_40))
begin
main_0_4_address_a = (main_160_173_reg >>> 3'd2);
end
/* main: %218*/
/*   %231 = load i32* %230, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_64))
begin
main_0_4_address_a = (main_218_230 >>> 3'd2);
end
end
always @(*) begin
main_0_4_write_enable_a = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_29))
begin
main_0_4_write_enable_a = 1'd1;
end
/* main: %143*/
/*   store i32 0, i32* %135, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_143_31))
begin
main_0_4_write_enable_a = 1'd1;
end
/* main: %146*/
/*   %154 = load i32* %153, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_146_35))
begin
main_0_4_write_enable_a = 1'd0;
end
/* main: %160*/
/*   %169 = load i32* %168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_160_39))
begin
main_0_4_write_enable_a = 1'd0;
end
/* main: %160*/
/*   store i32 %172, i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_160_40))
begin
main_0_4_write_enable_a = 1'd1;
end
/* main: %218*/
/*   %231 = load i32* %230, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_64))
begin
main_0_4_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_4_in_a = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_29))
begin
main_0_4_in_a = -32'd1;
end
/* main: %143*/
/*   store i32 0, i32* %135, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_143_31))
begin
main_0_4_in_a = 32'd0;
end
/* main: %160*/
/*   store i32 %172, i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_160_40))
begin
main_0_4_in_a = main_160_172;
end
end
always @(*) begin
main_0_4_address_b = 1'd0;
/* main: %204*/
/*   store i32 %197, i32* %206, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_204_56))
begin
main_0_4_address_b = (main_204_206 >>> 3'd2);
end
/* main: %218*/
/*   %233 = load i32* %232, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_64))
begin
main_0_4_address_b = (main_218_232 >>> 3'd2);
end
end
always @(*) begin
main_0_4_write_enable_b = 1'd0;
/* main: %204*/
/*   store i32 %197, i32* %206, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_204_56))
begin
main_0_4_write_enable_b = 1'd1;
end
/* main: %218*/
/*   %233 = load i32* %232, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_64))
begin
main_0_4_write_enable_b = 1'd0;
end
end
always @(*) begin
main_0_4_in_b = 1'd0;
/* main: %204*/
/*   store i32 %197, i32* %206, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_204_56))
begin
main_0_4_in_b = main_191_197_reg;
end
end
always @(*) begin
main_0_5_address_a = 1'd0;
/* main: %139*/
/*   store i32 -1, i32* %s.i.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_139_26))
begin
main_0_5_address_a = (main_136_s_i_0_reg >>> 3'd2);
end
/* main: %143*/
/*   store i32 0, i32* %scevgep54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_143_31))
begin
main_0_5_address_a = (main_0_scevgep54_reg >>> 3'd2);
end
/* main: %160*/
/*   %176 = load i32* %175, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_160_42))
begin
main_0_5_address_a = (main_160_175 >>> 3'd2);
end
/* main: %180*/
/*   store i32 %a.0, i32* %175, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_180_44))
begin
main_0_5_address_a = (main_160_175_reg >>> 3'd2);
end
/* main: %191*/
/*   %200 = load i32* %199, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_191_54))
begin
main_0_5_address_a = (main_191_199 >>> 3'd2);
end
/* main: %204*/
/*   store i32 %b.0, i32* %199, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_204_56))
begin
main_0_5_address_a = (main_191_199_reg >>> 3'd2);
end
/* main: %.preheader*/
/*   %250 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_100))
begin
main_0_5_address_a = (main__preheader_scevgep >>> 3'd2);
end
/* main: %.preheader*/
/*   %254 = load i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_101))
begin
main_0_5_address_a = (main__preheader_scevgep_2 >>> 3'd2);
end
/* main: %.preheader*/
/*   %258 = load i32* %scevgep.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_102))
begin
main_0_5_address_a = (main__preheader_scevgep_4_reg >>> 3'd2);
end
end
always @(*) begin
main_0_5_write_enable_a = 1'd0;
/* main: %139*/
/*   store i32 -1, i32* %s.i.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_139_26))
begin
main_0_5_write_enable_a = 1'd1;
end
/* main: %143*/
/*   store i32 0, i32* %scevgep54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_143_31))
begin
main_0_5_write_enable_a = 1'd1;
end
/* main: %160*/
/*   %176 = load i32* %175, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_160_42))
begin
main_0_5_write_enable_a = 1'd0;
end
/* main: %180*/
/*   store i32 %a.0, i32* %175, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_180_44))
begin
main_0_5_write_enable_a = 1'd1;
end
/* main: %191*/
/*   %200 = load i32* %199, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_191_54))
begin
main_0_5_write_enable_a = 1'd0;
end
/* main: %204*/
/*   store i32 %b.0, i32* %199, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_204_56))
begin
main_0_5_write_enable_a = 1'd1;
end
/* main: %.preheader*/
/*   %250 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_100))
begin
main_0_5_write_enable_a = 1'd0;
end
/* main: %.preheader*/
/*   %254 = load i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_101))
begin
main_0_5_write_enable_a = 1'd0;
end
/* main: %.preheader*/
/*   %258 = load i32* %scevgep.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_102))
begin
main_0_5_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_5_in_a = 1'd0;
/* main: %139*/
/*   store i32 -1, i32* %s.i.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_139_26))
begin
main_0_5_in_a = -32'd1;
end
/* main: %143*/
/*   store i32 0, i32* %scevgep54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_143_31))
begin
main_0_5_in_a = 32'd0;
end
/* main: %180*/
/*   store i32 %a.0, i32* %175, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_180_44))
begin
main_0_5_in_a = main__backedge_a_0_reg;
end
/* main: %204*/
/*   store i32 %b.0, i32* %199, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_204_56))
begin
main_0_5_in_a = main__backedge_b_0_reg;
end
end
always @(*) begin
main_0_5_address_b = 1'd0;
/* main: %.preheader*/
/*   %252 = load i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_100))
begin
main_0_5_address_b = (main__preheader_scevgep_1 >>> 3'd2);
end
/* main: %.preheader*/
/*   %256 = load i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_101))
begin
main_0_5_address_b = (main__preheader_scevgep_3 >>> 3'd2);
end
/* main: %.preheader*/
/*   %260 = load i32* %scevgep.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_102))
begin
main_0_5_address_b = (main__preheader_scevgep_5_reg >>> 3'd2);
end
end
always @(*) begin
main_0_5_write_enable_b = 1'd0;
/* main: %.preheader*/
/*   %252 = load i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_100))
begin
main_0_5_write_enable_b = 1'd0;
end
/* main: %.preheader*/
/*   %256 = load i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_101))
begin
main_0_5_write_enable_b = 1'd0;
end
/* main: %.preheader*/
/*   %260 = load i32* %scevgep.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_102))
begin
main_0_5_write_enable_b = 1'd0;
end
end
always @(*) begin
main_0_6_address_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 0, i32* %.sub13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_5))
begin
main_0_6_address_a = (main_0__sub13_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 0, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_6))
begin
main_0_6_address_a = (main_0_82_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_7))
begin
main_0_6_address_a = (main_0_86_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 1, i32* %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_8))
begin
main_0_6_address_a = (main_0_90_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 0, i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_9))
begin
main_0_6_address_a = (main_0_94_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 0, i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_10))
begin
main_0_6_address_a = (main_0_98_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_11))
begin
main_0_6_address_a = (main_0_102_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 1, i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_12))
begin
main_0_6_address_a = (main_0_106_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %110, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_6_address_a = (main_0_110_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 2, i32* %114, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_6_address_a = (main_0_114_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 0, i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_6_address_a = (main_0_118_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 0, i32* %122, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_6_address_a = (main_0_122_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 1, i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_6_address_a = (main_0_126_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %130, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_6_address_a = (main_0_130_reg >>> 3'd2);
end
/* main: %160*/
/*   %165 = load i32* %164, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_160_38))
begin
main_0_6_address_a = (main_160_164 >>> 3'd2);
end
end
always @(*) begin
main_0_6_write_enable_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 0, i32* %.sub13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_5))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_6))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_7))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_8))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_9))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_10))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_11))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_12))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %110, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %114, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %122, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %130, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %160*/
/*   %165 = load i32* %164, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_160_38))
begin
main_0_6_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_6_in_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 0, i32* %.sub13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_5))
begin
main_0_6_in_a = 32'd0;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_6))
begin
main_0_6_in_a = 32'd0;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_7))
begin
main_0_6_in_a = -32'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_8))
begin
main_0_6_in_a = 32'd1;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_9))
begin
main_0_6_in_a = 32'd0;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_10))
begin
main_0_6_in_a = 32'd0;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_11))
begin
main_0_6_in_a = -32'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_12))
begin
main_0_6_in_a = 32'd1;
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %110, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_6_in_a = -32'd2;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %114, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_6_in_a = 32'd2;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_6_in_a = 32'd0;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %122, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_6_in_a = 32'd0;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_6_in_a = 32'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %130, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_6_in_a = -32'd1;
end
end
always @(*) begin
main_0_6_address_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 1, i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_5))
begin
main_0_6_address_b = (main_0_80_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_6))
begin
main_0_6_address_b = (main_0_84_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 1, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_7))
begin
main_0_6_address_b = (main_0_88_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_8))
begin
main_0_6_address_b = (main_0_92_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 2, i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_9))
begin
main_0_6_address_b = (main_0_96_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_10))
begin
main_0_6_address_b = (main_0_100_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 1, i32* %104, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_11))
begin
main_0_6_address_b = (main_0_104_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %108, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_12))
begin
main_0_6_address_b = (main_0_108_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 2, i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_6_address_b = (main_0_112_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %116, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_6_address_b = (main_0_116_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 4, i32* %120, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_6_address_b = (main_0_120_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -4, i32* %124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_6_address_b = (main_0_124_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 1, i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_6_address_b = (main_0_128_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_6_address_b = (main_0_132_reg >>> 3'd2);
end
/* main: %191*/
/*   %193 = load i32* %192, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_191_51))
begin
main_0_6_address_b = (main_191_192 >>> 3'd2);
end
end
always @(*) begin
main_0_6_write_enable_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 1, i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_5))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_6))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_7))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_8))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_9))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_10))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %104, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_11))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %108, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_12))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %116, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 4, i32* %120, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -4, i32* %124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %191*/
/*   %193 = load i32* %192, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_191_51))
begin
main_0_6_write_enable_b = 1'd0;
end
end
always @(*) begin
main_0_6_in_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 1, i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_5))
begin
main_0_6_in_b = 32'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_6))
begin
main_0_6_in_b = -32'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_7))
begin
main_0_6_in_b = 32'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_8))
begin
main_0_6_in_b = -32'd1;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_9))
begin
main_0_6_in_b = 32'd2;
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_10))
begin
main_0_6_in_b = -32'd2;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %104, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_11))
begin
main_0_6_in_b = 32'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %108, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_12))
begin
main_0_6_in_b = -32'd1;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_6_in_b = 32'd2;
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %116, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_6_in_b = -32'd2;
end
/* main: %.preheader31*/
/*   store i32 4, i32* %120, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_6_in_b = 32'd4;
end
/* main: %.preheader31*/
/*   store i32 -4, i32* %124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_6_in_b = -32'd4;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_6_in_b = 32'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_6_in_b = -32'd1;
end
end
always @(*) begin
main_0_7_address_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 1, i32* %.sub14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_5))
begin
main_0_7_address_a = (main_0__sub14_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_6))
begin
main_0_7_address_a = (main_0_83_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 1, i32* %87, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_7))
begin
main_0_7_address_a = (main_0_87_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_8))
begin
main_0_7_address_a = (main_0_91_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 2, i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_9))
begin
main_0_7_address_a = (main_0_95_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_10))
begin
main_0_7_address_a = (main_0_99_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 2, i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_11))
begin
main_0_7_address_a = (main_0_103_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %107, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_12))
begin
main_0_7_address_a = (main_0_107_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 1, i32* %111, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_7_address_a = (main_0_111_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_7_address_a = (main_0_115_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 4, i32* %119, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_7_address_a = (main_0_119_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -4, i32* %123, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_7_address_a = (main_0_123_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 3, i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_7_address_a = (main_0_127_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -3, i32* %131, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_7_address_a = (main_0_131_reg >>> 3'd2);
end
/* main: %160*/
/*   %171 = load i32* %170, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_160_38))
begin
main_0_7_address_a = (main_160_170 >>> 3'd2);
end
end
always @(*) begin
main_0_7_write_enable_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 1, i32* %.sub14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_5))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_6))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %87, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_7))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_8))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_9))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_10))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_11))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %107, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_12))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %111, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 4, i32* %119, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -4, i32* %123, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 3, i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -3, i32* %131, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %160*/
/*   %171 = load i32* %170, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_160_38))
begin
main_0_7_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_7_in_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 1, i32* %.sub14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_5))
begin
main_0_7_in_a = 32'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_6))
begin
main_0_7_in_a = -32'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %87, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_7))
begin
main_0_7_in_a = 32'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_8))
begin
main_0_7_in_a = -32'd1;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_9))
begin
main_0_7_in_a = 32'd2;
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_10))
begin
main_0_7_in_a = -32'd2;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_11))
begin
main_0_7_in_a = 32'd2;
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %107, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_12))
begin
main_0_7_in_a = -32'd2;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %111, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_7_in_a = 32'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_7_in_a = -32'd1;
end
/* main: %.preheader31*/
/*   store i32 4, i32* %119, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_7_in_a = 32'd4;
end
/* main: %.preheader31*/
/*   store i32 -4, i32* %123, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_7_in_a = -32'd4;
end
/* main: %.preheader31*/
/*   store i32 3, i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_7_in_a = 32'd3;
end
/* main: %.preheader31*/
/*   store i32 -3, i32* %131, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_7_in_a = -32'd3;
end
end
always @(*) begin
main_0_7_address_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 0, i32* %81, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_5))
begin
main_0_7_address_b = (main_0_81_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 0, i32* %85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_6))
begin
main_0_7_address_b = (main_0_85_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 1, i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_7))
begin
main_0_7_address_b = (main_0_89_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_8))
begin
main_0_7_address_b = (main_0_93_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 0, i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_9))
begin
main_0_7_address_b = (main_0_97_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 0, i32* %101, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_10))
begin
main_0_7_address_b = (main_0_101_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 2, i32* %105, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_11))
begin
main_0_7_address_b = (main_0_105_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_12))
begin
main_0_7_address_b = (main_0_109_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 1, i32* %113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_7_address_b = (main_0_113_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %117, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_7_address_b = (main_0_117_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 0, i32* %121, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_7_address_b = (main_0_121_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 0, i32* %125, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_7_address_b = (main_0_125_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -3, i32* %129, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_7_address_b = (main_0_129_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 3, i32* %133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_7_address_b = (main_0_133_reg >>> 3'd2);
end
/* main: %191*/
/*   %196 = load i32* %195, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_191_51))
begin
main_0_7_address_b = (main_191_195 >>> 3'd2);
end
end
always @(*) begin
main_0_7_write_enable_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 0, i32* %81, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_5))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_6))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_7))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_8))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_9))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %101, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_10))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %105, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_11))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_12))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %117, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %121, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %125, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -3, i32* %129, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 3, i32* %133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %191*/
/*   %196 = load i32* %195, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_191_51))
begin
main_0_7_write_enable_b = 1'd0;
end
end
always @(*) begin
main_0_7_in_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 0, i32* %81, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_5))
begin
main_0_7_in_b = 32'd0;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_6))
begin
main_0_7_in_b = 32'd0;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_7))
begin
main_0_7_in_b = 32'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_8))
begin
main_0_7_in_b = -32'd1;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_9))
begin
main_0_7_in_b = 32'd0;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %101, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_10))
begin
main_0_7_in_b = 32'd0;
end
/* main: %.preheader31*/
/*   store i32 2, i32* %105, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_11))
begin
main_0_7_in_b = 32'd2;
end
/* main: %.preheader31*/
/*   store i32 -2, i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_12))
begin
main_0_7_in_b = -32'd2;
end
/* main: %.preheader31*/
/*   store i32 1, i32* %113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_13))
begin
main_0_7_in_b = 32'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %117, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_14))
begin
main_0_7_in_b = -32'd1;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %121, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_15))
begin
main_0_7_in_b = 32'd0;
end
/* main: %.preheader31*/
/*   store i32 0, i32* %125, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_16))
begin
main_0_7_in_b = 32'd0;
end
/* main: %.preheader31*/
/*   store i32 -3, i32* %129, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_17))
begin
main_0_7_in_b = -32'd3;
end
/* main: %.preheader31*/
/*   store i32 3, i32* %133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_18))
begin
main_0_7_in_b = 32'd3;
end
end
always @(*) begin
/* main: %218*/
/*   %240 = sdiv i32 %.27, 2*/
if ((cur_state == LEGUP_F_main_BB_218_65))
begin
main_signed_divide_32_0_op0 = main_218__27;
end
/* main: %218*/
/*   %242 = sdiv i32 %diff_pos_y.0, 2*/
else /* if ((cur_state == LEGUP_F_main_BB_218_66)) */
begin
main_signed_divide_32_0_op0 = main_218_diff_pos_y_0_reg;
end
end
always @(*) begin
/* main: %218*/
/*   %240 = sdiv i32 %.27, 2*/
if ((cur_state == LEGUP_F_main_BB_218_65))
begin
main_signed_divide_32_0_op1 = 32'd2;
end
/* main: %218*/
/*   %242 = sdiv i32 %diff_pos_y.0, 2*/
else /* if ((cur_state == LEGUP_F_main_BB_218_66)) */
begin
main_signed_divide_32_0_op1 = 32'd2;
end
end
always @(*) begin
lpm_divide_main_218_240_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_main_218_240_out = lpm_divide_main_218_240_temp_out;
end
always @(*) begin
main_signed_divide_32_0 = lpm_divide_main_218_240_out;
end
always @(*) begin
/* main: %218*/
/*   %241 = srem i32 %.27, 2*/
begin
main_signed_modulus_32_0_op0 = main_218__27;
end
end
always @(*) begin
/* main: %218*/
/*   %241 = srem i32 %.27, 2*/
if (reset) begin main_signed_modulus_32_0_op1 = 0; end
begin
main_signed_modulus_32_0_op1 = 32'd2;
end
end
always @(*) begin
lpm_divide_main_218_241_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_main_218_241_out = lpm_divide_main_218_241_temp_out;
end
always @(*) begin
main_signed_modulus_32_0 = lpm_divide_main_218_241_out;
end
always @(*) begin
/* main: %218*/
/*   %243 = srem i32 %diff_pos_y.0, 2*/
begin
main_signed_modulus_32_1_op0 = main_218_diff_pos_y_0;
end
end
always @(*) begin
/* main: %218*/
/*   %243 = srem i32 %diff_pos_y.0, 2*/
if (reset) begin main_signed_modulus_32_1_op1 = 0; end
begin
main_signed_modulus_32_1_op1 = 32'd2;
end
end
always @(*) begin
lpm_divide_main_218_243_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_main_218_243_out = lpm_divide_main_218_243_temp_out;
end
always @(*) begin
main_signed_modulus_32_1 = lpm_divide_main_218_243_out;
end
always @(*) begin
lpm_mult_main_160_idxscale17_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* main: %160*/
/*   %idxscale17 = mul i32 %166, 6*/
if ((lpm_mult_main_160_idxscale17_en == 1'd1))
begin
main_160_idxscale17_stage0_reg <= (main_160_166 * 32'd6);
end
end
always @(*) begin
lpm_mult_main_191_idxscale15_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* main: %191*/
/*   %idxscale15 = mul i32 %194, 6*/
if ((lpm_mult_main_191_idxscale15_en == 1'd1))
begin
main_191_idxscale15_stage0_reg <= (main_191_194 * 32'd6);
end
end
always @(*) begin
lpm_divide_main_218_242_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_main__preheader_tmp40_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %tmp40 = mul i32 %i.330, 6*/
if ((lpm_mult_main__preheader_tmp40_en == 1'd1))
begin
main__preheader_tmp40_stage0_reg <= (main__preheader_i_330_reg * 32'd6);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %266*/
/*   ret i32 %.0*/
if ((cur_state == LEGUP_F_main_BB_266_105))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %266*/
/*   ret i32 %.0*/
if ((cur_state == LEGUP_F_main_BB_266_105))
begin
return_val <= main_266__0_reg;
if (reset == 1'b0 && ^(main_266__0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
