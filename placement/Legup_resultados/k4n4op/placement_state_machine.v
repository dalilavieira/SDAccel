//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Thu Mar 26 13:20:52 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 7
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_main_BB_0_1 = 7'd1;
parameter [6:0] LEGUP_F_main_BB__backedge_2 = 7'd2;
parameter [6:0] LEGUP_F_main_BB__backedge_backedge_3 = 7'd3;
parameter [6:0] LEGUP_F_main_BB__preheader_preheader_4 = 7'd4;
parameter [6:0] LEGUP_F_main_BB_215_5 = 7'd5;
parameter [6:0] LEGUP_F_main_BB_215_6 = 7'd6;
parameter [6:0] LEGUP_F_main_BB_215_7 = 7'd7;
parameter [6:0] LEGUP_F_main_BB_215_8 = 7'd8;
parameter [6:0] LEGUP_F_main_BB_215_9 = 7'd9;
parameter [6:0] LEGUP_F_main_BB_215_10 = 7'd10;
parameter [6:0] LEGUP_F_main_BB_215_11 = 7'd11;
parameter [6:0] LEGUP_F_main_BB_215_12 = 7'd12;
parameter [6:0] LEGUP_F_main_BB_215_13 = 7'd13;
parameter [6:0] LEGUP_F_main_BB_215_14 = 7'd14;
parameter [6:0] LEGUP_F_main_BB_215_15 = 7'd15;
parameter [6:0] LEGUP_F_main_BB_215_16 = 7'd16;
parameter [6:0] LEGUP_F_main_BB_215_17 = 7'd17;
parameter [6:0] LEGUP_F_main_BB_215_18 = 7'd18;
parameter [6:0] LEGUP_F_main_BB_215_19 = 7'd19;
parameter [6:0] LEGUP_F_main_BB_215_20 = 7'd20;
parameter [6:0] LEGUP_F_main_BB_215_21 = 7'd21;
parameter [6:0] LEGUP_F_main_BB_215_22 = 7'd22;
parameter [6:0] LEGUP_F_main_BB_215_23 = 7'd23;
parameter [6:0] LEGUP_F_main_BB_215_24 = 7'd24;
parameter [6:0] LEGUP_F_main_BB_215_25 = 7'd25;
parameter [6:0] LEGUP_F_main_BB_215_26 = 7'd26;
parameter [6:0] LEGUP_F_main_BB_215_27 = 7'd27;
parameter [6:0] LEGUP_F_main_BB_215_28 = 7'd28;
parameter [6:0] LEGUP_F_main_BB_215_29 = 7'd29;
parameter [6:0] LEGUP_F_main_BB_215_30 = 7'd30;
parameter [6:0] LEGUP_F_main_BB_215_31 = 7'd31;
parameter [6:0] LEGUP_F_main_BB_215_32 = 7'd32;
parameter [6:0] LEGUP_F_main_BB_215_33 = 7'd33;
parameter [6:0] LEGUP_F_main_BB_215_34 = 7'd34;
parameter [6:0] LEGUP_F_main_BB_215_35 = 7'd35;
parameter [6:0] LEGUP_F_main_BB_215_36 = 7'd36;
parameter [6:0] LEGUP_F_main_BB_215_37 = 7'd37;
parameter [6:0] LEGUP_F_main_BB_215_38 = 7'd38;
parameter [6:0] LEGUP_F_main_BB_215_39 = 7'd39;
parameter [6:0] LEGUP_F_main_BB_215_40 = 7'd40;
parameter [6:0] LEGUP_F_main_BB_215_41 = 7'd41;
parameter [6:0] LEGUP_F_main_BB_215_42 = 7'd42;
parameter [6:0] LEGUP_F_main_BB_215_43 = 7'd43;
parameter [6:0] LEGUP_F_main_BB__preheader31_44 = 7'd44;
parameter [6:0] LEGUP_F_main_BB__preheader31_45 = 7'd45;
parameter [6:0] LEGUP_F_main_BB__preheader31_46 = 7'd46;
parameter [6:0] LEGUP_F_main_BB__preheader31_47 = 7'd47;
parameter [6:0] LEGUP_F_main_BB__preheader31_48 = 7'd48;
parameter [6:0] LEGUP_F_main_BB__loopexit_loopexit_49 = 7'd49;
parameter [6:0] LEGUP_F_main_BB__loopexit_50 = 7'd50;
parameter [6:0] LEGUP_F_main_BB__loopexit_51 = 7'd51;
parameter [6:0] LEGUP_F_main_BB_218_52 = 7'd52;
parameter [6:0] LEGUP_F_main_BB_218_53 = 7'd53;
parameter [6:0] LEGUP_F_main_BB_219_54 = 7'd54;
parameter [6:0] LEGUP_F_main_BB_221_55 = 7'd55;
parameter [6:0] LEGUP_F_main_BB_221_56 = 7'd56;
parameter [6:0] LEGUP_F_main_BB_221_57 = 7'd57;
parameter [6:0] LEGUP_F_main_BB_233_58 = 7'd58;
parameter [6:0] LEGUP_F_main_BB_235_59 = 7'd59;
parameter [6:0] LEGUP_F_main_BB_235_60 = 7'd60;
parameter [6:0] LEGUP_F_main_BB_235_61 = 7'd61;
parameter [6:0] LEGUP_F_main_BB_235_62 = 7'd62;
parameter [6:0] LEGUP_F_main_BB_235_63 = 7'd63;
parameter [6:0] LEGUP_F_main_BB_255_64 = 7'd64;
parameter [6:0] LEGUP_F_main_BB_255_65 = 7'd65;
parameter [6:0] LEGUP_F_main_BB_256_66 = 7'd66;
parameter [6:0] LEGUP_F_main_BB_258_67 = 7'd67;
parameter [6:0] LEGUP_F_main_BB_260_68 = 7'd68;
parameter [6:0] LEGUP_F_main_BB_262_69 = 7'd69;
parameter [6:0] LEGUP_F_main_BB_264_70 = 7'd70;
parameter [6:0] LEGUP_F_main_BB_266_71 = 7'd71;
parameter [6:0] LEGUP_F_main_BB_266_72 = 7'd72;
parameter [6:0] LEGUP_F_main_BB_266_73 = 7'd73;
parameter [6:0] LEGUP_F_main_BB_266_74 = 7'd74;
parameter [6:0] LEGUP_F_main_BB_279_75 = 7'd75;
parameter [6:0] LEGUP_F_main_BB_279_76 = 7'd76;
parameter [6:0] LEGUP_F_main_BB_283_77 = 7'd77;
parameter [6:0] LEGUP_F_main_BB_285_78 = 7'd78;
parameter [6:0] LEGUP_F_main_BB_287_79 = 7'd79;
parameter [6:0] LEGUP_F_main_BB_290_80 = 7'd80;
parameter [6:0] LEGUP_F_main_BB_291_81 = 7'd81;
parameter [6:0] LEGUP_F_main_BB_293_82 = 7'd82;
parameter [6:0] LEGUP_F_main_BB_293_83 = 7'd83;
parameter [6:0] LEGUP_F_main_BB_293_84 = 7'd84;
parameter [6:0] LEGUP_F_main_BB_293_85 = 7'd85;
parameter [6:0] LEGUP_F_main_BB_293_86 = 7'd86;
parameter [6:0] LEGUP_F_main_BB_293_87 = 7'd87;
parameter [6:0] LEGUP_F_main_BB_293_88 = 7'd88;
parameter [6:0] LEGUP_F_main_BB_293_89 = 7'd89;
parameter [6:0] LEGUP_F_main_BB_293_90 = 7'd90;
parameter [6:0] LEGUP_F_main_BB_293_91 = 7'd91;
parameter [6:0] LEGUP_F_main_BB_293_92 = 7'd92;
parameter [6:0] LEGUP_F_main_BB_293_93 = 7'd93;
parameter [6:0] LEGUP_F_main_BB_293_94 = 7'd94;
parameter [6:0] LEGUP_F_main_BB_293_95 = 7'd95;
parameter [6:0] LEGUP_F_main_BB_293_96 = 7'd96;
parameter [6:0] LEGUP_F_main_BB_293_97 = 7'd97;
parameter [6:0] LEGUP_F_main_BB_293_98 = 7'd98;
parameter [6:0] LEGUP_F_main_BB_293_99 = 7'd99;
parameter [6:0] LEGUP_F_main_BB_293_100 = 7'd100;
parameter [6:0] LEGUP_F_main_BB_293_101 = 7'd101;
parameter [6:0] LEGUP_F_main_BB_293_102 = 7'd102;
parameter [6:0] LEGUP_F_main_BB_293_103 = 7'd103;
parameter [6:0] LEGUP_F_main_BB_293_104 = 7'd104;
parameter [6:0] LEGUP_F_main_BB_293_105 = 7'd105;
parameter [6:0] LEGUP_F_main_BB_293_106 = 7'd106;
parameter [6:0] LEGUP_F_main_BB_293_107 = 7'd107;
parameter [6:0] LEGUP_F_main_BB_293_108 = 7'd108;
parameter [6:0] LEGUP_F_main_BB_293_109 = 7'd109;
parameter [6:0] LEGUP_F_main_BB_293_110 = 7'd110;
parameter [6:0] LEGUP_F_main_BB_293_111 = 7'd111;
parameter [6:0] LEGUP_F_main_BB_293_112 = 7'd112;
parameter [6:0] LEGUP_F_main_BB_293_113 = 7'd113;
parameter [6:0] LEGUP_F_main_BB_293_114 = 7'd114;
parameter [6:0] LEGUP_F_main_BB_293_115 = 7'd115;
parameter [6:0] LEGUP_F_main_BB_293_116 = 7'd116;
parameter [6:0] LEGUP_F_main_BB_293_117 = 7'd117;
parameter [6:0] LEGUP_F_main_BB__preheader_118 = 7'd118;
parameter [6:0] LEGUP_F_main_BB__preheader_119 = 7'd119;
parameter [6:0] LEGUP_F_main_BB__preheader_120 = 7'd120;
parameter [6:0] LEGUP_F_main_BB__preheader_121 = 7'd121;
parameter [6:0] LEGUP_F_main_BB__preheader_122 = 7'd122;
parameter [6:0] LEGUP_F_main_BB_343_123 = 7'd123;
parameter [6:0] LEGUP_F_main_BB_345_124 = 7'd124;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [6:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_43_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_46_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_47;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_53;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_53_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_55_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_56_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_57_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_59_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_62_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_66_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_67;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_67_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_68;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_70_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_72_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_74;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_75_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_76_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_77;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_77_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_79_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_80;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_80_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_81_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_83;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_83_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_84;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_84_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_85_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_86_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_87;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_87_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_88;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_88_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_89;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_89_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_90;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_90_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_91;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_91_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_92;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_92_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_93;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_93_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_94;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_94_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_95;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_95_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_96;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_96_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_97;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_97_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_98;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_98_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_99;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_100_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_101_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_102;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_102_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_103;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_103_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_104;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_104_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_105;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_105_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_106;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_106_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_107;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_107_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_108;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_108_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_109;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_109_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_110;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_110_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_111;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_111_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_112;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_112_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_113;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_113_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_114;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_114_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_115;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_115_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_116;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_116_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_117;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_117_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_118;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_118_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_119;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_119_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_120;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_120_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_121;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_121_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_122;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_122_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_123;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_123_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_124;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_124_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_125;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_125_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_126;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_126_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_127;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_127_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_128;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_128_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_129;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_129_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_130;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_130_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_131;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_131_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_132;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_132_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_133;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_133_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_134;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_134_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_135;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_135_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_136;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_136_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_137;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_137_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_138;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_138_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_139;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_139_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_140;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_140_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_141;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_141_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_142;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_142_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_143;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_143_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_144;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_144_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_145;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_145_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_146;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_146_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_147;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_147_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_148;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_148_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_149;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_149_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_150;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_150_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_151;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_151_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_152;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_152_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_153;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_153_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_154;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_154_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_155;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_155_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_156;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_156_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_157;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_157_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_158;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_158_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_159;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_159_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_160;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_160_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_161;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_161_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_162;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_162_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_163;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_163_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_164;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_164_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_165;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_165_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_166;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_166_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_167;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_167_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_168;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_168_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_169;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_169_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_170;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_170_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_171;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_171_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_172;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_172_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_173;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_173_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_174;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_174_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_175;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_175_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_176;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_176_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_177;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_177_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_178;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_178_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_179;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_179_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_180;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_180_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_181;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_181_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_182;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_182_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_183;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_183_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_184;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_184_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_185;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_185_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_186;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_186_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_187;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_187_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_188;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_188_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_189;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_189_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_190;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_190_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_191;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_191_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_192;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_192_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_193;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_193_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_194;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_194_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_195;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_195_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_196;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_196_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_197;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_197_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_198;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_198_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_199;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_199_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_200;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_200_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_201;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_201_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_202;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_202_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_203;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_203_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_204;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_204_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_205;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_205_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_206;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_206_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_207;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_207_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_208;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_208_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_209;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_209_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_210;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_210_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_211;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_211_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_212;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_212_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_213;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_213_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_214;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_214_reg;
reg [31:0] main__backedge_sum_0;
reg [31:0] main__backedge_sum_0_reg;
reg [31:0] main__backedge_b_0;
reg [31:0] main__backedge_b_0_reg;
reg [31:0] main__backedge_a_0;
reg [31:0] main__backedge_a_0_reg;
reg [31:0] main__backedge_pos_b_X_0;
reg [31:0] main__backedge_pos_b_X_0_reg;
reg [31:0] main__backedge_pos_a_Y_0;
reg [31:0] main__backedge_pos_a_Y_0_reg;
reg [31:0] main__backedge_pos_a_X_0;
reg [31:0] main__backedge_pos_a_X_0_reg;
reg [31:0] main__backedge_j_0;
reg [31:0] main__backedge_j_0_reg;
reg [31:0] main__backedge_i_0;
reg [31:0] main__backedge_i_0_reg;
reg [31:0] main__backedge_state_0;
reg [31:0] main__backedge_state_0_reg;
reg [31:0] main__backedge_sum_1hop_0;
reg [31:0] main__backedge_sum_1hop_0_reg;
reg [31:0] main__backedge_backedge_sum_0_be;
reg [31:0] main__backedge_backedge_sum_0_be_reg;
reg [31:0] main__backedge_backedge_b_0_be;
reg [31:0] main__backedge_backedge_b_0_be_reg;
reg [31:0] main__backedge_backedge_a_0_be;
reg [31:0] main__backedge_backedge_a_0_be_reg;
reg [31:0] main__backedge_backedge_pos_b_X_0_be;
reg [31:0] main__backedge_backedge_pos_b_X_0_be_reg;
reg [31:0] main__backedge_backedge_pos_a_Y_0_be;
reg [31:0] main__backedge_backedge_pos_a_Y_0_be_reg;
reg [31:0] main__backedge_backedge_pos_a_X_0_be;
reg [31:0] main__backedge_backedge_pos_a_X_0_be_reg;
reg [31:0] main__backedge_backedge_j_0_be;
reg [31:0] main__backedge_backedge_j_0_be_reg;
reg [31:0] main__backedge_backedge_i_0_be;
reg [31:0] main__backedge_backedge_i_0_be_reg;
reg [31:0] main__backedge_backedge_state_0_be;
reg [31:0] main__backedge_backedge_state_0_be_reg;
reg [31:0] main__backedge_backedge_sum_1hop_0_be;
reg [31:0] main__backedge_backedge_sum_1hop_0_be_reg;
reg [31:0] main__preheader31_i_133;
reg [31:0] main__preheader31_i_133_reg;
reg [31:0] main__preheader31_tmp60;
reg [31:0] main__preheader31_tmp60_reg;
reg [31:0] main__preheader31_tmp7489;
reg [31:0] main__preheader31_tmp7489_reg;
reg [31:0] main__preheader31_tmp7288;
reg [31:0] main__preheader31_tmp7288_reg;
reg [31:0] main__preheader31_tmp7087;
reg [31:0] main__preheader31_tmp7087_reg;
reg [31:0] main__preheader31_tmp6886;
reg [31:0] main__preheader31_tmp6886_reg;
reg [31:0] main__preheader31_tmp6685;
reg [31:0] main__preheader31_tmp6685_reg;
reg [31:0] main__preheader31_tmp6484;
reg [31:0] main__preheader31_tmp6484_reg;
reg [31:0] main__preheader31_tmp6283;
reg [31:0] main__preheader31_tmp6283_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader31_scevgep58_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader31_scevgep58_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader31_scevgep58_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader31_scevgep58_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader31_scevgep58_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader31_scevgep58_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader31_scevgep58_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader31_scevgep58_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader31_scevgep58_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader31_scevgep58_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader31_scevgep58_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader31_scevgep58_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader31_scevgep58_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader31_scevgep58_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader31_scevgep58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader31_scevgep58_reg;
reg [31:0] main__preheader31_216;
reg [31:0] main__preheader31_216_reg;
reg  main__preheader31_exitcond59;
reg  main__preheader31_exitcond59_reg;
reg [31:0] main__loopexit_i_234;
reg [31:0] main__loopexit_i_234_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__loopexit_scevgep77;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__loopexit_scevgep77_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__loopexit_scevgep78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__loopexit_scevgep78_reg;
reg [31:0] main__loopexit_217;
reg [31:0] main__loopexit_217_reg;
reg  main__loopexit_exitcond76;
reg  main__loopexit_exitcond76_reg;
reg  main_219_220;
reg  main_219_220_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_221_222;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_221_222_reg;
reg [31:0] main_221_223;
reg [31:0] main_221_223_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_221_224;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_221_224_reg;
reg [31:0] main_221_225;
reg [31:0] main_221_225_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_221_226;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_221_226_reg;
reg [31:0] main_221_227;
reg [31:0] main_221_227_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_221_228;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_221_228_reg;
reg [31:0] main_221_229;
reg [31:0] main_221_229_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_221_230;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_221_230_reg;
reg [31:0] main_221_231;
reg [31:0] main_221_231_reg;
reg  main_221_232;
reg  main_221_232_reg;
reg [31:0] main_221__;
reg [31:0] main_221___reg;
reg  main_233_234;
reg  main_233_234_reg;
reg [31:0] main_235_236;
reg [31:0] main_235_236_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_235_237;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_235_237_reg;
reg [31:0] main_235_238;
reg [31:0] main_235_238_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_235_239;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_235_239_reg;
reg [31:0] main_235_240;
reg [31:0] main_235_240_reg;
reg [31:0] main_235_241;
reg [31:0] main_235_241_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_235_242;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_235_242_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_235_243;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_235_243_reg;
reg [31:0] main_235_244;
reg [31:0] main_235_244_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_235_245;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_235_245_reg;
reg [31:0] main_235_246;
reg [31:0] main_235_246_reg;
reg [31:0] main_235_247;
reg [31:0] main_235_247_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_235_248;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_235_248_reg;
reg [31:0] main_235_249;
reg [31:0] main_235_249_reg;
reg [31:0] main_235_idxscale17;
reg [31:0] main_235_idxscale17_reg;
reg [31:0] main_235__sum18;
reg [31:0] main_235__sum18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_235_250;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_235_250_reg;
reg [31:0] main_235_251;
reg [31:0] main_235_251_reg;
reg  main_235_252;
reg  main_235_252_reg;
reg  main_235_253;
reg  main_235_253_reg;
reg  main_235_or_cond;
reg  main_235_or_cond_reg;
reg  main_235_254;
reg  main_235_254_reg;
reg  main_235_or_cond22;
reg  main_235_or_cond22_reg;
reg  main_256_257;
reg  main_256_257_reg;
reg [31:0] main_260_pos_a_Y_1;
reg [31:0] main_260_pos_a_Y_1_reg;
reg [31:0] main_260_pos_a_X_1;
reg [31:0] main_260_pos_a_X_1_reg;
reg  main_260_261;
reg  main_260_261_reg;
reg [31:0] main_260__23;
reg [31:0] main_260__23_reg;
reg [31:0] main_260__24;
reg [31:0] main_260__24_reg;
reg  main_262_263;
reg  main_262_263_reg;
reg [31:0] main_264_265;
reg [31:0] main_264_265_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_266_267;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_266_267_reg;
reg [31:0] main_266_268;
reg [31:0] main_266_268_reg;
reg [31:0] main_266_269;
reg [31:0] main_266_269_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_266_270;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_266_270_reg;
reg [31:0] main_266_271;
reg [31:0] main_266_271_reg;
reg [31:0] main_266_272;
reg [31:0] main_266_272_reg;
reg [31:0] main_266_273;
reg [31:0] main_266_273_reg;
reg [31:0] main_266_idxscale15;
reg [31:0] main_266_idxscale15_reg;
reg [31:0] main_266__sum16;
reg [31:0] main_266__sum16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_266_274;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_266_274_reg;
reg [31:0] main_266_275;
reg [31:0] main_266_275_reg;
reg  main_266_276;
reg  main_266_276_reg;
reg  main_266_277;
reg  main_266_277_reg;
reg  main_266_or_cond25;
reg  main_266_or_cond25_reg;
reg  main_266_278;
reg  main_266_278_reg;
reg  main_266_or_cond26;
reg  main_266_or_cond26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_279_280;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_279_280_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_279_281;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_279_281_reg;
reg [31:0] main_279_282;
reg [31:0] main_279_282_reg;
reg  main_283_284;
reg  main_283_284_reg;
reg [31:0] main_287_288;
reg [31:0] main_287_288_reg;
reg [31:0] main_287_289;
reg [31:0] main_287_289_reg;
reg [31:0] main_287_i_0_;
reg [31:0] main_287_i_0__reg;
reg  main_291_292;
reg  main_291_292_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_293_294;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_293_294_reg;
reg [31:0] main_293_295;
reg [31:0] main_293_295_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_293_296;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_293_296_reg;
reg [31:0] main_293_297;
reg [31:0] main_293_297_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_293_298;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_293_298_reg;
reg [31:0] main_293_299;
reg [31:0] main_293_299_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_293_300;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_293_300_reg;
reg [31:0] main_293_301;
reg [31:0] main_293_301_reg;
reg [31:0] main_293_302;
reg [31:0] main_293_302_reg;
reg [31:0] main_293_303;
reg [31:0] main_293_303_reg;
reg  main_293_304;
reg  main_293_304_reg;
reg [31:0] main_293__27;
reg [31:0] main_293__27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_293_305;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_293_305_reg;
reg [31:0] main_293_306;
reg [31:0] main_293_306_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_293_307;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_293_307_reg;
reg [31:0] main_293_308;
reg [31:0] main_293_308_reg;
reg [31:0] main_293_309;
reg [31:0] main_293_309_reg;
reg  main_293_310;
reg  main_293_310_reg;
reg [31:0] main_293_311;
reg [31:0] main_293_311_reg;
reg [31:0] main_293_diff_pos_y_0;
reg [31:0] main_293_diff_pos_y_0_reg;
reg [31:0] main_293_312;
reg [31:0] main_293_312_reg;
reg [31:0] main_293_313;
reg [31:0] main_293_313_reg;
reg [31:0] main_293_314;
reg [31:0] main_293_314_reg;
reg [31:0] main_293_315;
reg [31:0] main_293_315_reg;
reg [31:0] main_293_316;
reg [31:0] main_293_316_reg;
reg [31:0] main_293_317;
reg [31:0] main_293_317_reg;
reg [31:0] main_293_318;
reg [31:0] main_293_318_reg;
reg [31:0] main_293_319;
reg [31:0] main_293_319_reg;
reg [31:0] main_293_320;
reg [31:0] main_293_320_reg;
reg [31:0] main_293_321;
reg [31:0] main_293_321_reg;
reg [31:0] main_293_322;
reg [31:0] main_293_322_reg;
reg [31:0] main_293_323;
reg [31:0] main_293_323_reg;
reg [31:0] main_293_324;
reg [31:0] main_293_324_reg;
reg [31:0] main__preheader_i_330;
reg [31:0] main__preheader_i_330_reg;
reg [31:0] main__preheader_tmp40;
reg [31:0] main__preheader_tmp40_reg;
reg [31:0] main__preheader_tmp5496;
reg [31:0] main__preheader_tmp5496_reg;
reg [31:0] main__preheader_tmp5295;
reg [31:0] main__preheader_tmp5295_reg;
reg [31:0] main__preheader_tmp5094;
reg [31:0] main__preheader_tmp5094_reg;
reg [31:0] main__preheader_tmp4893;
reg [31:0] main__preheader_tmp4893_reg;
reg [31:0] main__preheader_tmp4692;
reg [31:0] main__preheader_tmp4692_reg;
reg [31:0] main__preheader_tmp4491;
reg [31:0] main__preheader_tmp4491_reg;
reg [31:0] main__preheader_tmp4290;
reg [31:0] main__preheader_tmp4290_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_scevgep_reg;
reg [31:0] main__preheader_325;
reg [31:0] main__preheader_325_reg;
reg [31:0] main__preheader_327;
reg [31:0] main__preheader_327_reg;
reg [31:0] main__preheader_329;
reg [31:0] main__preheader_329_reg;
reg [31:0] main__preheader_331;
reg [31:0] main__preheader_331_reg;
reg [31:0] main__preheader_333;
reg [31:0] main__preheader_333_reg;
reg [31:0] main__preheader_335;
reg [31:0] main__preheader_335_reg;
reg [31:0] main__preheader_337;
reg [31:0] main__preheader_337_reg;
reg [31:0] main__preheader_339;
reg [31:0] main__preheader_339_reg;
reg [31:0] main__preheader_342;
reg [31:0] main__preheader_342_reg;
reg  main__preheader_exitcond;
reg  main__preheader_exitcond_reg;
reg [31:0] main_345__0;
reg [31:0] main_345__0_reg;
reg [6:0] main_0_1_address_a;
reg  main_0_1_write_enable_a;
reg [31:0] main_0_1_in_a;
wire [31:0] main_0_1_out_a;
reg [6:0] main_0_1_address_b;
reg  main_0_1_write_enable_b;
reg [31:0] main_0_1_in_b;
wire [31:0] main_0_1_out_b;
reg [6:0] main_0_2_address_a;
reg  main_0_2_write_enable_a;
reg [31:0] main_0_2_in_a;
wire [31:0] main_0_2_out_a;
reg [6:0] main_0_2_address_b;
reg  main_0_2_write_enable_b;
reg [31:0] main_0_2_in_b;
wire [31:0] main_0_2_out_b;
reg [5:0] main_0_3_address_a;
reg  main_0_3_write_enable_a;
reg [31:0] main_0_3_in_a;
wire [31:0] main_0_3_out_a;
reg [5:0] main_0_3_address_b;
reg  main_0_3_write_enable_b;
reg [31:0] main_0_3_in_b;
wire [31:0] main_0_3_out_b;
reg [5:0] main_0_4_address_a;
reg  main_0_4_write_enable_a;
reg [31:0] main_0_4_in_a;
wire [31:0] main_0_4_out_a;
reg [5:0] main_0_4_address_b;
reg  main_0_4_write_enable_b;
reg [31:0] main_0_4_in_b;
wire [31:0] main_0_4_out_b;
reg [5:0] main_0_5_address_a;
reg  main_0_5_write_enable_a;
reg [31:0] main_0_5_in_a;
wire [31:0] main_0_5_out_a;
reg [5:0] main_0_5_address_b;
reg  main_0_5_write_enable_b;
reg [31:0] main_0_5_in_b;
wire [31:0] main_0_5_out_b;
reg [4:0] main_0_6_address_a;
reg  main_0_6_write_enable_a;
reg [31:0] main_0_6_in_a;
wire [31:0] main_0_6_out_a;
reg [4:0] main_0_6_address_b;
reg  main_0_6_write_enable_b;
reg [31:0] main_0_6_in_b;
wire [31:0] main_0_6_out_b;
reg [4:0] main_0_7_address_a;
reg  main_0_7_write_enable_a;
reg [31:0] main_0_7_in_a;
wire [31:0] main_0_7_out_a;
reg [4:0] main_0_7_address_b;
reg  main_0_7_write_enable_b;
reg [31:0] main_0_7_in_b;
wire [31:0] main_0_7_out_b;
wire [15:0] legup_pthreadpoll_threadID;
reg [31:0] main_signed_divide_32_0_op0;
reg [31:0] main_signed_divide_32_0_op1;
wire [31:0] lpm_divide_main_293_315_temp_out;
wire [31:0] main_293_315_unused;
reg  lpm_divide_main_293_315_en;
reg [31:0] lpm_divide_main_293_315_out;
reg [31:0] main_signed_divide_32_0;
reg [31:0] main_signed_modulus_32_0_op0;
reg [31:0] main_signed_modulus_32_0_op1;
wire [31:0] lpm_divide_main_293_316_temp_out;
wire [31:0] main_293_316_unused;
reg  lpm_divide_main_293_316_en;
reg [31:0] lpm_divide_main_293_316_out;
reg [31:0] main_signed_modulus_32_0;
reg [31:0] main_signed_modulus_32_1_op0;
reg [31:0] main_signed_modulus_32_1_op1;
wire [31:0] lpm_divide_main_293_318_temp_out;
wire [31:0] main_293_318_unused;
reg  lpm_divide_main_293_318_en;
reg [31:0] lpm_divide_main_293_318_out;
reg [31:0] main_signed_modulus_32_1;
reg  lpm_divide_main_293_317_en;

/*   %315 = sdiv i32 %.27, 2*/
lpm_divide lpm_divide_main_293_315 (
	.quotient (lpm_divide_main_293_315_temp_out),
	.remain (main_293_315_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_293_315_en),
	.numer (main_signed_divide_32_0_op0),
	.denom (main_signed_divide_32_0_op1)
);

defparam
	lpm_divide_main_293_315.lpm_pipeline = 32,
	lpm_divide_main_293_315.lpm_widthn = 32,
	lpm_divide_main_293_315.lpm_widthd = 32,
	lpm_divide_main_293_315.lpm_drepresentation = "SIGNED",
	lpm_divide_main_293_315.lpm_nrepresentation = "SIGNED",
	lpm_divide_main_293_315.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

/*   %316 = srem i32 %.27, 2*/
lpm_divide lpm_divide_main_293_316 (
	.quotient (main_293_316_unused),
	.remain (lpm_divide_main_293_316_temp_out),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_293_316_en),
	.numer (main_signed_modulus_32_0_op0),
	.denom (main_signed_modulus_32_0_op1)
);

defparam
	lpm_divide_main_293_316.lpm_pipeline = 32,
	lpm_divide_main_293_316.lpm_widthn = 32,
	lpm_divide_main_293_316.lpm_widthd = 32,
	lpm_divide_main_293_316.lpm_drepresentation = "SIGNED",
	lpm_divide_main_293_316.lpm_nrepresentation = "SIGNED",
	lpm_divide_main_293_316.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

/*   %318 = srem i32 %diff_pos_y.0, 2*/
lpm_divide lpm_divide_main_293_318 (
	.quotient (main_293_318_unused),
	.remain (lpm_divide_main_293_318_temp_out),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_293_318_en),
	.numer (main_signed_modulus_32_1_op0),
	.denom (main_signed_modulus_32_1_op1)
);

defparam
	lpm_divide_main_293_318.lpm_pipeline = 32,
	lpm_divide_main_293_318.lpm_widthn = 32,
	lpm_divide_main_293_318.lpm_widthd = 32,
	lpm_divide_main_293_318.lpm_drepresentation = "SIGNED",
	lpm_divide_main_293_318.lpm_nrepresentation = "SIGNED",
	lpm_divide_main_293_318.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

// Local Rams

//   %1 = alloca [76 x i32], align 4
ram_dual_port main_0_1 (
	.clk( clk ),
	.address_a( main_0_1_address_a ),
	.address_b( main_0_1_address_b ),
	.wren_a( main_0_1_write_enable_a ),
	.wren_b( main_0_1_write_enable_b ),
	.data_a( main_0_1_in_a ),
	.data_b( main_0_1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_1_out_a ),
	.q_b( main_0_1_out_b)
);
defparam main_0_1.width_a = 32;
defparam main_0_1.width_b = 32;
defparam main_0_1.widthad_a = 7;
defparam main_0_1.widthad_b = 7;
defparam main_0_1.width_be_a = 1;
defparam main_0_1.width_be_b = 1;
defparam main_0_1.numwords_a = 76;
defparam main_0_1.numwords_b = 76;
defparam main_0_1.latency = 1;

//   %2 = alloca [76 x i32], align 4
ram_dual_port main_0_2 (
	.clk( clk ),
	.address_a( main_0_2_address_a ),
	.address_b( main_0_2_address_b ),
	.wren_a( main_0_2_write_enable_a ),
	.wren_b( main_0_2_write_enable_b ),
	.data_a( main_0_2_in_a ),
	.data_b( main_0_2_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_2_out_a ),
	.q_b( main_0_2_out_b)
);
defparam main_0_2.width_a = 32;
defparam main_0_2.width_b = 32;
defparam main_0_2.widthad_a = 7;
defparam main_0_2.widthad_b = 7;
defparam main_0_2.width_be_a = 1;
defparam main_0_2.width_be_b = 1;
defparam main_0_2.numwords_a = 76;
defparam main_0_2.numwords_b = 76;
defparam main_0_2.latency = 1;

//   %3 = alloca [62 x i32], align 4
ram_dual_port main_0_3 (
	.clk( clk ),
	.address_a( main_0_3_address_a ),
	.address_b( main_0_3_address_b ),
	.wren_a( main_0_3_write_enable_a ),
	.wren_b( main_0_3_write_enable_b ),
	.data_a( main_0_3_in_a ),
	.data_b( main_0_3_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_3_out_a ),
	.q_b( main_0_3_out_b)
);
defparam main_0_3.width_a = 32;
defparam main_0_3.width_b = 32;
defparam main_0_3.widthad_a = 6;
defparam main_0_3.widthad_b = 6;
defparam main_0_3.width_be_a = 1;
defparam main_0_3.width_be_b = 1;
defparam main_0_3.numwords_a = 62;
defparam main_0_3.numwords_b = 62;
defparam main_0_3.latency = 1;

//   %4 = alloca [62 x i32], align 4
ram_dual_port main_0_4 (
	.clk( clk ),
	.address_a( main_0_4_address_a ),
	.address_b( main_0_4_address_b ),
	.wren_a( main_0_4_write_enable_a ),
	.wren_b( main_0_4_write_enable_b ),
	.data_a( main_0_4_in_a ),
	.data_b( main_0_4_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_4_out_a ),
	.q_b( main_0_4_out_b)
);
defparam main_0_4.width_a = 32;
defparam main_0_4.width_b = 32;
defparam main_0_4.widthad_a = 6;
defparam main_0_4.widthad_b = 6;
defparam main_0_4.width_be_a = 1;
defparam main_0_4.width_be_b = 1;
defparam main_0_4.numwords_a = 62;
defparam main_0_4.numwords_b = 62;
defparam main_0_4.latency = 1;

//   %5 = alloca [64 x i32], align 4
ram_dual_port main_0_5 (
	.clk( clk ),
	.address_a( main_0_5_address_a ),
	.address_b( main_0_5_address_b ),
	.wren_a( main_0_5_write_enable_a ),
	.wren_b( main_0_5_write_enable_b ),
	.data_a( main_0_5_in_a ),
	.data_b( main_0_5_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_5_out_a ),
	.q_b( main_0_5_out_b)
);
defparam main_0_5.width_a = 32;
defparam main_0_5.width_b = 32;
defparam main_0_5.widthad_a = 6;
defparam main_0_5.widthad_b = 6;
defparam main_0_5.width_be_a = 1;
defparam main_0_5.width_be_b = 1;
defparam main_0_5.numwords_a = 64;
defparam main_0_5.numwords_b = 64;
defparam main_0_5.latency = 1;

//   %6 = alloca [28 x i32], align 4
ram_dual_port main_0_6 (
	.clk( clk ),
	.address_a( main_0_6_address_a ),
	.address_b( main_0_6_address_b ),
	.wren_a( main_0_6_write_enable_a ),
	.wren_b( main_0_6_write_enable_b ),
	.data_a( main_0_6_in_a ),
	.data_b( main_0_6_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_6_out_a ),
	.q_b( main_0_6_out_b)
);
defparam main_0_6.width_a = 32;
defparam main_0_6.width_b = 32;
defparam main_0_6.widthad_a = 5;
defparam main_0_6.widthad_b = 5;
defparam main_0_6.width_be_a = 1;
defparam main_0_6.width_be_b = 1;
defparam main_0_6.numwords_a = 28;
defparam main_0_6.numwords_b = 28;
defparam main_0_6.latency = 1;

//   %7 = alloca [28 x i32], align 4
ram_dual_port main_0_7 (
	.clk( clk ),
	.address_a( main_0_7_address_a ),
	.address_b( main_0_7_address_b ),
	.wren_a( main_0_7_write_enable_a ),
	.wren_b( main_0_7_write_enable_b ),
	.data_a( main_0_7_in_a ),
	.data_b( main_0_7_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_7_out_a ),
	.q_b( main_0_7_out_b)
);
defparam main_0_7.width_a = 32;
defparam main_0_7.width_b = 32;
defparam main_0_7.widthad_a = 5;
defparam main_0_7.widthad_b = 5;
defparam main_0_7.width_be_a = 1;
defparam main_0_7.width_be_b = 1;
defparam main_0_7.numwords_a = 28;
defparam main_0_7.numwords_b = 28;
defparam main_0_7.latency = 1;


/* Unsynthesizable Statements */
always @(posedge clk) begin
/* main: %258*/
/*   %259 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB_258_67))
begin
$write("No solution\n");
end
/* main: %285*/
/*   %286 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB_285_78))
begin
$write("No solution\n");
end
/* main: %.preheader*/
/*   %341 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str2, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader_118))
begin
$write("\n");
end
/* main: %.preheader*/
/*   %326 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %325) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader_119))
begin
$write("%3d ", $signed(main__preheader_325));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader_325) === 1'bX) finish <= 0;
end
/* main: %.preheader*/
/*   %328 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %327) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader_119))
begin
$write("%3d ", $signed(main__preheader_327));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader_327) === 1'bX) finish <= 0;
end
/* main: %.preheader*/
/*   %330 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %329) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader_120))
begin
$write("%3d ", $signed(main__preheader_329));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader_329) === 1'bX) finish <= 0;
end
/* main: %.preheader*/
/*   %332 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %331) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader_120))
begin
$write("%3d ", $signed(main__preheader_331));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader_331) === 1'bX) finish <= 0;
end
/* main: %.preheader*/
/*   %334 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %333) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader_121))
begin
$write("%3d ", $signed(main__preheader_333));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader_333) === 1'bX) finish <= 0;
end
/* main: %.preheader*/
/*   %336 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %335) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader_121))
begin
$write("%3d ", $signed(main__preheader_335));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader_335) === 1'bX) finish <= 0;
end
/* main: %.preheader*/
/*   %338 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %337) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader_122))
begin
$write("%3d ", $signed(main__preheader_337));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader_337) === 1'bX) finish <= 0;
end
/* main: %.preheader*/
/*   %340 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %339) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader_122))
begin
$write("%3d ", $signed(main__preheader_339));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader_339) === 1'bX) finish <= 0;
end
/* main: %343*/
/*   %344 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([40 x i8]* @.str3, i32 0, i32 0), i32 %sum.0, i32 %sum_1hop.0) nounwind*/
if ((cur_state == LEGUP_F_main_BB_343_123))
begin
$write("\nEvaluation = %d\nEvaluation 1-hop = %d\n", $signed(main__backedge_sum_0_reg), $signed(main__backedge_sum_1hop_0_reg));
// to fix quartus warning
if (reset == 1'b0 && ^(main__backedge_sum_0_reg) === 1'bX) finish <= 0;
if (reset == 1'b0 && ^(main__backedge_sum_1hop_0_reg) === 1'bX) finish <= 0;
end
end
always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_2;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__backedge_2;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg == 32'd5)))
begin
cur_state <= LEGUP_F_main_BB__preheader_preheader_4;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader_preheader_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg == 32'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_5;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg == 32'd1)))
begin
cur_state <= LEGUP_F_main_BB_219_54;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_219_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg == 32'd2)))
begin
cur_state <= LEGUP_F_main_BB_233_58;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_233_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg == 32'd3)))
begin
cur_state <= LEGUP_F_main_BB_262_69;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_262_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg == 32'd4)))
begin
cur_state <= LEGUP_F_main_BB_291_81;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_291_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_2;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_preheader_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_preheader_4;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader_preheader_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_preheader_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_118;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_5;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_6;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_6;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_7;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_7;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_8;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_8;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_9;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_9;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_10;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_10;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_11;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_11;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_12;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_12;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_13;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_13;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_14;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_14;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_15;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_15;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_16;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_16;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_17;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_17;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_18;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_18;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_19;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_19;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_20;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_20;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_21;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_21;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_22;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_22;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_23;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_23;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_24;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_24;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_25;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_25;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_26;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_26;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_27;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_27;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_28;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_28;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_29;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_29;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_30;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_30;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_31;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_31;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_32;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_32;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_33;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_33;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_34;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_34;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_35;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_35;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_36;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_36;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_37;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_37;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_38;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_38;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_39;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_39;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_40;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_40;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_41;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_41;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_42;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_42;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_43;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_43;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_44;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_44;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_45;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_45;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_46;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_46;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_47;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_47;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_48;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader31_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_48;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__preheader31_48) & (memory_controller_waitrequest == 1'd0)) & (main__preheader31_exitcond59_reg == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__loopexit_loopexit_49;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__loopexit_loopexit_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__preheader31_48) & (memory_controller_waitrequest == 1'd0)) & (main__preheader31_exitcond59_reg == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader31_44;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader31_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__loopexit_loopexit_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__loopexit_loopexit_49;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__loopexit_loopexit_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__loopexit_loopexit_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__loopexit_50;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__loopexit_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__loopexit_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__loopexit_50;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__loopexit_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__loopexit_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__loopexit_51;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__loopexit_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__loopexit_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__loopexit_51;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__loopexit_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__loopexit_51) & (memory_controller_waitrequest == 1'd0)) & (main__loopexit_exitcond76_reg == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_52;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__loopexit_51) & (memory_controller_waitrequest == 1'd0)) & (main__loopexit_exitcond76_reg == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__loopexit_50;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__loopexit_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_52;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_218_53;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_218_53;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_218_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_218_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_219_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_219_54;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_219_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_219_54) & (memory_controller_waitrequest == 1'd0)) & (main_219_220 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_219_54) & (memory_controller_waitrequest == 1'd0)) & (main_219_220 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_221_55;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_221_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_221_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_221_55;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_221_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_221_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_221_56;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_221_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_221_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_221_56;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_221_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_221_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_221_57;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_221_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_221_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_221_57;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_221_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_221_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_233_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_233_58;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_233_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_233_58) & (memory_controller_waitrequest == 1'd0)) & (main_233_234 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_235_59;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_235_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_233_58) & (memory_controller_waitrequest == 1'd0)) & (main_233_234 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_235_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_235_59;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_235_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_235_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_235_60;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_235_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_235_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_235_60;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_235_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_235_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_235_61;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_235_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_235_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_235_61;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_235_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_235_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_235_62;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_235_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_235_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_235_62;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_235_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_235_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_235_63;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_235_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_235_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_235_63;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_235_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_235_63) & (memory_controller_waitrequest == 1'd0)) & (main_235_or_cond22 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_255_64;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_255_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_235_63) & (memory_controller_waitrequest == 1'd0)) & (main_235_or_cond22 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_256_66;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_256_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_255_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_255_64;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_255_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_255_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_255_65;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_255_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_255_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_255_65;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_255_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_255_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_260_68;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_260_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_256_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_256_66;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_256_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_256_66) & (memory_controller_waitrequest == 1'd0)) & (main_256_257 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_258_67;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_258_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_256_66) & (memory_controller_waitrequest == 1'd0)) & (main_256_257 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_260_68;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_260_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_258_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_258_67;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_258_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_258_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_345_124;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_345_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_260_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_260_68;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_260_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_260_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_262_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_262_69;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_262_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_262_69) & (memory_controller_waitrequest == 1'd0)) & (main_262_263 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_266_71;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_266_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_262_69) & (memory_controller_waitrequest == 1'd0)) & (main_262_263 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_264_70;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_264_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_264_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_264_70;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_264_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_264_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_266_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_266_71;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_266_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_266_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_266_72;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_266_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_266_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_266_72;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_266_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_266_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_266_73;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_266_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_266_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_266_73;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_266_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_266_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_266_74;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_266_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_266_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_266_74;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_266_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_266_74) & (memory_controller_waitrequest == 1'd0)) & (main_266_or_cond26 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_279_75;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_279_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_266_74) & (memory_controller_waitrequest == 1'd0)) & (main_266_or_cond26 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_283_77;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_283_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_279_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_279_75;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_279_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_279_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_279_76;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_279_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_279_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_279_76;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_279_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_279_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_283_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_283_77;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_283_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_283_77) & (memory_controller_waitrequest == 1'd0)) & (main_283_284 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_285_78;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_285_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_283_77) & (memory_controller_waitrequest == 1'd0)) & (main_283_284 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_287_79;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_287_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_285_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_285_78;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_285_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_285_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_345_124;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_345_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_287_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_287_79;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_287_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_287_79) & (memory_controller_waitrequest == 1'd0)) & (main_262_263_reg == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_287_79) & (memory_controller_waitrequest == 1'd0)) & (main_262_263_reg == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_290_80;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_290_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_290_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_290_80;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_290_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_290_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_291_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_291_81;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_291_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_291_81) & (memory_controller_waitrequest == 1'd0)) & (main_291_292 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_291_81) & (memory_controller_waitrequest == 1'd0)) & (main_291_292 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_82;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_82;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_83;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_83;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_84;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_84;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_85;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_85;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_86;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_86;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_87;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_87;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_88;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_88;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_89;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_89;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_90;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_90;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_91;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_91;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_92;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_92;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_93;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_93;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_94;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_94;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_95;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_95;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_96;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_96;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_97;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_97;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_98;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_98;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_99;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_99;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_100;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_100;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_101;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_101;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_102;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_102;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_103;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_103;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_104;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_104;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_105;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_105;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_106;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_106;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_107;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_107;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_108;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_108;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_109;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_109;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_110;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_110;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_111;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_111;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_111) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_112;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_112;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_113;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_113;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_114;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_114;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_114) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_115;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_115;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_115) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_116;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_116;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_116) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_293_117;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_293_117;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_293_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_293_117) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_118;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_119;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_119;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_119) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_120;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_120;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_120) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_121;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_121;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_121) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_122;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_122) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_122;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__preheader_122) & (memory_controller_waitrequest == 1'd0)) & (main__preheader_exitcond_reg == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_343_123;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_343_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__preheader_122) & (memory_controller_waitrequest == 1'd0)) & (main__preheader_exitcond_reg == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_118;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_343_123) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_343_123;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_343_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_343_123) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_345_124;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_345_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_345_124) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_345_124;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_345_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_345_124) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 7'd0;
if (reset == 1'b0 && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %.sub8 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 0*/
if (reset) begin main_0__sub8 = 0; end
begin
main_0__sub8 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %.sub8 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0__sub8_reg <= main_0__sub8;
if (reset == 1'b0 && ^(main_0__sub8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0__sub8_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %.sub9 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 0*/
if (reset) begin main_0__sub9 = 0; end
begin
main_0__sub9 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %.sub9 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0__sub9_reg <= main_0__sub9;
if (reset == 1'b0 && ^(main_0__sub9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0__sub9_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %.sub13 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 0*/
if (reset) begin main_0__sub13 = 0; end
begin
main_0__sub13 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %.sub13 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0__sub13_reg <= main_0__sub13;
if (reset == 1'b0 && ^(main_0__sub13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0__sub13_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %.sub14 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 0*/
if (reset) begin main_0__sub14 = 0; end
begin
main_0__sub14 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %.sub14 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0__sub14_reg <= main_0__sub14;
if (reset == 1'b0 && ^(main_0__sub14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0__sub14_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %8 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 1*/
if (reset) begin main_0_8 = 0; end
begin
main_0_8 = (1'd0 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %8 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_8_reg <= main_0_8;
if (reset == 1'b0 && ^(main_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_8_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %9 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 1*/
if (reset) begin main_0_9 = 0; end
begin
main_0_9 = (1'd0 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %9 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_9_reg <= main_0_9;
if (reset == 1'b0 && ^(main_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_9_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %10 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 2*/
if (reset) begin main_0_10 = 0; end
begin
main_0_10 = (1'd0 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %10 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_10_reg <= main_0_10;
if (reset == 1'b0 && ^(main_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_10_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %11 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 2*/
if (reset) begin main_0_11 = 0; end
begin
main_0_11 = (1'd0 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %11 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_11_reg <= main_0_11;
if (reset == 1'b0 && ^(main_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_11_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %12 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 3*/
if (reset) begin main_0_12 = 0; end
begin
main_0_12 = (1'd0 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %12 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_12_reg <= main_0_12;
if (reset == 1'b0 && ^(main_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_12_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %13 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 3*/
if (reset) begin main_0_13 = 0; end
begin
main_0_13 = (1'd0 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %13 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_13_reg <= main_0_13;
if (reset == 1'b0 && ^(main_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_13_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %14 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 4*/
if (reset) begin main_0_14 = 0; end
begin
main_0_14 = (1'd0 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %14 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_14_reg <= main_0_14;
if (reset == 1'b0 && ^(main_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_14_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %15 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 4*/
if (reset) begin main_0_15 = 0; end
begin
main_0_15 = (1'd0 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %15 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_15_reg <= main_0_15;
if (reset == 1'b0 && ^(main_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_15_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %16 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 5*/
if (reset) begin main_0_16 = 0; end
begin
main_0_16 = (1'd0 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %16 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 5*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_16_reg <= main_0_16;
if (reset == 1'b0 && ^(main_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_16_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %17 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 5*/
if (reset) begin main_0_17 = 0; end
begin
main_0_17 = (1'd0 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %17 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 5*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_17_reg <= main_0_17;
if (reset == 1'b0 && ^(main_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_17_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %18 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 6*/
if (reset) begin main_0_18 = 0; end
begin
main_0_18 = (1'd0 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %18 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 6*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_18_reg <= main_0_18;
if (reset == 1'b0 && ^(main_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_18_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %19 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 6*/
if (reset) begin main_0_19 = 0; end
begin
main_0_19 = (1'd0 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %19 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 6*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_19_reg <= main_0_19;
if (reset == 1'b0 && ^(main_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_19_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %20 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 7*/
if (reset) begin main_0_20 = 0; end
begin
main_0_20 = (1'd0 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %20 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 7*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_20_reg <= main_0_20;
if (reset == 1'b0 && ^(main_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_20_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %21 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 7*/
if (reset) begin main_0_21 = 0; end
begin
main_0_21 = (1'd0 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %21 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 7*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_21_reg <= main_0_21;
if (reset == 1'b0 && ^(main_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_21_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %22 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 8*/
if (reset) begin main_0_22 = 0; end
begin
main_0_22 = (1'd0 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %22 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 8*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_22_reg <= main_0_22;
if (reset == 1'b0 && ^(main_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_22_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %23 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 8*/
if (reset) begin main_0_23 = 0; end
begin
main_0_23 = (1'd0 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %23 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 8*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_23_reg <= main_0_23;
if (reset == 1'b0 && ^(main_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_23_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %24 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 9*/
if (reset) begin main_0_24 = 0; end
begin
main_0_24 = (1'd0 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %24 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 9*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_24_reg <= main_0_24;
if (reset == 1'b0 && ^(main_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_24_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %25 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 9*/
if (reset) begin main_0_25 = 0; end
begin
main_0_25 = (1'd0 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %25 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 9*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_25_reg <= main_0_25;
if (reset == 1'b0 && ^(main_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_25_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %26 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 10*/
if (reset) begin main_0_26 = 0; end
begin
main_0_26 = (1'd0 + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %26 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 10*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_26_reg <= main_0_26;
if (reset == 1'b0 && ^(main_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_26_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %27 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 10*/
if (reset) begin main_0_27 = 0; end
begin
main_0_27 = (1'd0 + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %27 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 10*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_27_reg <= main_0_27;
if (reset == 1'b0 && ^(main_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_27_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %28 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 11*/
if (reset) begin main_0_28 = 0; end
begin
main_0_28 = (1'd0 + (4 * 32'd11));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %28 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 11*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_28_reg <= main_0_28;
if (reset == 1'b0 && ^(main_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_28_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %29 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 11*/
if (reset) begin main_0_29 = 0; end
begin
main_0_29 = (1'd0 + (4 * 32'd11));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %29 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 11*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_29_reg <= main_0_29;
if (reset == 1'b0 && ^(main_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_29_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %30 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 12*/
if (reset) begin main_0_30 = 0; end
begin
main_0_30 = (1'd0 + (4 * 32'd12));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %30 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 12*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_30_reg <= main_0_30;
if (reset == 1'b0 && ^(main_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_30_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %31 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 12*/
if (reset) begin main_0_31 = 0; end
begin
main_0_31 = (1'd0 + (4 * 32'd12));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %31 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 12*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_31_reg <= main_0_31;
if (reset == 1'b0 && ^(main_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_31_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %32 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 13*/
if (reset) begin main_0_32 = 0; end
begin
main_0_32 = (1'd0 + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %32 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 13*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_32_reg <= main_0_32;
if (reset == 1'b0 && ^(main_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_32_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %33 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 13*/
if (reset) begin main_0_33 = 0; end
begin
main_0_33 = (1'd0 + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %33 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 13*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_33_reg <= main_0_33;
if (reset == 1'b0 && ^(main_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_33_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %34 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 14*/
if (reset) begin main_0_34 = 0; end
begin
main_0_34 = (1'd0 + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %34 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 14*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_34_reg <= main_0_34;
if (reset == 1'b0 && ^(main_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_34_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %35 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 14*/
if (reset) begin main_0_35 = 0; end
begin
main_0_35 = (1'd0 + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %35 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 14*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_35_reg <= main_0_35;
if (reset == 1'b0 && ^(main_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_35_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %36 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 15*/
if (reset) begin main_0_36 = 0; end
begin
main_0_36 = (1'd0 + (4 * 32'd15));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %36 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 15*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_36_reg <= main_0_36;
if (reset == 1'b0 && ^(main_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_36_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %37 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 15*/
if (reset) begin main_0_37 = 0; end
begin
main_0_37 = (1'd0 + (4 * 32'd15));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %37 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 15*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_37_reg <= main_0_37;
if (reset == 1'b0 && ^(main_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_37_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %38 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 16*/
if (reset) begin main_0_38 = 0; end
begin
main_0_38 = (1'd0 + (4 * 32'd16));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %38 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 16*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_38_reg <= main_0_38;
if (reset == 1'b0 && ^(main_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_38_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %39 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 16*/
if (reset) begin main_0_39 = 0; end
begin
main_0_39 = (1'd0 + (4 * 32'd16));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %39 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 16*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_39_reg <= main_0_39;
if (reset == 1'b0 && ^(main_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_39_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %40 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 17*/
if (reset) begin main_0_40 = 0; end
begin
main_0_40 = (1'd0 + (4 * 32'd17));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %40 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 17*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_40_reg <= main_0_40;
if (reset == 1'b0 && ^(main_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_40_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %41 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 17*/
if (reset) begin main_0_41 = 0; end
begin
main_0_41 = (1'd0 + (4 * 32'd17));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %41 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 17*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_41_reg <= main_0_41;
if (reset == 1'b0 && ^(main_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_41_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %42 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 18*/
if (reset) begin main_0_42 = 0; end
begin
main_0_42 = (1'd0 + (4 * 32'd18));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %42 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 18*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_42_reg <= main_0_42;
if (reset == 1'b0 && ^(main_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_42_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %43 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 18*/
if (reset) begin main_0_43 = 0; end
begin
main_0_43 = (1'd0 + (4 * 32'd18));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %43 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 18*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_43_reg <= main_0_43;
if (reset == 1'b0 && ^(main_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_43_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %44 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 19*/
if (reset) begin main_0_44 = 0; end
begin
main_0_44 = (1'd0 + (4 * 32'd19));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %44 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 19*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_44_reg <= main_0_44;
if (reset == 1'b0 && ^(main_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_44_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %45 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 19*/
if (reset) begin main_0_45 = 0; end
begin
main_0_45 = (1'd0 + (4 * 32'd19));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %45 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 19*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_45_reg <= main_0_45;
if (reset == 1'b0 && ^(main_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_45_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %46 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 20*/
if (reset) begin main_0_46 = 0; end
begin
main_0_46 = (1'd0 + (4 * 32'd20));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %46 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 20*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_46_reg <= main_0_46;
if (reset == 1'b0 && ^(main_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_46_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %47 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 20*/
if (reset) begin main_0_47 = 0; end
begin
main_0_47 = (1'd0 + (4 * 32'd20));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %47 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 20*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_47_reg <= main_0_47;
if (reset == 1'b0 && ^(main_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_47_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %48 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 21*/
if (reset) begin main_0_48 = 0; end
begin
main_0_48 = (1'd0 + (4 * 32'd21));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %48 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 21*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_48_reg <= main_0_48;
if (reset == 1'b0 && ^(main_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_48_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %49 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 21*/
if (reset) begin main_0_49 = 0; end
begin
main_0_49 = (1'd0 + (4 * 32'd21));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %49 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 21*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_49_reg <= main_0_49;
if (reset == 1'b0 && ^(main_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_49_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %50 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 22*/
if (reset) begin main_0_50 = 0; end
begin
main_0_50 = (1'd0 + (4 * 32'd22));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %50 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 22*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_50_reg <= main_0_50;
if (reset == 1'b0 && ^(main_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_50_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %51 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 22*/
if (reset) begin main_0_51 = 0; end
begin
main_0_51 = (1'd0 + (4 * 32'd22));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %51 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 22*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_51_reg <= main_0_51;
if (reset == 1'b0 && ^(main_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_51_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %52 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 23*/
if (reset) begin main_0_52 = 0; end
begin
main_0_52 = (1'd0 + (4 * 32'd23));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %52 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 23*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_52_reg <= main_0_52;
if (reset == 1'b0 && ^(main_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_52_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %53 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 23*/
if (reset) begin main_0_53 = 0; end
begin
main_0_53 = (1'd0 + (4 * 32'd23));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %53 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 23*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_53_reg <= main_0_53;
if (reset == 1'b0 && ^(main_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_53_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %54 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 24*/
if (reset) begin main_0_54 = 0; end
begin
main_0_54 = (1'd0 + (4 * 32'd24));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %54 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 24*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_54_reg <= main_0_54;
if (reset == 1'b0 && ^(main_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_54_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %55 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 24*/
if (reset) begin main_0_55 = 0; end
begin
main_0_55 = (1'd0 + (4 * 32'd24));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %55 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 24*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_55_reg <= main_0_55;
if (reset == 1'b0 && ^(main_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_55_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %56 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 25*/
if (reset) begin main_0_56 = 0; end
begin
main_0_56 = (1'd0 + (4 * 32'd25));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %56 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 25*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_56_reg <= main_0_56;
if (reset == 1'b0 && ^(main_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_56_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %57 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 25*/
if (reset) begin main_0_57 = 0; end
begin
main_0_57 = (1'd0 + (4 * 32'd25));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %57 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 25*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_57_reg <= main_0_57;
if (reset == 1'b0 && ^(main_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_57_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %58 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 26*/
if (reset) begin main_0_58 = 0; end
begin
main_0_58 = (1'd0 + (4 * 32'd26));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %58 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 26*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_58_reg <= main_0_58;
if (reset == 1'b0 && ^(main_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_58_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %59 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 26*/
if (reset) begin main_0_59 = 0; end
begin
main_0_59 = (1'd0 + (4 * 32'd26));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %59 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 26*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_59_reg <= main_0_59;
if (reset == 1'b0 && ^(main_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_59_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %60 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 27*/
if (reset) begin main_0_60 = 0; end
begin
main_0_60 = (1'd0 + (4 * 32'd27));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %60 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 27*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_60_reg <= main_0_60;
if (reset == 1'b0 && ^(main_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_60_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %61 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 27*/
if (reset) begin main_0_61 = 0; end
begin
main_0_61 = (1'd0 + (4 * 32'd27));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %61 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 27*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_61_reg <= main_0_61;
if (reset == 1'b0 && ^(main_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_61_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %62 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 28*/
if (reset) begin main_0_62 = 0; end
begin
main_0_62 = (1'd0 + (4 * 32'd28));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %62 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 28*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_62_reg <= main_0_62;
if (reset == 1'b0 && ^(main_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_62_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %63 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 28*/
if (reset) begin main_0_63 = 0; end
begin
main_0_63 = (1'd0 + (4 * 32'd28));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %63 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 28*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_63_reg <= main_0_63;
if (reset == 1'b0 && ^(main_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_63_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %64 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 29*/
if (reset) begin main_0_64 = 0; end
begin
main_0_64 = (1'd0 + (4 * 32'd29));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %64 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 29*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_64_reg <= main_0_64;
if (reset == 1'b0 && ^(main_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_64_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %65 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 29*/
if (reset) begin main_0_65 = 0; end
begin
main_0_65 = (1'd0 + (4 * 32'd29));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %65 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 29*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_65_reg <= main_0_65;
if (reset == 1'b0 && ^(main_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_65_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %66 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 30*/
if (reset) begin main_0_66 = 0; end
begin
main_0_66 = (1'd0 + (4 * 32'd30));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %66 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 30*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_66_reg <= main_0_66;
if (reset == 1'b0 && ^(main_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_66_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %67 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 30*/
if (reset) begin main_0_67 = 0; end
begin
main_0_67 = (1'd0 + (4 * 32'd30));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %67 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 30*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_67_reg <= main_0_67;
if (reset == 1'b0 && ^(main_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_67_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %68 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 31*/
if (reset) begin main_0_68 = 0; end
begin
main_0_68 = (1'd0 + (4 * 32'd31));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %68 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 31*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_68_reg <= main_0_68;
if (reset == 1'b0 && ^(main_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_68_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %69 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 31*/
if (reset) begin main_0_69 = 0; end
begin
main_0_69 = (1'd0 + (4 * 32'd31));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %69 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 31*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_69_reg <= main_0_69;
if (reset == 1'b0 && ^(main_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_69_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %70 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 32*/
if (reset) begin main_0_70 = 0; end
begin
main_0_70 = (1'd0 + (4 * 32'd32));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %70 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 32*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_70_reg <= main_0_70;
if (reset == 1'b0 && ^(main_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_70_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %71 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 32*/
if (reset) begin main_0_71 = 0; end
begin
main_0_71 = (1'd0 + (4 * 32'd32));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %71 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 32*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_71_reg <= main_0_71;
if (reset == 1'b0 && ^(main_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_71_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %72 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 33*/
if (reset) begin main_0_72 = 0; end
begin
main_0_72 = (1'd0 + (4 * 32'd33));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %72 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 33*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_72_reg <= main_0_72;
if (reset == 1'b0 && ^(main_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_72_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %73 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 33*/
if (reset) begin main_0_73 = 0; end
begin
main_0_73 = (1'd0 + (4 * 32'd33));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %73 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 33*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_73_reg <= main_0_73;
if (reset == 1'b0 && ^(main_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_73_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %74 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 34*/
if (reset) begin main_0_74 = 0; end
begin
main_0_74 = (1'd0 + (4 * 32'd34));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %74 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 34*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_74_reg <= main_0_74;
if (reset == 1'b0 && ^(main_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_74_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %75 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 34*/
if (reset) begin main_0_75 = 0; end
begin
main_0_75 = (1'd0 + (4 * 32'd34));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %75 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 34*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_75_reg <= main_0_75;
if (reset == 1'b0 && ^(main_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_75_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %76 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 35*/
if (reset) begin main_0_76 = 0; end
begin
main_0_76 = (1'd0 + (4 * 32'd35));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %76 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 35*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_76_reg <= main_0_76;
if (reset == 1'b0 && ^(main_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_76_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %77 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 35*/
if (reset) begin main_0_77 = 0; end
begin
main_0_77 = (1'd0 + (4 * 32'd35));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %77 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 35*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_77_reg <= main_0_77;
if (reset == 1'b0 && ^(main_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_77_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %78 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 36*/
if (reset) begin main_0_78 = 0; end
begin
main_0_78 = (1'd0 + (4 * 32'd36));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %78 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 36*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_78_reg <= main_0_78;
if (reset == 1'b0 && ^(main_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_78_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %79 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 36*/
if (reset) begin main_0_79 = 0; end
begin
main_0_79 = (1'd0 + (4 * 32'd36));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %79 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 36*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_79_reg <= main_0_79;
if (reset == 1'b0 && ^(main_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_79_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %80 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 37*/
if (reset) begin main_0_80 = 0; end
begin
main_0_80 = (1'd0 + (4 * 32'd37));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %80 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 37*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_80_reg <= main_0_80;
if (reset == 1'b0 && ^(main_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_80_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %81 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 37*/
if (reset) begin main_0_81 = 0; end
begin
main_0_81 = (1'd0 + (4 * 32'd37));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %81 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 37*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_81_reg <= main_0_81;
if (reset == 1'b0 && ^(main_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_81_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %82 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 38*/
if (reset) begin main_0_82 = 0; end
begin
main_0_82 = (1'd0 + (4 * 32'd38));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %82 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 38*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_82_reg <= main_0_82;
if (reset == 1'b0 && ^(main_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_82_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %83 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 38*/
if (reset) begin main_0_83 = 0; end
begin
main_0_83 = (1'd0 + (4 * 32'd38));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %83 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 38*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_83_reg <= main_0_83;
if (reset == 1'b0 && ^(main_0_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_83_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %84 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 39*/
if (reset) begin main_0_84 = 0; end
begin
main_0_84 = (1'd0 + (4 * 32'd39));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %84 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 39*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_84_reg <= main_0_84;
if (reset == 1'b0 && ^(main_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_84_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %85 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 39*/
if (reset) begin main_0_85 = 0; end
begin
main_0_85 = (1'd0 + (4 * 32'd39));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %85 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 39*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_85_reg <= main_0_85;
if (reset == 1'b0 && ^(main_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_85_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %86 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 40*/
if (reset) begin main_0_86 = 0; end
begin
main_0_86 = (1'd0 + (4 * 32'd40));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %86 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 40*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_86_reg <= main_0_86;
if (reset == 1'b0 && ^(main_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_86_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %87 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 40*/
if (reset) begin main_0_87 = 0; end
begin
main_0_87 = (1'd0 + (4 * 32'd40));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %87 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 40*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_87_reg <= main_0_87;
if (reset == 1'b0 && ^(main_0_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_87_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %88 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 41*/
if (reset) begin main_0_88 = 0; end
begin
main_0_88 = (1'd0 + (4 * 32'd41));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %88 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 41*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_88_reg <= main_0_88;
if (reset == 1'b0 && ^(main_0_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_88_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %89 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 41*/
if (reset) begin main_0_89 = 0; end
begin
main_0_89 = (1'd0 + (4 * 32'd41));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %89 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 41*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_89_reg <= main_0_89;
if (reset == 1'b0 && ^(main_0_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_89_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %90 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 42*/
if (reset) begin main_0_90 = 0; end
begin
main_0_90 = (1'd0 + (4 * 32'd42));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %90 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 42*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_90_reg <= main_0_90;
if (reset == 1'b0 && ^(main_0_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_90_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %91 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 42*/
if (reset) begin main_0_91 = 0; end
begin
main_0_91 = (1'd0 + (4 * 32'd42));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %91 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 42*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_91_reg <= main_0_91;
if (reset == 1'b0 && ^(main_0_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_91_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %92 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 43*/
if (reset) begin main_0_92 = 0; end
begin
main_0_92 = (1'd0 + (4 * 32'd43));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %92 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 43*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_92_reg <= main_0_92;
if (reset == 1'b0 && ^(main_0_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_92_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %93 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 43*/
if (reset) begin main_0_93 = 0; end
begin
main_0_93 = (1'd0 + (4 * 32'd43));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %93 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 43*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_93_reg <= main_0_93;
if (reset == 1'b0 && ^(main_0_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_93_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %94 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 44*/
if (reset) begin main_0_94 = 0; end
begin
main_0_94 = (1'd0 + (4 * 32'd44));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %94 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 44*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_94_reg <= main_0_94;
if (reset == 1'b0 && ^(main_0_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_94_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %95 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 44*/
if (reset) begin main_0_95 = 0; end
begin
main_0_95 = (1'd0 + (4 * 32'd44));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %95 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 44*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_95_reg <= main_0_95;
if (reset == 1'b0 && ^(main_0_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_95_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %96 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 45*/
if (reset) begin main_0_96 = 0; end
begin
main_0_96 = (1'd0 + (4 * 32'd45));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %96 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 45*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_96_reg <= main_0_96;
if (reset == 1'b0 && ^(main_0_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_96_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %97 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 45*/
if (reset) begin main_0_97 = 0; end
begin
main_0_97 = (1'd0 + (4 * 32'd45));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %97 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 45*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_97_reg <= main_0_97;
if (reset == 1'b0 && ^(main_0_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_97_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %98 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 46*/
if (reset) begin main_0_98 = 0; end
begin
main_0_98 = (1'd0 + (4 * 32'd46));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %98 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 46*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_98_reg <= main_0_98;
if (reset == 1'b0 && ^(main_0_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_98_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %99 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 46*/
if (reset) begin main_0_99 = 0; end
begin
main_0_99 = (1'd0 + (4 * 32'd46));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %99 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 46*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_99_reg <= main_0_99;
if (reset == 1'b0 && ^(main_0_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_99_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %100 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 47*/
if (reset) begin main_0_100 = 0; end
begin
main_0_100 = (1'd0 + (4 * 32'd47));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %100 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 47*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_100_reg <= main_0_100;
if (reset == 1'b0 && ^(main_0_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_100_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %101 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 47*/
if (reset) begin main_0_101 = 0; end
begin
main_0_101 = (1'd0 + (4 * 32'd47));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %101 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 47*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_101_reg <= main_0_101;
if (reset == 1'b0 && ^(main_0_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_101_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %102 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 48*/
if (reset) begin main_0_102 = 0; end
begin
main_0_102 = (1'd0 + (4 * 32'd48));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %102 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 48*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_102_reg <= main_0_102;
if (reset == 1'b0 && ^(main_0_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_102_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %103 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 48*/
if (reset) begin main_0_103 = 0; end
begin
main_0_103 = (1'd0 + (4 * 32'd48));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %103 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 48*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_103_reg <= main_0_103;
if (reset == 1'b0 && ^(main_0_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_103_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %104 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 49*/
if (reset) begin main_0_104 = 0; end
begin
main_0_104 = (1'd0 + (4 * 32'd49));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %104 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 49*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_104_reg <= main_0_104;
if (reset == 1'b0 && ^(main_0_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_104_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %105 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 49*/
if (reset) begin main_0_105 = 0; end
begin
main_0_105 = (1'd0 + (4 * 32'd49));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %105 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 49*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_105_reg <= main_0_105;
if (reset == 1'b0 && ^(main_0_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_105_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %106 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 50*/
if (reset) begin main_0_106 = 0; end
begin
main_0_106 = (1'd0 + (4 * 32'd50));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %106 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 50*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_106_reg <= main_0_106;
if (reset == 1'b0 && ^(main_0_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_106_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %107 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 50*/
if (reset) begin main_0_107 = 0; end
begin
main_0_107 = (1'd0 + (4 * 32'd50));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %107 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 50*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_107_reg <= main_0_107;
if (reset == 1'b0 && ^(main_0_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_107_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %108 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 51*/
if (reset) begin main_0_108 = 0; end
begin
main_0_108 = (1'd0 + (4 * 32'd51));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %108 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 51*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_108_reg <= main_0_108;
if (reset == 1'b0 && ^(main_0_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_108_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %109 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 51*/
if (reset) begin main_0_109 = 0; end
begin
main_0_109 = (1'd0 + (4 * 32'd51));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %109 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 51*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_109_reg <= main_0_109;
if (reset == 1'b0 && ^(main_0_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_109_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %110 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 52*/
if (reset) begin main_0_110 = 0; end
begin
main_0_110 = (1'd0 + (4 * 32'd52));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %110 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 52*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_110_reg <= main_0_110;
if (reset == 1'b0 && ^(main_0_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_110_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %111 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 52*/
if (reset) begin main_0_111 = 0; end
begin
main_0_111 = (1'd0 + (4 * 32'd52));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %111 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 52*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_111_reg <= main_0_111;
if (reset == 1'b0 && ^(main_0_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_111_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %112 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 53*/
if (reset) begin main_0_112 = 0; end
begin
main_0_112 = (1'd0 + (4 * 32'd53));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %112 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 53*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_112_reg <= main_0_112;
if (reset == 1'b0 && ^(main_0_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_112_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %113 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 53*/
if (reset) begin main_0_113 = 0; end
begin
main_0_113 = (1'd0 + (4 * 32'd53));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %113 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 53*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_113_reg <= main_0_113;
if (reset == 1'b0 && ^(main_0_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_113_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %114 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 54*/
if (reset) begin main_0_114 = 0; end
begin
main_0_114 = (1'd0 + (4 * 32'd54));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %114 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 54*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_114_reg <= main_0_114;
if (reset == 1'b0 && ^(main_0_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_114_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %115 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 54*/
if (reset) begin main_0_115 = 0; end
begin
main_0_115 = (1'd0 + (4 * 32'd54));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %115 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 54*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_115_reg <= main_0_115;
if (reset == 1'b0 && ^(main_0_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_115_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %116 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 55*/
if (reset) begin main_0_116 = 0; end
begin
main_0_116 = (1'd0 + (4 * 32'd55));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %116 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 55*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_116_reg <= main_0_116;
if (reset == 1'b0 && ^(main_0_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_116_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %117 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 55*/
if (reset) begin main_0_117 = 0; end
begin
main_0_117 = (1'd0 + (4 * 32'd55));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %117 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 55*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_117_reg <= main_0_117;
if (reset == 1'b0 && ^(main_0_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_117_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %118 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 56*/
if (reset) begin main_0_118 = 0; end
begin
main_0_118 = (1'd0 + (4 * 32'd56));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %118 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 56*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_118_reg <= main_0_118;
if (reset == 1'b0 && ^(main_0_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_118_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %119 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 56*/
if (reset) begin main_0_119 = 0; end
begin
main_0_119 = (1'd0 + (4 * 32'd56));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %119 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 56*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_119_reg <= main_0_119;
if (reset == 1'b0 && ^(main_0_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_119_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %120 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 57*/
if (reset) begin main_0_120 = 0; end
begin
main_0_120 = (1'd0 + (4 * 32'd57));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %120 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 57*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_120_reg <= main_0_120;
if (reset == 1'b0 && ^(main_0_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_120_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %121 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 57*/
if (reset) begin main_0_121 = 0; end
begin
main_0_121 = (1'd0 + (4 * 32'd57));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %121 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 57*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_121_reg <= main_0_121;
if (reset == 1'b0 && ^(main_0_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_121_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %122 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 58*/
if (reset) begin main_0_122 = 0; end
begin
main_0_122 = (1'd0 + (4 * 32'd58));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %122 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 58*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_122_reg <= main_0_122;
if (reset == 1'b0 && ^(main_0_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_122_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %123 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 58*/
if (reset) begin main_0_123 = 0; end
begin
main_0_123 = (1'd0 + (4 * 32'd58));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %123 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 58*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_123_reg <= main_0_123;
if (reset == 1'b0 && ^(main_0_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_123_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %124 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 59*/
if (reset) begin main_0_124 = 0; end
begin
main_0_124 = (1'd0 + (4 * 32'd59));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %124 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 59*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_124_reg <= main_0_124;
if (reset == 1'b0 && ^(main_0_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_124_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %125 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 59*/
if (reset) begin main_0_125 = 0; end
begin
main_0_125 = (1'd0 + (4 * 32'd59));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %125 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 59*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_125_reg <= main_0_125;
if (reset == 1'b0 && ^(main_0_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_125_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %126 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 60*/
if (reset) begin main_0_126 = 0; end
begin
main_0_126 = (1'd0 + (4 * 32'd60));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %126 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 60*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_126_reg <= main_0_126;
if (reset == 1'b0 && ^(main_0_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_126_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %127 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 60*/
if (reset) begin main_0_127 = 0; end
begin
main_0_127 = (1'd0 + (4 * 32'd60));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %127 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 60*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_127_reg <= main_0_127;
if (reset == 1'b0 && ^(main_0_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_127_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %128 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 61*/
if (reset) begin main_0_128 = 0; end
begin
main_0_128 = (1'd0 + (4 * 32'd61));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %128 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 61*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_128_reg <= main_0_128;
if (reset == 1'b0 && ^(main_0_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_128_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %129 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 61*/
if (reset) begin main_0_129 = 0; end
begin
main_0_129 = (1'd0 + (4 * 32'd61));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %129 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 61*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_129_reg <= main_0_129;
if (reset == 1'b0 && ^(main_0_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_129_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %130 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 62*/
if (reset) begin main_0_130 = 0; end
begin
main_0_130 = (1'd0 + (4 * 32'd62));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %130 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 62*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_130_reg <= main_0_130;
if (reset == 1'b0 && ^(main_0_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_130_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %131 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 62*/
if (reset) begin main_0_131 = 0; end
begin
main_0_131 = (1'd0 + (4 * 32'd62));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %131 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 62*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_131_reg <= main_0_131;
if (reset == 1'b0 && ^(main_0_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_131_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %132 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 63*/
if (reset) begin main_0_132 = 0; end
begin
main_0_132 = (1'd0 + (4 * 32'd63));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %132 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 63*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_132_reg <= main_0_132;
if (reset == 1'b0 && ^(main_0_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_132_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %133 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 63*/
if (reset) begin main_0_133 = 0; end
begin
main_0_133 = (1'd0 + (4 * 32'd63));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %133 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 63*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_133_reg <= main_0_133;
if (reset == 1'b0 && ^(main_0_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_133_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %134 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 64*/
if (reset) begin main_0_134 = 0; end
begin
main_0_134 = (1'd0 + (4 * 32'd64));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %134 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 64*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_134_reg <= main_0_134;
if (reset == 1'b0 && ^(main_0_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_134_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %135 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 64*/
if (reset) begin main_0_135 = 0; end
begin
main_0_135 = (1'd0 + (4 * 32'd64));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %135 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 64*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_135_reg <= main_0_135;
if (reset == 1'b0 && ^(main_0_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_135_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %136 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 65*/
if (reset) begin main_0_136 = 0; end
begin
main_0_136 = (1'd0 + (4 * 32'd65));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %136 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 65*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_136_reg <= main_0_136;
if (reset == 1'b0 && ^(main_0_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_136_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %137 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 65*/
if (reset) begin main_0_137 = 0; end
begin
main_0_137 = (1'd0 + (4 * 32'd65));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %137 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 65*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_137_reg <= main_0_137;
if (reset == 1'b0 && ^(main_0_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_137_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %138 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 66*/
if (reset) begin main_0_138 = 0; end
begin
main_0_138 = (1'd0 + (4 * 32'd66));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %138 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 66*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_138_reg <= main_0_138;
if (reset == 1'b0 && ^(main_0_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_138_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %139 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 66*/
if (reset) begin main_0_139 = 0; end
begin
main_0_139 = (1'd0 + (4 * 32'd66));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %139 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 66*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_139_reg <= main_0_139;
if (reset == 1'b0 && ^(main_0_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_139_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %140 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 67*/
if (reset) begin main_0_140 = 0; end
begin
main_0_140 = (1'd0 + (4 * 32'd67));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %140 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 67*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_140_reg <= main_0_140;
if (reset == 1'b0 && ^(main_0_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_140_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %141 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 67*/
if (reset) begin main_0_141 = 0; end
begin
main_0_141 = (1'd0 + (4 * 32'd67));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %141 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 67*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_141_reg <= main_0_141;
if (reset == 1'b0 && ^(main_0_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_141_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %142 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 68*/
if (reset) begin main_0_142 = 0; end
begin
main_0_142 = (1'd0 + (4 * 32'd68));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %142 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 68*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_142_reg <= main_0_142;
if (reset == 1'b0 && ^(main_0_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_142_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %143 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 68*/
if (reset) begin main_0_143 = 0; end
begin
main_0_143 = (1'd0 + (4 * 32'd68));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %143 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 68*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_143_reg <= main_0_143;
if (reset == 1'b0 && ^(main_0_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_143_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %144 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 69*/
if (reset) begin main_0_144 = 0; end
begin
main_0_144 = (1'd0 + (4 * 32'd69));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %144 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 69*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_144_reg <= main_0_144;
if (reset == 1'b0 && ^(main_0_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_144_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %145 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 69*/
if (reset) begin main_0_145 = 0; end
begin
main_0_145 = (1'd0 + (4 * 32'd69));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %145 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 69*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_145_reg <= main_0_145;
if (reset == 1'b0 && ^(main_0_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_145_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %146 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 70*/
if (reset) begin main_0_146 = 0; end
begin
main_0_146 = (1'd0 + (4 * 32'd70));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %146 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 70*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_146_reg <= main_0_146;
if (reset == 1'b0 && ^(main_0_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_146_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %147 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 70*/
if (reset) begin main_0_147 = 0; end
begin
main_0_147 = (1'd0 + (4 * 32'd70));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %147 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 70*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_147_reg <= main_0_147;
if (reset == 1'b0 && ^(main_0_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_147_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %148 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 71*/
if (reset) begin main_0_148 = 0; end
begin
main_0_148 = (1'd0 + (4 * 32'd71));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %148 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 71*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_148_reg <= main_0_148;
if (reset == 1'b0 && ^(main_0_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_148_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %149 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 71*/
if (reset) begin main_0_149 = 0; end
begin
main_0_149 = (1'd0 + (4 * 32'd71));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %149 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 71*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_149_reg <= main_0_149;
if (reset == 1'b0 && ^(main_0_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_149_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %150 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 72*/
if (reset) begin main_0_150 = 0; end
begin
main_0_150 = (1'd0 + (4 * 32'd72));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %150 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 72*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_150_reg <= main_0_150;
if (reset == 1'b0 && ^(main_0_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_150_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %151 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 72*/
if (reset) begin main_0_151 = 0; end
begin
main_0_151 = (1'd0 + (4 * 32'd72));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %151 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 72*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_151_reg <= main_0_151;
if (reset == 1'b0 && ^(main_0_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_151_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %152 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 73*/
if (reset) begin main_0_152 = 0; end
begin
main_0_152 = (1'd0 + (4 * 32'd73));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %152 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 73*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_152_reg <= main_0_152;
if (reset == 1'b0 && ^(main_0_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_152_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %153 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 73*/
if (reset) begin main_0_153 = 0; end
begin
main_0_153 = (1'd0 + (4 * 32'd73));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %153 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 73*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_153_reg <= main_0_153;
if (reset == 1'b0 && ^(main_0_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_153_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %154 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 74*/
if (reset) begin main_0_154 = 0; end
begin
main_0_154 = (1'd0 + (4 * 32'd74));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %154 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 74*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_154_reg <= main_0_154;
if (reset == 1'b0 && ^(main_0_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_154_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %155 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 74*/
if (reset) begin main_0_155 = 0; end
begin
main_0_155 = (1'd0 + (4 * 32'd74));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %155 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 74*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_155_reg <= main_0_155;
if (reset == 1'b0 && ^(main_0_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_155_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %156 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 75*/
if (reset) begin main_0_156 = 0; end
begin
main_0_156 = (1'd0 + (4 * 32'd75));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %156 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 75*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_156_reg <= main_0_156;
if (reset == 1'b0 && ^(main_0_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_156_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %157 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 75*/
if (reset) begin main_0_157 = 0; end
begin
main_0_157 = (1'd0 + (4 * 32'd75));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %157 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 75*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_157_reg <= main_0_157;
if (reset == 1'b0 && ^(main_0_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_157_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %158 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 1*/
if (reset) begin main_0_158 = 0; end
begin
main_0_158 = (1'd0 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %158 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_158_reg <= main_0_158;
if (reset == 1'b0 && ^(main_0_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_158_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %159 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 1*/
if (reset) begin main_0_159 = 0; end
begin
main_0_159 = (1'd0 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %159 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_159_reg <= main_0_159;
if (reset == 1'b0 && ^(main_0_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_159_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %160 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 2*/
if (reset) begin main_0_160 = 0; end
begin
main_0_160 = (1'd0 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %160 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_160_reg <= main_0_160;
if (reset == 1'b0 && ^(main_0_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_160_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %161 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 2*/
if (reset) begin main_0_161 = 0; end
begin
main_0_161 = (1'd0 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %161 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_161_reg <= main_0_161;
if (reset == 1'b0 && ^(main_0_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_161_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %162 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 3*/
if (reset) begin main_0_162 = 0; end
begin
main_0_162 = (1'd0 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %162 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_162_reg <= main_0_162;
if (reset == 1'b0 && ^(main_0_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_162_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %163 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 3*/
if (reset) begin main_0_163 = 0; end
begin
main_0_163 = (1'd0 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %163 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_163_reg <= main_0_163;
if (reset == 1'b0 && ^(main_0_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_163_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %164 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 4*/
if (reset) begin main_0_164 = 0; end
begin
main_0_164 = (1'd0 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %164 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_164_reg <= main_0_164;
if (reset == 1'b0 && ^(main_0_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_164_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %165 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 4*/
if (reset) begin main_0_165 = 0; end
begin
main_0_165 = (1'd0 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %165 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_165_reg <= main_0_165;
if (reset == 1'b0 && ^(main_0_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_165_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %166 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 5*/
if (reset) begin main_0_166 = 0; end
begin
main_0_166 = (1'd0 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %166 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 5*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_166_reg <= main_0_166;
if (reset == 1'b0 && ^(main_0_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_166_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %167 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 5*/
if (reset) begin main_0_167 = 0; end
begin
main_0_167 = (1'd0 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %167 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 5*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_167_reg <= main_0_167;
if (reset == 1'b0 && ^(main_0_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_167_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %168 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 6*/
if (reset) begin main_0_168 = 0; end
begin
main_0_168 = (1'd0 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %168 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 6*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_168_reg <= main_0_168;
if (reset == 1'b0 && ^(main_0_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_168_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %169 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 6*/
if (reset) begin main_0_169 = 0; end
begin
main_0_169 = (1'd0 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %169 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 6*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_169_reg <= main_0_169;
if (reset == 1'b0 && ^(main_0_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_169_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %170 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 7*/
if (reset) begin main_0_170 = 0; end
begin
main_0_170 = (1'd0 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %170 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 7*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_170_reg <= main_0_170;
if (reset == 1'b0 && ^(main_0_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_170_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %171 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 7*/
if (reset) begin main_0_171 = 0; end
begin
main_0_171 = (1'd0 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %171 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 7*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_171_reg <= main_0_171;
if (reset == 1'b0 && ^(main_0_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_171_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %172 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 8*/
if (reset) begin main_0_172 = 0; end
begin
main_0_172 = (1'd0 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %172 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 8*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_172_reg <= main_0_172;
if (reset == 1'b0 && ^(main_0_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_172_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %173 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 8*/
if (reset) begin main_0_173 = 0; end
begin
main_0_173 = (1'd0 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %173 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 8*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_173_reg <= main_0_173;
if (reset == 1'b0 && ^(main_0_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_173_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %174 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 9*/
if (reset) begin main_0_174 = 0; end
begin
main_0_174 = (1'd0 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %174 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 9*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_174_reg <= main_0_174;
if (reset == 1'b0 && ^(main_0_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_174_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %175 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 9*/
if (reset) begin main_0_175 = 0; end
begin
main_0_175 = (1'd0 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %175 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 9*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_175_reg <= main_0_175;
if (reset == 1'b0 && ^(main_0_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_175_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %176 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 10*/
if (reset) begin main_0_176 = 0; end
begin
main_0_176 = (1'd0 + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %176 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 10*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_176_reg <= main_0_176;
if (reset == 1'b0 && ^(main_0_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_176_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %177 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 10*/
if (reset) begin main_0_177 = 0; end
begin
main_0_177 = (1'd0 + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %177 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 10*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_177_reg <= main_0_177;
if (reset == 1'b0 && ^(main_0_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_177_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %178 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 11*/
if (reset) begin main_0_178 = 0; end
begin
main_0_178 = (1'd0 + (4 * 32'd11));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %178 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 11*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_178_reg <= main_0_178;
if (reset == 1'b0 && ^(main_0_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_178_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %179 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 11*/
if (reset) begin main_0_179 = 0; end
begin
main_0_179 = (1'd0 + (4 * 32'd11));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %179 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 11*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_179_reg <= main_0_179;
if (reset == 1'b0 && ^(main_0_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_179_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %180 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 12*/
if (reset) begin main_0_180 = 0; end
begin
main_0_180 = (1'd0 + (4 * 32'd12));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %180 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 12*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_180_reg <= main_0_180;
if (reset == 1'b0 && ^(main_0_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_180_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %181 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 12*/
if (reset) begin main_0_181 = 0; end
begin
main_0_181 = (1'd0 + (4 * 32'd12));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %181 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 12*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_181_reg <= main_0_181;
if (reset == 1'b0 && ^(main_0_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_181_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %182 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 13*/
if (reset) begin main_0_182 = 0; end
begin
main_0_182 = (1'd0 + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %182 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 13*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_182_reg <= main_0_182;
if (reset == 1'b0 && ^(main_0_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_182_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %183 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 13*/
if (reset) begin main_0_183 = 0; end
begin
main_0_183 = (1'd0 + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %183 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 13*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_183_reg <= main_0_183;
if (reset == 1'b0 && ^(main_0_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_183_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %184 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 14*/
if (reset) begin main_0_184 = 0; end
begin
main_0_184 = (1'd0 + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %184 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 14*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_184_reg <= main_0_184;
if (reset == 1'b0 && ^(main_0_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_184_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %185 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 14*/
if (reset) begin main_0_185 = 0; end
begin
main_0_185 = (1'd0 + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %185 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 14*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_185_reg <= main_0_185;
if (reset == 1'b0 && ^(main_0_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_185_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %186 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 15*/
if (reset) begin main_0_186 = 0; end
begin
main_0_186 = (1'd0 + (4 * 32'd15));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %186 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 15*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_186_reg <= main_0_186;
if (reset == 1'b0 && ^(main_0_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_186_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %187 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 15*/
if (reset) begin main_0_187 = 0; end
begin
main_0_187 = (1'd0 + (4 * 32'd15));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %187 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 15*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_187_reg <= main_0_187;
if (reset == 1'b0 && ^(main_0_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_187_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %188 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 16*/
if (reset) begin main_0_188 = 0; end
begin
main_0_188 = (1'd0 + (4 * 32'd16));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %188 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 16*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_188_reg <= main_0_188;
if (reset == 1'b0 && ^(main_0_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_188_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %189 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 16*/
if (reset) begin main_0_189 = 0; end
begin
main_0_189 = (1'd0 + (4 * 32'd16));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %189 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 16*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_189_reg <= main_0_189;
if (reset == 1'b0 && ^(main_0_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_189_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %190 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 17*/
if (reset) begin main_0_190 = 0; end
begin
main_0_190 = (1'd0 + (4 * 32'd17));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %190 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 17*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_190_reg <= main_0_190;
if (reset == 1'b0 && ^(main_0_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_190_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %191 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 17*/
if (reset) begin main_0_191 = 0; end
begin
main_0_191 = (1'd0 + (4 * 32'd17));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %191 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 17*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_191_reg <= main_0_191;
if (reset == 1'b0 && ^(main_0_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_191_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %192 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 18*/
if (reset) begin main_0_192 = 0; end
begin
main_0_192 = (1'd0 + (4 * 32'd18));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %192 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 18*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_192_reg <= main_0_192;
if (reset == 1'b0 && ^(main_0_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_192_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %193 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 18*/
if (reset) begin main_0_193 = 0; end
begin
main_0_193 = (1'd0 + (4 * 32'd18));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %193 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 18*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_193_reg <= main_0_193;
if (reset == 1'b0 && ^(main_0_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_193_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %194 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 19*/
if (reset) begin main_0_194 = 0; end
begin
main_0_194 = (1'd0 + (4 * 32'd19));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %194 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 19*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_194_reg <= main_0_194;
if (reset == 1'b0 && ^(main_0_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_194_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %195 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 19*/
if (reset) begin main_0_195 = 0; end
begin
main_0_195 = (1'd0 + (4 * 32'd19));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %195 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 19*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_195_reg <= main_0_195;
if (reset == 1'b0 && ^(main_0_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_195_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %196 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 20*/
if (reset) begin main_0_196 = 0; end
begin
main_0_196 = (1'd0 + (4 * 32'd20));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %196 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 20*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_196_reg <= main_0_196;
if (reset == 1'b0 && ^(main_0_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_196_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %197 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 20*/
if (reset) begin main_0_197 = 0; end
begin
main_0_197 = (1'd0 + (4 * 32'd20));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %197 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 20*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_197_reg <= main_0_197;
if (reset == 1'b0 && ^(main_0_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_197_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %198 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 21*/
if (reset) begin main_0_198 = 0; end
begin
main_0_198 = (1'd0 + (4 * 32'd21));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %198 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 21*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_198_reg <= main_0_198;
if (reset == 1'b0 && ^(main_0_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_198_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %199 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 21*/
if (reset) begin main_0_199 = 0; end
begin
main_0_199 = (1'd0 + (4 * 32'd21));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %199 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 21*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_199_reg <= main_0_199;
if (reset == 1'b0 && ^(main_0_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_199_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %200 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 22*/
if (reset) begin main_0_200 = 0; end
begin
main_0_200 = (1'd0 + (4 * 32'd22));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %200 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 22*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_200_reg <= main_0_200;
if (reset == 1'b0 && ^(main_0_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_200_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %201 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 22*/
if (reset) begin main_0_201 = 0; end
begin
main_0_201 = (1'd0 + (4 * 32'd22));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %201 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 22*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_201_reg <= main_0_201;
if (reset == 1'b0 && ^(main_0_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_201_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %202 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 23*/
if (reset) begin main_0_202 = 0; end
begin
main_0_202 = (1'd0 + (4 * 32'd23));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %202 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 23*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_202_reg <= main_0_202;
if (reset == 1'b0 && ^(main_0_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_202_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %203 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 23*/
if (reset) begin main_0_203 = 0; end
begin
main_0_203 = (1'd0 + (4 * 32'd23));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %203 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 23*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_203_reg <= main_0_203;
if (reset == 1'b0 && ^(main_0_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_203_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %204 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 24*/
if (reset) begin main_0_204 = 0; end
begin
main_0_204 = (1'd0 + (4 * 32'd24));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %204 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 24*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_204_reg <= main_0_204;
if (reset == 1'b0 && ^(main_0_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_204_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %205 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 24*/
if (reset) begin main_0_205 = 0; end
begin
main_0_205 = (1'd0 + (4 * 32'd24));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %205 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 24*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_205_reg <= main_0_205;
if (reset == 1'b0 && ^(main_0_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_205_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %206 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 25*/
if (reset) begin main_0_206 = 0; end
begin
main_0_206 = (1'd0 + (4 * 32'd25));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %206 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 25*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_206_reg <= main_0_206;
if (reset == 1'b0 && ^(main_0_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_206_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %207 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 25*/
if (reset) begin main_0_207 = 0; end
begin
main_0_207 = (1'd0 + (4 * 32'd25));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %207 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 25*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_207_reg <= main_0_207;
if (reset == 1'b0 && ^(main_0_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_207_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %208 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 26*/
if (reset) begin main_0_208 = 0; end
begin
main_0_208 = (1'd0 + (4 * 32'd26));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %208 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 26*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_208_reg <= main_0_208;
if (reset == 1'b0 && ^(main_0_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_208_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %209 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 26*/
if (reset) begin main_0_209 = 0; end
begin
main_0_209 = (1'd0 + (4 * 32'd26));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %209 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 26*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_209_reg <= main_0_209;
if (reset == 1'b0 && ^(main_0_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_209_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %210 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 27*/
if (reset) begin main_0_210 = 0; end
begin
main_0_210 = (1'd0 + (4 * 32'd27));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %210 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 27*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_210_reg <= main_0_210;
if (reset == 1'b0 && ^(main_0_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_210_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %211 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 27*/
if (reset) begin main_0_211 = 0; end
begin
main_0_211 = (1'd0 + (4 * 32'd27));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %211 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 27*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_211_reg <= main_0_211;
if (reset == 1'b0 && ^(main_0_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_211_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %212 = getelementptr inbounds [62 x i32]* %3, i32 0, i32 0*/
if (reset) begin main_0_212 = 0; end
begin
main_0_212 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %212 = getelementptr inbounds [62 x i32]* %3, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_212_reg <= main_0_212;
if (reset == 1'b0 && ^(main_0_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_212_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %213 = getelementptr inbounds [62 x i32]* %4, i32 0, i32 0*/
if (reset) begin main_0_213 = 0; end
begin
main_0_213 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %213 = getelementptr inbounds [62 x i32]* %4, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_213_reg <= main_0_213;
if (reset == 1'b0 && ^(main_0_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_213_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %214 = getelementptr inbounds [64 x i32]* %5, i32 0, i32 0*/
if (reset) begin main_0_214 = 0; end
begin
main_0_214 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %214 = getelementptr inbounds [64 x i32]* %5, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_214_reg <= main_0_214;
if (reset == 1'b0 && ^(main_0_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_214_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %sum.0 = phi i32 [ 0, %0 ], [ %sum.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_sum_0 = 32'd0;
end
/* main: %.backedge*/
/*   %sum.0 = phi i32 [ 0, %0 ], [ %sum.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_sum_0 = main__backedge_backedge_sum_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %sum.0 = phi i32 [ 0, %0 ], [ %sum.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_sum_0_reg <= main__backedge_sum_0;
if (reset == 1'b0 && ^(main__backedge_sum_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_sum_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %sum.0 = phi i32 [ 0, %0 ], [ %sum.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_sum_0_reg <= main__backedge_sum_0;
if (reset == 1'b0 && ^(main__backedge_sum_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_sum_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %b.0 = phi i32 [ undef, %0 ], [ %b.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_b_0 = 0;
end
/* main: %.backedge*/
/*   %b.0 = phi i32 [ undef, %0 ], [ %b.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_b_0 = main__backedge_backedge_b_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %b.0 = phi i32 [ undef, %0 ], [ %b.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_b_0_reg <= main__backedge_b_0;
if (reset == 1'b0 && ^(main__backedge_b_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_b_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %b.0 = phi i32 [ undef, %0 ], [ %b.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_b_0_reg <= main__backedge_b_0;
if (reset == 1'b0 && ^(main__backedge_b_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_b_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %a.0 = phi i32 [ undef, %0 ], [ %a.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_a_0 = 0;
end
/* main: %.backedge*/
/*   %a.0 = phi i32 [ undef, %0 ], [ %a.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_a_0 = main__backedge_backedge_a_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %a.0 = phi i32 [ undef, %0 ], [ %a.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_a_0_reg <= main__backedge_a_0;
if (reset == 1'b0 && ^(main__backedge_a_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_a_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %a.0 = phi i32 [ undef, %0 ], [ %a.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_a_0_reg <= main__backedge_a_0;
if (reset == 1'b0 && ^(main__backedge_a_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_a_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %pos_b_X.0 = phi i32 [ undef, %0 ], [ %pos_b_X.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_b_X_0 = 0;
end
/* main: %.backedge*/
/*   %pos_b_X.0 = phi i32 [ undef, %0 ], [ %pos_b_X.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_pos_b_X_0 = main__backedge_backedge_pos_b_X_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %pos_b_X.0 = phi i32 [ undef, %0 ], [ %pos_b_X.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_b_X_0_reg <= main__backedge_pos_b_X_0;
if (reset == 1'b0 && ^(main__backedge_pos_b_X_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_pos_b_X_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %pos_b_X.0 = phi i32 [ undef, %0 ], [ %pos_b_X.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_b_X_0_reg <= main__backedge_pos_b_X_0;
if (reset == 1'b0 && ^(main__backedge_pos_b_X_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_pos_b_X_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %pos_a_Y.0 = phi i32 [ undef, %0 ], [ %pos_a_Y.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_a_Y_0 = 0;
end
/* main: %.backedge*/
/*   %pos_a_Y.0 = phi i32 [ undef, %0 ], [ %pos_a_Y.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_pos_a_Y_0 = main__backedge_backedge_pos_a_Y_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %pos_a_Y.0 = phi i32 [ undef, %0 ], [ %pos_a_Y.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_a_Y_0_reg <= main__backedge_pos_a_Y_0;
if (reset == 1'b0 && ^(main__backedge_pos_a_Y_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_pos_a_Y_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %pos_a_Y.0 = phi i32 [ undef, %0 ], [ %pos_a_Y.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_a_Y_0_reg <= main__backedge_pos_a_Y_0;
if (reset == 1'b0 && ^(main__backedge_pos_a_Y_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_pos_a_Y_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %pos_a_X.0 = phi i32 [ undef, %0 ], [ %pos_a_X.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_a_X_0 = 0;
end
/* main: %.backedge*/
/*   %pos_a_X.0 = phi i32 [ undef, %0 ], [ %pos_a_X.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_pos_a_X_0 = main__backedge_backedge_pos_a_X_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %pos_a_X.0 = phi i32 [ undef, %0 ], [ %pos_a_X.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_a_X_0_reg <= main__backedge_pos_a_X_0;
if (reset == 1'b0 && ^(main__backedge_pos_a_X_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_pos_a_X_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %pos_a_X.0 = phi i32 [ undef, %0 ], [ %pos_a_X.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_a_X_0_reg <= main__backedge_pos_a_X_0;
if (reset == 1'b0 && ^(main__backedge_pos_a_X_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_pos_a_X_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %j.0 = phi i32 [ undef, %0 ], [ %j.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_j_0 = 0;
end
/* main: %.backedge*/
/*   %j.0 = phi i32 [ undef, %0 ], [ %j.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_j_0 = main__backedge_backedge_j_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %j.0 = phi i32 [ undef, %0 ], [ %j.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_j_0_reg <= main__backedge_j_0;
if (reset == 1'b0 && ^(main__backedge_j_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_j_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %j.0 = phi i32 [ undef, %0 ], [ %j.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_j_0_reg <= main__backedge_j_0;
if (reset == 1'b0 && ^(main__backedge_j_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_j_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %i.0 = phi i32 [ undef, %0 ], [ %i.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_i_0 = 0;
end
/* main: %.backedge*/
/*   %i.0 = phi i32 [ undef, %0 ], [ %i.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_i_0 = main__backedge_backedge_i_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %i.0 = phi i32 [ undef, %0 ], [ %i.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_i_0_reg <= main__backedge_i_0;
if (reset == 1'b0 && ^(main__backedge_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %i.0 = phi i32 [ undef, %0 ], [ %i.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_i_0_reg <= main__backedge_i_0;
if (reset == 1'b0 && ^(main__backedge_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %state.0 = phi i32 [ 0, %0 ], [ %state.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_state_0 = 32'd0;
end
/* main: %.backedge*/
/*   %state.0 = phi i32 [ 0, %0 ], [ %state.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_state_0 = main__backedge_backedge_state_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %state.0 = phi i32 [ 0, %0 ], [ %state.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_state_0_reg <= main__backedge_state_0;
if (reset == 1'b0 && ^(main__backedge_state_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_state_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %state.0 = phi i32 [ 0, %0 ], [ %state.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_state_0_reg <= main__backedge_state_0;
if (reset == 1'b0 && ^(main__backedge_state_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_state_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %sum_1hop.0 = phi i32 [ 0, %0 ], [ %sum_1hop.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_sum_1hop_0 = 32'd0;
end
/* main: %.backedge*/
/*   %sum_1hop.0 = phi i32 [ 0, %0 ], [ %sum_1hop.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_sum_1hop_0 = main__backedge_backedge_sum_1hop_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %sum_1hop.0 = phi i32 [ 0, %0 ], [ %sum_1hop.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_sum_1hop_0_reg <= main__backedge_sum_1hop_0;
if (reset == 1'b0 && ^(main__backedge_sum_1hop_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_sum_1hop_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %sum_1hop.0 = phi i32 [ 0, %0 ], [ %sum_1hop.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_sum_1hop_0_reg <= main__backedge_sum_1hop_0;
if (reset == 1'b0 && ^(main__backedge_sum_1hop_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_sum_1hop_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %314, %293 ], [ %sum.0, %264 ], [ %sum.0, %279 ], [ %sum.0, %290 ], [ %sum.0, %218 ], [ %sum.0, %.backedge ], [ %sum.0, %219 ], [ %sum.0, %221 ], [ %sum.0, %233 ], [ %sum.0, %260 ], [ %sum.0, %287 ], [ %sum.0, %291 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %314, %293 ], [ %sum.0, %264 ], [ %sum.0, %279 ], [ %sum.0, %290 ], [ %sum.0, %218 ], [ %sum.0, %.backedge ], [ %sum.0, %219 ], [ %sum.0, %221 ], [ %sum.0, %233 ], [ %sum.0, %260 ], [ %sum.0, %287 ], [ %sum.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_218_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %314, %293 ], [ %sum.0, %264 ], [ %sum.0, %279 ], [ %sum.0, %290 ], [ %sum.0, %218 ], [ %sum.0, %.backedge ], [ %sum.0, %219 ], [ %sum.0, %221 ], [ %sum.0, %233 ], [ %sum.0, %260 ], [ %sum.0, %287 ], [ %sum.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_219_54) & (memory_controller_waitrequest == 1'd0)) & (main_219_220 == 1'd1)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %314, %293 ], [ %sum.0, %264 ], [ %sum.0, %279 ], [ %sum.0, %290 ], [ %sum.0, %218 ], [ %sum.0, %.backedge ], [ %sum.0, %219 ], [ %sum.0, %221 ], [ %sum.0, %233 ], [ %sum.0, %260 ], [ %sum.0, %287 ], [ %sum.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_221_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %314, %293 ], [ %sum.0, %264 ], [ %sum.0, %279 ], [ %sum.0, %290 ], [ %sum.0, %218 ], [ %sum.0, %.backedge ], [ %sum.0, %219 ], [ %sum.0, %221 ], [ %sum.0, %233 ], [ %sum.0, %260 ], [ %sum.0, %287 ], [ %sum.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_233_58) & (memory_controller_waitrequest == 1'd0)) & (main_233_234 == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %314, %293 ], [ %sum.0, %264 ], [ %sum.0, %279 ], [ %sum.0, %290 ], [ %sum.0, %218 ], [ %sum.0, %.backedge ], [ %sum.0, %219 ], [ %sum.0, %221 ], [ %sum.0, %233 ], [ %sum.0, %260 ], [ %sum.0, %287 ], [ %sum.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_260_68) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %314, %293 ], [ %sum.0, %264 ], [ %sum.0, %279 ], [ %sum.0, %290 ], [ %sum.0, %218 ], [ %sum.0, %.backedge ], [ %sum.0, %219 ], [ %sum.0, %221 ], [ %sum.0, %233 ], [ %sum.0, %260 ], [ %sum.0, %287 ], [ %sum.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_264_70) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %314, %293 ], [ %sum.0, %264 ], [ %sum.0, %279 ], [ %sum.0, %290 ], [ %sum.0, %218 ], [ %sum.0, %.backedge ], [ %sum.0, %219 ], [ %sum.0, %221 ], [ %sum.0, %233 ], [ %sum.0, %260 ], [ %sum.0, %287 ], [ %sum.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_279_76) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %314, %293 ], [ %sum.0, %264 ], [ %sum.0, %279 ], [ %sum.0, %290 ], [ %sum.0, %218 ], [ %sum.0, %.backedge ], [ %sum.0, %219 ], [ %sum.0, %221 ], [ %sum.0, %233 ], [ %sum.0, %260 ], [ %sum.0, %287 ], [ %sum.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_287_79) & (memory_controller_waitrequest == 1'd0)) & (main_262_263_reg == 1'd1)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %314, %293 ], [ %sum.0, %264 ], [ %sum.0, %279 ], [ %sum.0, %290 ], [ %sum.0, %218 ], [ %sum.0, %.backedge ], [ %sum.0, %219 ], [ %sum.0, %221 ], [ %sum.0, %233 ], [ %sum.0, %260 ], [ %sum.0, %287 ], [ %sum.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_290_80) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %314, %293 ], [ %sum.0, %264 ], [ %sum.0, %279 ], [ %sum.0, %290 ], [ %sum.0, %218 ], [ %sum.0, %.backedge ], [ %sum.0, %219 ], [ %sum.0, %221 ], [ %sum.0, %233 ], [ %sum.0, %260 ], [ %sum.0, %287 ], [ %sum.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_291_81) & (memory_controller_waitrequest == 1'd0)) & (main_291_292 == 1'd1)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %314, %293 ], [ %sum.0, %264 ], [ %sum.0, %279 ], [ %sum.0, %290 ], [ %sum.0, %218 ], [ %sum.0, %.backedge ], [ %sum.0, %219 ], [ %sum.0, %221 ], [ %sum.0, %233 ], [ %sum.0, %260 ], [ %sum.0, %287 ], [ %sum.0, %291 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_293_117) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_sum_0_be = main_293_314_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %314, %293 ], [ %sum.0, %264 ], [ %sum.0, %279 ], [ %sum.0, %290 ], [ %sum.0, %218 ], [ %sum.0, %.backedge ], [ %sum.0, %219 ], [ %sum.0, %221 ], [ %sum.0, %233 ], [ %sum.0, %260 ], [ %sum.0, %287 ], [ %sum.0, %291 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %314, %293 ], [ %sum.0, %264 ], [ %sum.0, %279 ], [ %sum.0, %290 ], [ %sum.0, %218 ], [ %sum.0, %.backedge ], [ %sum.0, %219 ], [ %sum.0, %221 ], [ %sum.0, %233 ], [ %sum.0, %260 ], [ %sum.0, %287 ], [ %sum.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_218_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %314, %293 ], [ %sum.0, %264 ], [ %sum.0, %279 ], [ %sum.0, %290 ], [ %sum.0, %218 ], [ %sum.0, %.backedge ], [ %sum.0, %219 ], [ %sum.0, %221 ], [ %sum.0, %233 ], [ %sum.0, %260 ], [ %sum.0, %287 ], [ %sum.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_219_54) & (memory_controller_waitrequest == 1'd0)) & (main_219_220 == 1'd1)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %314, %293 ], [ %sum.0, %264 ], [ %sum.0, %279 ], [ %sum.0, %290 ], [ %sum.0, %218 ], [ %sum.0, %.backedge ], [ %sum.0, %219 ], [ %sum.0, %221 ], [ %sum.0, %233 ], [ %sum.0, %260 ], [ %sum.0, %287 ], [ %sum.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_221_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %314, %293 ], [ %sum.0, %264 ], [ %sum.0, %279 ], [ %sum.0, %290 ], [ %sum.0, %218 ], [ %sum.0, %.backedge ], [ %sum.0, %219 ], [ %sum.0, %221 ], [ %sum.0, %233 ], [ %sum.0, %260 ], [ %sum.0, %287 ], [ %sum.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_233_58) & (memory_controller_waitrequest == 1'd0)) & (main_233_234 == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %314, %293 ], [ %sum.0, %264 ], [ %sum.0, %279 ], [ %sum.0, %290 ], [ %sum.0, %218 ], [ %sum.0, %.backedge ], [ %sum.0, %219 ], [ %sum.0, %221 ], [ %sum.0, %233 ], [ %sum.0, %260 ], [ %sum.0, %287 ], [ %sum.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_260_68) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %314, %293 ], [ %sum.0, %264 ], [ %sum.0, %279 ], [ %sum.0, %290 ], [ %sum.0, %218 ], [ %sum.0, %.backedge ], [ %sum.0, %219 ], [ %sum.0, %221 ], [ %sum.0, %233 ], [ %sum.0, %260 ], [ %sum.0, %287 ], [ %sum.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_264_70) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %314, %293 ], [ %sum.0, %264 ], [ %sum.0, %279 ], [ %sum.0, %290 ], [ %sum.0, %218 ], [ %sum.0, %.backedge ], [ %sum.0, %219 ], [ %sum.0, %221 ], [ %sum.0, %233 ], [ %sum.0, %260 ], [ %sum.0, %287 ], [ %sum.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_279_76) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %314, %293 ], [ %sum.0, %264 ], [ %sum.0, %279 ], [ %sum.0, %290 ], [ %sum.0, %218 ], [ %sum.0, %.backedge ], [ %sum.0, %219 ], [ %sum.0, %221 ], [ %sum.0, %233 ], [ %sum.0, %260 ], [ %sum.0, %287 ], [ %sum.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_287_79) & (memory_controller_waitrequest == 1'd0)) & (main_262_263_reg == 1'd1)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %314, %293 ], [ %sum.0, %264 ], [ %sum.0, %279 ], [ %sum.0, %290 ], [ %sum.0, %218 ], [ %sum.0, %.backedge ], [ %sum.0, %219 ], [ %sum.0, %221 ], [ %sum.0, %233 ], [ %sum.0, %260 ], [ %sum.0, %287 ], [ %sum.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_290_80) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %314, %293 ], [ %sum.0, %264 ], [ %sum.0, %279 ], [ %sum.0, %290 ], [ %sum.0, %218 ], [ %sum.0, %.backedge ], [ %sum.0, %219 ], [ %sum.0, %221 ], [ %sum.0, %233 ], [ %sum.0, %260 ], [ %sum.0, %287 ], [ %sum.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_291_81) & (memory_controller_waitrequest == 1'd0)) & (main_291_292 == 1'd1)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %314, %293 ], [ %sum.0, %264 ], [ %sum.0, %279 ], [ %sum.0, %290 ], [ %sum.0, %218 ], [ %sum.0, %.backedge ], [ %sum.0, %219 ], [ %sum.0, %221 ], [ %sum.0, %233 ], [ %sum.0, %260 ], [ %sum.0, %287 ], [ %sum.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_293_117) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %297, %293 ], [ %b.0, %264 ], [ %b.0, %279 ], [ %b.0, %290 ], [ %b.0, %218 ], [ %b.0, %.backedge ], [ %b.0, %219 ], [ %225, %221 ], [ %b.0, %233 ], [ %b.0, %260 ], [ %b.0, %287 ], [ %b.0, %291 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %297, %293 ], [ %b.0, %264 ], [ %b.0, %279 ], [ %b.0, %290 ], [ %b.0, %218 ], [ %b.0, %.backedge ], [ %b.0, %219 ], [ %225, %221 ], [ %b.0, %233 ], [ %b.0, %260 ], [ %b.0, %287 ], [ %b.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_218_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %297, %293 ], [ %b.0, %264 ], [ %b.0, %279 ], [ %b.0, %290 ], [ %b.0, %218 ], [ %b.0, %.backedge ], [ %b.0, %219 ], [ %225, %221 ], [ %b.0, %233 ], [ %b.0, %260 ], [ %b.0, %287 ], [ %b.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_219_54) & (memory_controller_waitrequest == 1'd0)) & (main_219_220 == 1'd1)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %297, %293 ], [ %b.0, %264 ], [ %b.0, %279 ], [ %b.0, %290 ], [ %b.0, %218 ], [ %b.0, %.backedge ], [ %b.0, %219 ], [ %225, %221 ], [ %b.0, %233 ], [ %b.0, %260 ], [ %b.0, %287 ], [ %b.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_221_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be = main_221_225_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %297, %293 ], [ %b.0, %264 ], [ %b.0, %279 ], [ %b.0, %290 ], [ %b.0, %218 ], [ %b.0, %.backedge ], [ %b.0, %219 ], [ %225, %221 ], [ %b.0, %233 ], [ %b.0, %260 ], [ %b.0, %287 ], [ %b.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_233_58) & (memory_controller_waitrequest == 1'd0)) & (main_233_234 == 1'd0)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %297, %293 ], [ %b.0, %264 ], [ %b.0, %279 ], [ %b.0, %290 ], [ %b.0, %218 ], [ %b.0, %.backedge ], [ %b.0, %219 ], [ %225, %221 ], [ %b.0, %233 ], [ %b.0, %260 ], [ %b.0, %287 ], [ %b.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_260_68) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %297, %293 ], [ %b.0, %264 ], [ %b.0, %279 ], [ %b.0, %290 ], [ %b.0, %218 ], [ %b.0, %.backedge ], [ %b.0, %219 ], [ %225, %221 ], [ %b.0, %233 ], [ %b.0, %260 ], [ %b.0, %287 ], [ %b.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_264_70) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %297, %293 ], [ %b.0, %264 ], [ %b.0, %279 ], [ %b.0, %290 ], [ %b.0, %218 ], [ %b.0, %.backedge ], [ %b.0, %219 ], [ %225, %221 ], [ %b.0, %233 ], [ %b.0, %260 ], [ %b.0, %287 ], [ %b.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_279_76) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %297, %293 ], [ %b.0, %264 ], [ %b.0, %279 ], [ %b.0, %290 ], [ %b.0, %218 ], [ %b.0, %.backedge ], [ %b.0, %219 ], [ %225, %221 ], [ %b.0, %233 ], [ %b.0, %260 ], [ %b.0, %287 ], [ %b.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_287_79) & (memory_controller_waitrequest == 1'd0)) & (main_262_263_reg == 1'd1)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %297, %293 ], [ %b.0, %264 ], [ %b.0, %279 ], [ %b.0, %290 ], [ %b.0, %218 ], [ %b.0, %.backedge ], [ %b.0, %219 ], [ %225, %221 ], [ %b.0, %233 ], [ %b.0, %260 ], [ %b.0, %287 ], [ %b.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_290_80) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %297, %293 ], [ %b.0, %264 ], [ %b.0, %279 ], [ %b.0, %290 ], [ %b.0, %218 ], [ %b.0, %.backedge ], [ %b.0, %219 ], [ %225, %221 ], [ %b.0, %233 ], [ %b.0, %260 ], [ %b.0, %287 ], [ %b.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_291_81) & (memory_controller_waitrequest == 1'd0)) & (main_291_292 == 1'd1)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %297, %293 ], [ %b.0, %264 ], [ %b.0, %279 ], [ %b.0, %290 ], [ %b.0, %218 ], [ %b.0, %.backedge ], [ %b.0, %219 ], [ %225, %221 ], [ %b.0, %233 ], [ %b.0, %260 ], [ %b.0, %287 ], [ %b.0, %291 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_293_117) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_b_0_be = main_293_297_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %297, %293 ], [ %b.0, %264 ], [ %b.0, %279 ], [ %b.0, %290 ], [ %b.0, %218 ], [ %b.0, %.backedge ], [ %b.0, %219 ], [ %225, %221 ], [ %b.0, %233 ], [ %b.0, %260 ], [ %b.0, %287 ], [ %b.0, %291 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %297, %293 ], [ %b.0, %264 ], [ %b.0, %279 ], [ %b.0, %290 ], [ %b.0, %218 ], [ %b.0, %.backedge ], [ %b.0, %219 ], [ %225, %221 ], [ %b.0, %233 ], [ %b.0, %260 ], [ %b.0, %287 ], [ %b.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_218_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %297, %293 ], [ %b.0, %264 ], [ %b.0, %279 ], [ %b.0, %290 ], [ %b.0, %218 ], [ %b.0, %.backedge ], [ %b.0, %219 ], [ %225, %221 ], [ %b.0, %233 ], [ %b.0, %260 ], [ %b.0, %287 ], [ %b.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_219_54) & (memory_controller_waitrequest == 1'd0)) & (main_219_220 == 1'd1)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %297, %293 ], [ %b.0, %264 ], [ %b.0, %279 ], [ %b.0, %290 ], [ %b.0, %218 ], [ %b.0, %.backedge ], [ %b.0, %219 ], [ %225, %221 ], [ %b.0, %233 ], [ %b.0, %260 ], [ %b.0, %287 ], [ %b.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_221_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %297, %293 ], [ %b.0, %264 ], [ %b.0, %279 ], [ %b.0, %290 ], [ %b.0, %218 ], [ %b.0, %.backedge ], [ %b.0, %219 ], [ %225, %221 ], [ %b.0, %233 ], [ %b.0, %260 ], [ %b.0, %287 ], [ %b.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_233_58) & (memory_controller_waitrequest == 1'd0)) & (main_233_234 == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %297, %293 ], [ %b.0, %264 ], [ %b.0, %279 ], [ %b.0, %290 ], [ %b.0, %218 ], [ %b.0, %.backedge ], [ %b.0, %219 ], [ %225, %221 ], [ %b.0, %233 ], [ %b.0, %260 ], [ %b.0, %287 ], [ %b.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_260_68) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %297, %293 ], [ %b.0, %264 ], [ %b.0, %279 ], [ %b.0, %290 ], [ %b.0, %218 ], [ %b.0, %.backedge ], [ %b.0, %219 ], [ %225, %221 ], [ %b.0, %233 ], [ %b.0, %260 ], [ %b.0, %287 ], [ %b.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_264_70) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %297, %293 ], [ %b.0, %264 ], [ %b.0, %279 ], [ %b.0, %290 ], [ %b.0, %218 ], [ %b.0, %.backedge ], [ %b.0, %219 ], [ %225, %221 ], [ %b.0, %233 ], [ %b.0, %260 ], [ %b.0, %287 ], [ %b.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_279_76) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %297, %293 ], [ %b.0, %264 ], [ %b.0, %279 ], [ %b.0, %290 ], [ %b.0, %218 ], [ %b.0, %.backedge ], [ %b.0, %219 ], [ %225, %221 ], [ %b.0, %233 ], [ %b.0, %260 ], [ %b.0, %287 ], [ %b.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_287_79) & (memory_controller_waitrequest == 1'd0)) & (main_262_263_reg == 1'd1)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %297, %293 ], [ %b.0, %264 ], [ %b.0, %279 ], [ %b.0, %290 ], [ %b.0, %218 ], [ %b.0, %.backedge ], [ %b.0, %219 ], [ %225, %221 ], [ %b.0, %233 ], [ %b.0, %260 ], [ %b.0, %287 ], [ %b.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_290_80) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %297, %293 ], [ %b.0, %264 ], [ %b.0, %279 ], [ %b.0, %290 ], [ %b.0, %218 ], [ %b.0, %.backedge ], [ %b.0, %219 ], [ %225, %221 ], [ %b.0, %233 ], [ %b.0, %260 ], [ %b.0, %287 ], [ %b.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_291_81) & (memory_controller_waitrequest == 1'd0)) & (main_291_292 == 1'd1)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %297, %293 ], [ %b.0, %264 ], [ %b.0, %279 ], [ %b.0, %290 ], [ %b.0, %218 ], [ %b.0, %.backedge ], [ %b.0, %219 ], [ %225, %221 ], [ %b.0, %233 ], [ %b.0, %260 ], [ %b.0, %287 ], [ %b.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_293_117) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %295, %293 ], [ %a.0, %264 ], [ %a.0, %279 ], [ %a.0, %290 ], [ 0, %218 ], [ %a.0, %.backedge ], [ %a.0, %219 ], [ %223, %221 ], [ %a.0, %233 ], [ %a.0, %260 ], [ %a.0, %287 ], [ %a.0, %291 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %295, %293 ], [ %a.0, %264 ], [ %a.0, %279 ], [ %a.0, %290 ], [ 0, %218 ], [ %a.0, %.backedge ], [ %a.0, %219 ], [ %223, %221 ], [ %a.0, %233 ], [ %a.0, %260 ], [ %a.0, %287 ], [ %a.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_218_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %295, %293 ], [ %a.0, %264 ], [ %a.0, %279 ], [ %a.0, %290 ], [ 0, %218 ], [ %a.0, %.backedge ], [ %a.0, %219 ], [ %223, %221 ], [ %a.0, %233 ], [ %a.0, %260 ], [ %a.0, %287 ], [ %a.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_219_54) & (memory_controller_waitrequest == 1'd0)) & (main_219_220 == 1'd1)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %295, %293 ], [ %a.0, %264 ], [ %a.0, %279 ], [ %a.0, %290 ], [ 0, %218 ], [ %a.0, %.backedge ], [ %a.0, %219 ], [ %223, %221 ], [ %a.0, %233 ], [ %a.0, %260 ], [ %a.0, %287 ], [ %a.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_221_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be = main_221_223_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %295, %293 ], [ %a.0, %264 ], [ %a.0, %279 ], [ %a.0, %290 ], [ 0, %218 ], [ %a.0, %.backedge ], [ %a.0, %219 ], [ %223, %221 ], [ %a.0, %233 ], [ %a.0, %260 ], [ %a.0, %287 ], [ %a.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_233_58) & (memory_controller_waitrequest == 1'd0)) & (main_233_234 == 1'd0)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %295, %293 ], [ %a.0, %264 ], [ %a.0, %279 ], [ %a.0, %290 ], [ 0, %218 ], [ %a.0, %.backedge ], [ %a.0, %219 ], [ %223, %221 ], [ %a.0, %233 ], [ %a.0, %260 ], [ %a.0, %287 ], [ %a.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_260_68) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %295, %293 ], [ %a.0, %264 ], [ %a.0, %279 ], [ %a.0, %290 ], [ 0, %218 ], [ %a.0, %.backedge ], [ %a.0, %219 ], [ %223, %221 ], [ %a.0, %233 ], [ %a.0, %260 ], [ %a.0, %287 ], [ %a.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_264_70) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %295, %293 ], [ %a.0, %264 ], [ %a.0, %279 ], [ %a.0, %290 ], [ 0, %218 ], [ %a.0, %.backedge ], [ %a.0, %219 ], [ %223, %221 ], [ %a.0, %233 ], [ %a.0, %260 ], [ %a.0, %287 ], [ %a.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_279_76) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %295, %293 ], [ %a.0, %264 ], [ %a.0, %279 ], [ %a.0, %290 ], [ 0, %218 ], [ %a.0, %.backedge ], [ %a.0, %219 ], [ %223, %221 ], [ %a.0, %233 ], [ %a.0, %260 ], [ %a.0, %287 ], [ %a.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_287_79) & (memory_controller_waitrequest == 1'd0)) & (main_262_263_reg == 1'd1)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %295, %293 ], [ %a.0, %264 ], [ %a.0, %279 ], [ %a.0, %290 ], [ 0, %218 ], [ %a.0, %.backedge ], [ %a.0, %219 ], [ %223, %221 ], [ %a.0, %233 ], [ %a.0, %260 ], [ %a.0, %287 ], [ %a.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_290_80) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %295, %293 ], [ %a.0, %264 ], [ %a.0, %279 ], [ %a.0, %290 ], [ 0, %218 ], [ %a.0, %.backedge ], [ %a.0, %219 ], [ %223, %221 ], [ %a.0, %233 ], [ %a.0, %260 ], [ %a.0, %287 ], [ %a.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_291_81) & (memory_controller_waitrequest == 1'd0)) & (main_291_292 == 1'd1)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %295, %293 ], [ %a.0, %264 ], [ %a.0, %279 ], [ %a.0, %290 ], [ 0, %218 ], [ %a.0, %.backedge ], [ %a.0, %219 ], [ %223, %221 ], [ %a.0, %233 ], [ %a.0, %260 ], [ %a.0, %287 ], [ %a.0, %291 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_293_117) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_a_0_be = main_293_295_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %295, %293 ], [ %a.0, %264 ], [ %a.0, %279 ], [ %a.0, %290 ], [ 0, %218 ], [ %a.0, %.backedge ], [ %a.0, %219 ], [ %223, %221 ], [ %a.0, %233 ], [ %a.0, %260 ], [ %a.0, %287 ], [ %a.0, %291 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %295, %293 ], [ %a.0, %264 ], [ %a.0, %279 ], [ %a.0, %290 ], [ 0, %218 ], [ %a.0, %.backedge ], [ %a.0, %219 ], [ %223, %221 ], [ %a.0, %233 ], [ %a.0, %260 ], [ %a.0, %287 ], [ %a.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_218_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %295, %293 ], [ %a.0, %264 ], [ %a.0, %279 ], [ %a.0, %290 ], [ 0, %218 ], [ %a.0, %.backedge ], [ %a.0, %219 ], [ %223, %221 ], [ %a.0, %233 ], [ %a.0, %260 ], [ %a.0, %287 ], [ %a.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_219_54) & (memory_controller_waitrequest == 1'd0)) & (main_219_220 == 1'd1)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %295, %293 ], [ %a.0, %264 ], [ %a.0, %279 ], [ %a.0, %290 ], [ 0, %218 ], [ %a.0, %.backedge ], [ %a.0, %219 ], [ %223, %221 ], [ %a.0, %233 ], [ %a.0, %260 ], [ %a.0, %287 ], [ %a.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_221_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %295, %293 ], [ %a.0, %264 ], [ %a.0, %279 ], [ %a.0, %290 ], [ 0, %218 ], [ %a.0, %.backedge ], [ %a.0, %219 ], [ %223, %221 ], [ %a.0, %233 ], [ %a.0, %260 ], [ %a.0, %287 ], [ %a.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_233_58) & (memory_controller_waitrequest == 1'd0)) & (main_233_234 == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %295, %293 ], [ %a.0, %264 ], [ %a.0, %279 ], [ %a.0, %290 ], [ 0, %218 ], [ %a.0, %.backedge ], [ %a.0, %219 ], [ %223, %221 ], [ %a.0, %233 ], [ %a.0, %260 ], [ %a.0, %287 ], [ %a.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_260_68) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %295, %293 ], [ %a.0, %264 ], [ %a.0, %279 ], [ %a.0, %290 ], [ 0, %218 ], [ %a.0, %.backedge ], [ %a.0, %219 ], [ %223, %221 ], [ %a.0, %233 ], [ %a.0, %260 ], [ %a.0, %287 ], [ %a.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_264_70) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %295, %293 ], [ %a.0, %264 ], [ %a.0, %279 ], [ %a.0, %290 ], [ 0, %218 ], [ %a.0, %.backedge ], [ %a.0, %219 ], [ %223, %221 ], [ %a.0, %233 ], [ %a.0, %260 ], [ %a.0, %287 ], [ %a.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_279_76) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %295, %293 ], [ %a.0, %264 ], [ %a.0, %279 ], [ %a.0, %290 ], [ 0, %218 ], [ %a.0, %.backedge ], [ %a.0, %219 ], [ %223, %221 ], [ %a.0, %233 ], [ %a.0, %260 ], [ %a.0, %287 ], [ %a.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_287_79) & (memory_controller_waitrequest == 1'd0)) & (main_262_263_reg == 1'd1)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %295, %293 ], [ %a.0, %264 ], [ %a.0, %279 ], [ %a.0, %290 ], [ 0, %218 ], [ %a.0, %.backedge ], [ %a.0, %219 ], [ %223, %221 ], [ %a.0, %233 ], [ %a.0, %260 ], [ %a.0, %287 ], [ %a.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_290_80) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %295, %293 ], [ %a.0, %264 ], [ %a.0, %279 ], [ %a.0, %290 ], [ 0, %218 ], [ %a.0, %.backedge ], [ %a.0, %219 ], [ %223, %221 ], [ %a.0, %233 ], [ %a.0, %260 ], [ %a.0, %287 ], [ %a.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_291_81) & (memory_controller_waitrequest == 1'd0)) & (main_291_292 == 1'd1)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %295, %293 ], [ %a.0, %264 ], [ %a.0, %279 ], [ %a.0, %290 ], [ 0, %218 ], [ %a.0, %.backedge ], [ %a.0, %219 ], [ %223, %221 ], [ %a.0, %233 ], [ %a.0, %260 ], [ %a.0, %287 ], [ %a.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_293_117) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %293 ], [ %pos_b_X.0, %264 ], [ %269, %279 ], [ %pos_b_X.0, %290 ], [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %219 ], [ %231, %221 ], [ %pos_b_X.0, %233 ], [ %pos_b_X.0, %260 ], [ -1, %287 ], [ %pos_b_X.0, %291 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %293 ], [ %pos_b_X.0, %264 ], [ %269, %279 ], [ %pos_b_X.0, %290 ], [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %219 ], [ %231, %221 ], [ %pos_b_X.0, %233 ], [ %pos_b_X.0, %260 ], [ -1, %287 ], [ %pos_b_X.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_218_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %293 ], [ %pos_b_X.0, %264 ], [ %269, %279 ], [ %pos_b_X.0, %290 ], [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %219 ], [ %231, %221 ], [ %pos_b_X.0, %233 ], [ %pos_b_X.0, %260 ], [ -1, %287 ], [ %pos_b_X.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_219_54) & (memory_controller_waitrequest == 1'd0)) & (main_219_220 == 1'd1)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %293 ], [ %pos_b_X.0, %264 ], [ %269, %279 ], [ %pos_b_X.0, %290 ], [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %219 ], [ %231, %221 ], [ %pos_b_X.0, %233 ], [ %pos_b_X.0, %260 ], [ -1, %287 ], [ %pos_b_X.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_221_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main_221_231;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %293 ], [ %pos_b_X.0, %264 ], [ %269, %279 ], [ %pos_b_X.0, %290 ], [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %219 ], [ %231, %221 ], [ %pos_b_X.0, %233 ], [ %pos_b_X.0, %260 ], [ -1, %287 ], [ %pos_b_X.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_233_58) & (memory_controller_waitrequest == 1'd0)) & (main_233_234 == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %293 ], [ %pos_b_X.0, %264 ], [ %269, %279 ], [ %pos_b_X.0, %290 ], [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %219 ], [ %231, %221 ], [ %pos_b_X.0, %233 ], [ %pos_b_X.0, %260 ], [ -1, %287 ], [ %pos_b_X.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_260_68) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %293 ], [ %pos_b_X.0, %264 ], [ %269, %279 ], [ %pos_b_X.0, %290 ], [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %219 ], [ %231, %221 ], [ %pos_b_X.0, %233 ], [ %pos_b_X.0, %260 ], [ -1, %287 ], [ %pos_b_X.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_264_70) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %293 ], [ %pos_b_X.0, %264 ], [ %269, %279 ], [ %pos_b_X.0, %290 ], [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %219 ], [ %231, %221 ], [ %pos_b_X.0, %233 ], [ %pos_b_X.0, %260 ], [ -1, %287 ], [ %pos_b_X.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_279_76) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main_266_269_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %293 ], [ %pos_b_X.0, %264 ], [ %269, %279 ], [ %pos_b_X.0, %290 ], [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %219 ], [ %231, %221 ], [ %pos_b_X.0, %233 ], [ %pos_b_X.0, %260 ], [ -1, %287 ], [ %pos_b_X.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_287_79) & (memory_controller_waitrequest == 1'd0)) & (main_262_263_reg == 1'd1)))
begin
main__backedge_backedge_pos_b_X_0_be = -32'd1;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %293 ], [ %pos_b_X.0, %264 ], [ %269, %279 ], [ %pos_b_X.0, %290 ], [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %219 ], [ %231, %221 ], [ %pos_b_X.0, %233 ], [ %pos_b_X.0, %260 ], [ -1, %287 ], [ %pos_b_X.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_290_80) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %293 ], [ %pos_b_X.0, %264 ], [ %269, %279 ], [ %pos_b_X.0, %290 ], [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %219 ], [ %231, %221 ], [ %pos_b_X.0, %233 ], [ %pos_b_X.0, %260 ], [ -1, %287 ], [ %pos_b_X.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_291_81) & (memory_controller_waitrequest == 1'd0)) & (main_291_292 == 1'd1)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %293 ], [ %pos_b_X.0, %264 ], [ %269, %279 ], [ %pos_b_X.0, %290 ], [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %219 ], [ %231, %221 ], [ %pos_b_X.0, %233 ], [ %pos_b_X.0, %260 ], [ -1, %287 ], [ %pos_b_X.0, %291 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_293_117) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %293 ], [ %pos_b_X.0, %264 ], [ %269, %279 ], [ %pos_b_X.0, %290 ], [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %219 ], [ %231, %221 ], [ %pos_b_X.0, %233 ], [ %pos_b_X.0, %260 ], [ -1, %287 ], [ %pos_b_X.0, %291 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %293 ], [ %pos_b_X.0, %264 ], [ %269, %279 ], [ %pos_b_X.0, %290 ], [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %219 ], [ %231, %221 ], [ %pos_b_X.0, %233 ], [ %pos_b_X.0, %260 ], [ -1, %287 ], [ %pos_b_X.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_218_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %293 ], [ %pos_b_X.0, %264 ], [ %269, %279 ], [ %pos_b_X.0, %290 ], [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %219 ], [ %231, %221 ], [ %pos_b_X.0, %233 ], [ %pos_b_X.0, %260 ], [ -1, %287 ], [ %pos_b_X.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_219_54) & (memory_controller_waitrequest == 1'd0)) & (main_219_220 == 1'd1)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %293 ], [ %pos_b_X.0, %264 ], [ %269, %279 ], [ %pos_b_X.0, %290 ], [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %219 ], [ %231, %221 ], [ %pos_b_X.0, %233 ], [ %pos_b_X.0, %260 ], [ -1, %287 ], [ %pos_b_X.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_221_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %293 ], [ %pos_b_X.0, %264 ], [ %269, %279 ], [ %pos_b_X.0, %290 ], [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %219 ], [ %231, %221 ], [ %pos_b_X.0, %233 ], [ %pos_b_X.0, %260 ], [ -1, %287 ], [ %pos_b_X.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_233_58) & (memory_controller_waitrequest == 1'd0)) & (main_233_234 == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %293 ], [ %pos_b_X.0, %264 ], [ %269, %279 ], [ %pos_b_X.0, %290 ], [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %219 ], [ %231, %221 ], [ %pos_b_X.0, %233 ], [ %pos_b_X.0, %260 ], [ -1, %287 ], [ %pos_b_X.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_260_68) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %293 ], [ %pos_b_X.0, %264 ], [ %269, %279 ], [ %pos_b_X.0, %290 ], [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %219 ], [ %231, %221 ], [ %pos_b_X.0, %233 ], [ %pos_b_X.0, %260 ], [ -1, %287 ], [ %pos_b_X.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_264_70) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %293 ], [ %pos_b_X.0, %264 ], [ %269, %279 ], [ %pos_b_X.0, %290 ], [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %219 ], [ %231, %221 ], [ %pos_b_X.0, %233 ], [ %pos_b_X.0, %260 ], [ -1, %287 ], [ %pos_b_X.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_279_76) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %293 ], [ %pos_b_X.0, %264 ], [ %269, %279 ], [ %pos_b_X.0, %290 ], [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %219 ], [ %231, %221 ], [ %pos_b_X.0, %233 ], [ %pos_b_X.0, %260 ], [ -1, %287 ], [ %pos_b_X.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_287_79) & (memory_controller_waitrequest == 1'd0)) & (main_262_263_reg == 1'd1)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %293 ], [ %pos_b_X.0, %264 ], [ %269, %279 ], [ %pos_b_X.0, %290 ], [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %219 ], [ %231, %221 ], [ %pos_b_X.0, %233 ], [ %pos_b_X.0, %260 ], [ -1, %287 ], [ %pos_b_X.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_290_80) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %293 ], [ %pos_b_X.0, %264 ], [ %269, %279 ], [ %pos_b_X.0, %290 ], [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %219 ], [ %231, %221 ], [ %pos_b_X.0, %233 ], [ %pos_b_X.0, %260 ], [ -1, %287 ], [ %pos_b_X.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_291_81) & (memory_controller_waitrequest == 1'd0)) & (main_291_292 == 1'd1)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %293 ], [ %pos_b_X.0, %264 ], [ %269, %279 ], [ %pos_b_X.0, %290 ], [ %pos_b_X.0, %218 ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %219 ], [ %231, %221 ], [ %pos_b_X.0, %233 ], [ %pos_b_X.0, %260 ], [ -1, %287 ], [ %pos_b_X.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_293_117) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %293 ], [ %pos_a_Y.0, %264 ], [ %pos_a_Y.0, %279 ], [ %pos_a_Y.0, %290 ], [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %219 ], [ %229, %221 ], [ %pos_a_Y.0, %233 ], [ %pos_a_Y.1, %260 ], [ %pos_a_Y.0, %287 ], [ %pos_a_Y.0, %291 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %293 ], [ %pos_a_Y.0, %264 ], [ %pos_a_Y.0, %279 ], [ %pos_a_Y.0, %290 ], [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %219 ], [ %229, %221 ], [ %pos_a_Y.0, %233 ], [ %pos_a_Y.1, %260 ], [ %pos_a_Y.0, %287 ], [ %pos_a_Y.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_218_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %293 ], [ %pos_a_Y.0, %264 ], [ %pos_a_Y.0, %279 ], [ %pos_a_Y.0, %290 ], [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %219 ], [ %229, %221 ], [ %pos_a_Y.0, %233 ], [ %pos_a_Y.1, %260 ], [ %pos_a_Y.0, %287 ], [ %pos_a_Y.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_219_54) & (memory_controller_waitrequest == 1'd0)) & (main_219_220 == 1'd1)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %293 ], [ %pos_a_Y.0, %264 ], [ %pos_a_Y.0, %279 ], [ %pos_a_Y.0, %290 ], [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %219 ], [ %229, %221 ], [ %pos_a_Y.0, %233 ], [ %pos_a_Y.1, %260 ], [ %pos_a_Y.0, %287 ], [ %pos_a_Y.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_221_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main_221_229;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %293 ], [ %pos_a_Y.0, %264 ], [ %pos_a_Y.0, %279 ], [ %pos_a_Y.0, %290 ], [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %219 ], [ %229, %221 ], [ %pos_a_Y.0, %233 ], [ %pos_a_Y.1, %260 ], [ %pos_a_Y.0, %287 ], [ %pos_a_Y.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_233_58) & (memory_controller_waitrequest == 1'd0)) & (main_233_234 == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %293 ], [ %pos_a_Y.0, %264 ], [ %pos_a_Y.0, %279 ], [ %pos_a_Y.0, %290 ], [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %219 ], [ %229, %221 ], [ %pos_a_Y.0, %233 ], [ %pos_a_Y.1, %260 ], [ %pos_a_Y.0, %287 ], [ %pos_a_Y.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_260_68) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main_260_pos_a_Y_1_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %293 ], [ %pos_a_Y.0, %264 ], [ %pos_a_Y.0, %279 ], [ %pos_a_Y.0, %290 ], [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %219 ], [ %229, %221 ], [ %pos_a_Y.0, %233 ], [ %pos_a_Y.1, %260 ], [ %pos_a_Y.0, %287 ], [ %pos_a_Y.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_264_70) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %293 ], [ %pos_a_Y.0, %264 ], [ %pos_a_Y.0, %279 ], [ %pos_a_Y.0, %290 ], [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %219 ], [ %229, %221 ], [ %pos_a_Y.0, %233 ], [ %pos_a_Y.1, %260 ], [ %pos_a_Y.0, %287 ], [ %pos_a_Y.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_279_76) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %293 ], [ %pos_a_Y.0, %264 ], [ %pos_a_Y.0, %279 ], [ %pos_a_Y.0, %290 ], [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %219 ], [ %229, %221 ], [ %pos_a_Y.0, %233 ], [ %pos_a_Y.1, %260 ], [ %pos_a_Y.0, %287 ], [ %pos_a_Y.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_287_79) & (memory_controller_waitrequest == 1'd0)) & (main_262_263_reg == 1'd1)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %293 ], [ %pos_a_Y.0, %264 ], [ %pos_a_Y.0, %279 ], [ %pos_a_Y.0, %290 ], [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %219 ], [ %229, %221 ], [ %pos_a_Y.0, %233 ], [ %pos_a_Y.1, %260 ], [ %pos_a_Y.0, %287 ], [ %pos_a_Y.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_290_80) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %293 ], [ %pos_a_Y.0, %264 ], [ %pos_a_Y.0, %279 ], [ %pos_a_Y.0, %290 ], [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %219 ], [ %229, %221 ], [ %pos_a_Y.0, %233 ], [ %pos_a_Y.1, %260 ], [ %pos_a_Y.0, %287 ], [ %pos_a_Y.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_291_81) & (memory_controller_waitrequest == 1'd0)) & (main_291_292 == 1'd1)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %293 ], [ %pos_a_Y.0, %264 ], [ %pos_a_Y.0, %279 ], [ %pos_a_Y.0, %290 ], [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %219 ], [ %229, %221 ], [ %pos_a_Y.0, %233 ], [ %pos_a_Y.1, %260 ], [ %pos_a_Y.0, %287 ], [ %pos_a_Y.0, %291 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_293_117) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %293 ], [ %pos_a_Y.0, %264 ], [ %pos_a_Y.0, %279 ], [ %pos_a_Y.0, %290 ], [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %219 ], [ %229, %221 ], [ %pos_a_Y.0, %233 ], [ %pos_a_Y.1, %260 ], [ %pos_a_Y.0, %287 ], [ %pos_a_Y.0, %291 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %293 ], [ %pos_a_Y.0, %264 ], [ %pos_a_Y.0, %279 ], [ %pos_a_Y.0, %290 ], [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %219 ], [ %229, %221 ], [ %pos_a_Y.0, %233 ], [ %pos_a_Y.1, %260 ], [ %pos_a_Y.0, %287 ], [ %pos_a_Y.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_218_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %293 ], [ %pos_a_Y.0, %264 ], [ %pos_a_Y.0, %279 ], [ %pos_a_Y.0, %290 ], [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %219 ], [ %229, %221 ], [ %pos_a_Y.0, %233 ], [ %pos_a_Y.1, %260 ], [ %pos_a_Y.0, %287 ], [ %pos_a_Y.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_219_54) & (memory_controller_waitrequest == 1'd0)) & (main_219_220 == 1'd1)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %293 ], [ %pos_a_Y.0, %264 ], [ %pos_a_Y.0, %279 ], [ %pos_a_Y.0, %290 ], [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %219 ], [ %229, %221 ], [ %pos_a_Y.0, %233 ], [ %pos_a_Y.1, %260 ], [ %pos_a_Y.0, %287 ], [ %pos_a_Y.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_221_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %293 ], [ %pos_a_Y.0, %264 ], [ %pos_a_Y.0, %279 ], [ %pos_a_Y.0, %290 ], [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %219 ], [ %229, %221 ], [ %pos_a_Y.0, %233 ], [ %pos_a_Y.1, %260 ], [ %pos_a_Y.0, %287 ], [ %pos_a_Y.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_233_58) & (memory_controller_waitrequest == 1'd0)) & (main_233_234 == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %293 ], [ %pos_a_Y.0, %264 ], [ %pos_a_Y.0, %279 ], [ %pos_a_Y.0, %290 ], [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %219 ], [ %229, %221 ], [ %pos_a_Y.0, %233 ], [ %pos_a_Y.1, %260 ], [ %pos_a_Y.0, %287 ], [ %pos_a_Y.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_260_68) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %293 ], [ %pos_a_Y.0, %264 ], [ %pos_a_Y.0, %279 ], [ %pos_a_Y.0, %290 ], [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %219 ], [ %229, %221 ], [ %pos_a_Y.0, %233 ], [ %pos_a_Y.1, %260 ], [ %pos_a_Y.0, %287 ], [ %pos_a_Y.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_264_70) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %293 ], [ %pos_a_Y.0, %264 ], [ %pos_a_Y.0, %279 ], [ %pos_a_Y.0, %290 ], [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %219 ], [ %229, %221 ], [ %pos_a_Y.0, %233 ], [ %pos_a_Y.1, %260 ], [ %pos_a_Y.0, %287 ], [ %pos_a_Y.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_279_76) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %293 ], [ %pos_a_Y.0, %264 ], [ %pos_a_Y.0, %279 ], [ %pos_a_Y.0, %290 ], [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %219 ], [ %229, %221 ], [ %pos_a_Y.0, %233 ], [ %pos_a_Y.1, %260 ], [ %pos_a_Y.0, %287 ], [ %pos_a_Y.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_287_79) & (memory_controller_waitrequest == 1'd0)) & (main_262_263_reg == 1'd1)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %293 ], [ %pos_a_Y.0, %264 ], [ %pos_a_Y.0, %279 ], [ %pos_a_Y.0, %290 ], [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %219 ], [ %229, %221 ], [ %pos_a_Y.0, %233 ], [ %pos_a_Y.1, %260 ], [ %pos_a_Y.0, %287 ], [ %pos_a_Y.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_290_80) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %293 ], [ %pos_a_Y.0, %264 ], [ %pos_a_Y.0, %279 ], [ %pos_a_Y.0, %290 ], [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %219 ], [ %229, %221 ], [ %pos_a_Y.0, %233 ], [ %pos_a_Y.1, %260 ], [ %pos_a_Y.0, %287 ], [ %pos_a_Y.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_291_81) & (memory_controller_waitrequest == 1'd0)) & (main_291_292 == 1'd1)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %293 ], [ %pos_a_Y.0, %264 ], [ %pos_a_Y.0, %279 ], [ %pos_a_Y.0, %290 ], [ %pos_a_Y.0, %218 ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %219 ], [ %229, %221 ], [ %pos_a_Y.0, %233 ], [ %pos_a_Y.1, %260 ], [ %pos_a_Y.0, %287 ], [ %pos_a_Y.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_293_117) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %293 ], [ %pos_a_X.0, %264 ], [ %pos_a_X.0, %279 ], [ %pos_a_X.0, %290 ], [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %219 ], [ %227, %221 ], [ %pos_a_X.0, %233 ], [ %pos_a_X.1, %260 ], [ %pos_a_X.0, %287 ], [ %pos_a_X.0, %291 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %293 ], [ %pos_a_X.0, %264 ], [ %pos_a_X.0, %279 ], [ %pos_a_X.0, %290 ], [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %219 ], [ %227, %221 ], [ %pos_a_X.0, %233 ], [ %pos_a_X.1, %260 ], [ %pos_a_X.0, %287 ], [ %pos_a_X.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_218_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %293 ], [ %pos_a_X.0, %264 ], [ %pos_a_X.0, %279 ], [ %pos_a_X.0, %290 ], [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %219 ], [ %227, %221 ], [ %pos_a_X.0, %233 ], [ %pos_a_X.1, %260 ], [ %pos_a_X.0, %287 ], [ %pos_a_X.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_219_54) & (memory_controller_waitrequest == 1'd0)) & (main_219_220 == 1'd1)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %293 ], [ %pos_a_X.0, %264 ], [ %pos_a_X.0, %279 ], [ %pos_a_X.0, %290 ], [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %219 ], [ %227, %221 ], [ %pos_a_X.0, %233 ], [ %pos_a_X.1, %260 ], [ %pos_a_X.0, %287 ], [ %pos_a_X.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_221_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main_221_227;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %293 ], [ %pos_a_X.0, %264 ], [ %pos_a_X.0, %279 ], [ %pos_a_X.0, %290 ], [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %219 ], [ %227, %221 ], [ %pos_a_X.0, %233 ], [ %pos_a_X.1, %260 ], [ %pos_a_X.0, %287 ], [ %pos_a_X.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_233_58) & (memory_controller_waitrequest == 1'd0)) & (main_233_234 == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %293 ], [ %pos_a_X.0, %264 ], [ %pos_a_X.0, %279 ], [ %pos_a_X.0, %290 ], [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %219 ], [ %227, %221 ], [ %pos_a_X.0, %233 ], [ %pos_a_X.1, %260 ], [ %pos_a_X.0, %287 ], [ %pos_a_X.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_260_68) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main_260_pos_a_X_1_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %293 ], [ %pos_a_X.0, %264 ], [ %pos_a_X.0, %279 ], [ %pos_a_X.0, %290 ], [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %219 ], [ %227, %221 ], [ %pos_a_X.0, %233 ], [ %pos_a_X.1, %260 ], [ %pos_a_X.0, %287 ], [ %pos_a_X.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_264_70) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %293 ], [ %pos_a_X.0, %264 ], [ %pos_a_X.0, %279 ], [ %pos_a_X.0, %290 ], [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %219 ], [ %227, %221 ], [ %pos_a_X.0, %233 ], [ %pos_a_X.1, %260 ], [ %pos_a_X.0, %287 ], [ %pos_a_X.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_279_76) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %293 ], [ %pos_a_X.0, %264 ], [ %pos_a_X.0, %279 ], [ %pos_a_X.0, %290 ], [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %219 ], [ %227, %221 ], [ %pos_a_X.0, %233 ], [ %pos_a_X.1, %260 ], [ %pos_a_X.0, %287 ], [ %pos_a_X.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_287_79) & (memory_controller_waitrequest == 1'd0)) & (main_262_263_reg == 1'd1)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %293 ], [ %pos_a_X.0, %264 ], [ %pos_a_X.0, %279 ], [ %pos_a_X.0, %290 ], [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %219 ], [ %227, %221 ], [ %pos_a_X.0, %233 ], [ %pos_a_X.1, %260 ], [ %pos_a_X.0, %287 ], [ %pos_a_X.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_290_80) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %293 ], [ %pos_a_X.0, %264 ], [ %pos_a_X.0, %279 ], [ %pos_a_X.0, %290 ], [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %219 ], [ %227, %221 ], [ %pos_a_X.0, %233 ], [ %pos_a_X.1, %260 ], [ %pos_a_X.0, %287 ], [ %pos_a_X.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_291_81) & (memory_controller_waitrequest == 1'd0)) & (main_291_292 == 1'd1)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %293 ], [ %pos_a_X.0, %264 ], [ %pos_a_X.0, %279 ], [ %pos_a_X.0, %290 ], [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %219 ], [ %227, %221 ], [ %pos_a_X.0, %233 ], [ %pos_a_X.1, %260 ], [ %pos_a_X.0, %287 ], [ %pos_a_X.0, %291 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_293_117) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %293 ], [ %pos_a_X.0, %264 ], [ %pos_a_X.0, %279 ], [ %pos_a_X.0, %290 ], [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %219 ], [ %227, %221 ], [ %pos_a_X.0, %233 ], [ %pos_a_X.1, %260 ], [ %pos_a_X.0, %287 ], [ %pos_a_X.0, %291 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %293 ], [ %pos_a_X.0, %264 ], [ %pos_a_X.0, %279 ], [ %pos_a_X.0, %290 ], [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %219 ], [ %227, %221 ], [ %pos_a_X.0, %233 ], [ %pos_a_X.1, %260 ], [ %pos_a_X.0, %287 ], [ %pos_a_X.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_218_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %293 ], [ %pos_a_X.0, %264 ], [ %pos_a_X.0, %279 ], [ %pos_a_X.0, %290 ], [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %219 ], [ %227, %221 ], [ %pos_a_X.0, %233 ], [ %pos_a_X.1, %260 ], [ %pos_a_X.0, %287 ], [ %pos_a_X.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_219_54) & (memory_controller_waitrequest == 1'd0)) & (main_219_220 == 1'd1)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %293 ], [ %pos_a_X.0, %264 ], [ %pos_a_X.0, %279 ], [ %pos_a_X.0, %290 ], [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %219 ], [ %227, %221 ], [ %pos_a_X.0, %233 ], [ %pos_a_X.1, %260 ], [ %pos_a_X.0, %287 ], [ %pos_a_X.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_221_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %293 ], [ %pos_a_X.0, %264 ], [ %pos_a_X.0, %279 ], [ %pos_a_X.0, %290 ], [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %219 ], [ %227, %221 ], [ %pos_a_X.0, %233 ], [ %pos_a_X.1, %260 ], [ %pos_a_X.0, %287 ], [ %pos_a_X.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_233_58) & (memory_controller_waitrequest == 1'd0)) & (main_233_234 == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %293 ], [ %pos_a_X.0, %264 ], [ %pos_a_X.0, %279 ], [ %pos_a_X.0, %290 ], [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %219 ], [ %227, %221 ], [ %pos_a_X.0, %233 ], [ %pos_a_X.1, %260 ], [ %pos_a_X.0, %287 ], [ %pos_a_X.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_260_68) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %293 ], [ %pos_a_X.0, %264 ], [ %pos_a_X.0, %279 ], [ %pos_a_X.0, %290 ], [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %219 ], [ %227, %221 ], [ %pos_a_X.0, %233 ], [ %pos_a_X.1, %260 ], [ %pos_a_X.0, %287 ], [ %pos_a_X.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_264_70) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %293 ], [ %pos_a_X.0, %264 ], [ %pos_a_X.0, %279 ], [ %pos_a_X.0, %290 ], [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %219 ], [ %227, %221 ], [ %pos_a_X.0, %233 ], [ %pos_a_X.1, %260 ], [ %pos_a_X.0, %287 ], [ %pos_a_X.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_279_76) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %293 ], [ %pos_a_X.0, %264 ], [ %pos_a_X.0, %279 ], [ %pos_a_X.0, %290 ], [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %219 ], [ %227, %221 ], [ %pos_a_X.0, %233 ], [ %pos_a_X.1, %260 ], [ %pos_a_X.0, %287 ], [ %pos_a_X.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_287_79) & (memory_controller_waitrequest == 1'd0)) & (main_262_263_reg == 1'd1)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %293 ], [ %pos_a_X.0, %264 ], [ %pos_a_X.0, %279 ], [ %pos_a_X.0, %290 ], [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %219 ], [ %227, %221 ], [ %pos_a_X.0, %233 ], [ %pos_a_X.1, %260 ], [ %pos_a_X.0, %287 ], [ %pos_a_X.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_290_80) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %293 ], [ %pos_a_X.0, %264 ], [ %pos_a_X.0, %279 ], [ %pos_a_X.0, %290 ], [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %219 ], [ %227, %221 ], [ %pos_a_X.0, %233 ], [ %pos_a_X.1, %260 ], [ %pos_a_X.0, %287 ], [ %pos_a_X.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_291_81) & (memory_controller_waitrequest == 1'd0)) & (main_291_292 == 1'd1)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %293 ], [ %pos_a_X.0, %264 ], [ %pos_a_X.0, %279 ], [ %pos_a_X.0, %290 ], [ %pos_a_X.0, %218 ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %219 ], [ %227, %221 ], [ %pos_a_X.0, %233 ], [ %pos_a_X.1, %260 ], [ %pos_a_X.0, %287 ], [ %pos_a_X.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_293_117) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %293 ], [ 0, %264 ], [ 0, %279 ], [ 0, %290 ], [ 0, %218 ], [ %j.0, %.backedge ], [ %j.0, %219 ], [ %j.0, %221 ], [ 0, %233 ], [ %.23, %260 ], [ %273, %287 ], [ %j.0, %291 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_j_0_be = main__backedge_j_0_reg;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %293 ], [ 0, %264 ], [ 0, %279 ], [ 0, %290 ], [ 0, %218 ], [ %j.0, %.backedge ], [ %j.0, %219 ], [ %j.0, %221 ], [ 0, %233 ], [ %.23, %260 ], [ %273, %287 ], [ %j.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_218_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %293 ], [ 0, %264 ], [ 0, %279 ], [ 0, %290 ], [ 0, %218 ], [ %j.0, %.backedge ], [ %j.0, %219 ], [ %j.0, %221 ], [ 0, %233 ], [ %.23, %260 ], [ %273, %287 ], [ %j.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_219_54) & (memory_controller_waitrequest == 1'd0)) & (main_219_220 == 1'd1)))
begin
main__backedge_backedge_j_0_be = main__backedge_j_0_reg;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %293 ], [ 0, %264 ], [ 0, %279 ], [ 0, %290 ], [ 0, %218 ], [ %j.0, %.backedge ], [ %j.0, %219 ], [ %j.0, %221 ], [ 0, %233 ], [ %.23, %260 ], [ %273, %287 ], [ %j.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_221_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be = main__backedge_j_0_reg;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %293 ], [ 0, %264 ], [ 0, %279 ], [ 0, %290 ], [ 0, %218 ], [ %j.0, %.backedge ], [ %j.0, %219 ], [ %j.0, %221 ], [ 0, %233 ], [ %.23, %260 ], [ %273, %287 ], [ %j.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_233_58) & (memory_controller_waitrequest == 1'd0)) & (main_233_234 == 1'd0)))
begin
main__backedge_backedge_j_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %293 ], [ 0, %264 ], [ 0, %279 ], [ 0, %290 ], [ 0, %218 ], [ %j.0, %.backedge ], [ %j.0, %219 ], [ %j.0, %221 ], [ 0, %233 ], [ %.23, %260 ], [ %273, %287 ], [ %j.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_260_68) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be = main_260__23;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %293 ], [ 0, %264 ], [ 0, %279 ], [ 0, %290 ], [ 0, %218 ], [ %j.0, %.backedge ], [ %j.0, %219 ], [ %j.0, %221 ], [ 0, %233 ], [ %.23, %260 ], [ %273, %287 ], [ %j.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_264_70) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %293 ], [ 0, %264 ], [ 0, %279 ], [ 0, %290 ], [ 0, %218 ], [ %j.0, %.backedge ], [ %j.0, %219 ], [ %j.0, %221 ], [ 0, %233 ], [ %.23, %260 ], [ %273, %287 ], [ %j.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_279_76) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %293 ], [ 0, %264 ], [ 0, %279 ], [ 0, %290 ], [ 0, %218 ], [ %j.0, %.backedge ], [ %j.0, %219 ], [ %j.0, %221 ], [ 0, %233 ], [ %.23, %260 ], [ %273, %287 ], [ %j.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_287_79) & (memory_controller_waitrequest == 1'd0)) & (main_262_263_reg == 1'd1)))
begin
main__backedge_backedge_j_0_be = main_266_273_reg;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %293 ], [ 0, %264 ], [ 0, %279 ], [ 0, %290 ], [ 0, %218 ], [ %j.0, %.backedge ], [ %j.0, %219 ], [ %j.0, %221 ], [ 0, %233 ], [ %.23, %260 ], [ %273, %287 ], [ %j.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_290_80) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %293 ], [ 0, %264 ], [ 0, %279 ], [ 0, %290 ], [ 0, %218 ], [ %j.0, %.backedge ], [ %j.0, %219 ], [ %j.0, %221 ], [ 0, %233 ], [ %.23, %260 ], [ %273, %287 ], [ %j.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_291_81) & (memory_controller_waitrequest == 1'd0)) & (main_291_292 == 1'd1)))
begin
main__backedge_backedge_j_0_be = main__backedge_j_0_reg;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %293 ], [ 0, %264 ], [ 0, %279 ], [ 0, %290 ], [ 0, %218 ], [ %j.0, %.backedge ], [ %j.0, %219 ], [ %j.0, %221 ], [ 0, %233 ], [ %.23, %260 ], [ %273, %287 ], [ %j.0, %291 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_293_117) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_j_0_be = main__backedge_j_0_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %293 ], [ 0, %264 ], [ 0, %279 ], [ 0, %290 ], [ 0, %218 ], [ %j.0, %.backedge ], [ %j.0, %219 ], [ %j.0, %221 ], [ 0, %233 ], [ %.23, %260 ], [ %273, %287 ], [ %j.0, %291 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %293 ], [ 0, %264 ], [ 0, %279 ], [ 0, %290 ], [ 0, %218 ], [ %j.0, %.backedge ], [ %j.0, %219 ], [ %j.0, %221 ], [ 0, %233 ], [ %.23, %260 ], [ %273, %287 ], [ %j.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_218_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %293 ], [ 0, %264 ], [ 0, %279 ], [ 0, %290 ], [ 0, %218 ], [ %j.0, %.backedge ], [ %j.0, %219 ], [ %j.0, %221 ], [ 0, %233 ], [ %.23, %260 ], [ %273, %287 ], [ %j.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_219_54) & (memory_controller_waitrequest == 1'd0)) & (main_219_220 == 1'd1)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %293 ], [ 0, %264 ], [ 0, %279 ], [ 0, %290 ], [ 0, %218 ], [ %j.0, %.backedge ], [ %j.0, %219 ], [ %j.0, %221 ], [ 0, %233 ], [ %.23, %260 ], [ %273, %287 ], [ %j.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_221_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %293 ], [ 0, %264 ], [ 0, %279 ], [ 0, %290 ], [ 0, %218 ], [ %j.0, %.backedge ], [ %j.0, %219 ], [ %j.0, %221 ], [ 0, %233 ], [ %.23, %260 ], [ %273, %287 ], [ %j.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_233_58) & (memory_controller_waitrequest == 1'd0)) & (main_233_234 == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %293 ], [ 0, %264 ], [ 0, %279 ], [ 0, %290 ], [ 0, %218 ], [ %j.0, %.backedge ], [ %j.0, %219 ], [ %j.0, %221 ], [ 0, %233 ], [ %.23, %260 ], [ %273, %287 ], [ %j.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_260_68) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %293 ], [ 0, %264 ], [ 0, %279 ], [ 0, %290 ], [ 0, %218 ], [ %j.0, %.backedge ], [ %j.0, %219 ], [ %j.0, %221 ], [ 0, %233 ], [ %.23, %260 ], [ %273, %287 ], [ %j.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_264_70) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %293 ], [ 0, %264 ], [ 0, %279 ], [ 0, %290 ], [ 0, %218 ], [ %j.0, %.backedge ], [ %j.0, %219 ], [ %j.0, %221 ], [ 0, %233 ], [ %.23, %260 ], [ %273, %287 ], [ %j.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_279_76) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %293 ], [ 0, %264 ], [ 0, %279 ], [ 0, %290 ], [ 0, %218 ], [ %j.0, %.backedge ], [ %j.0, %219 ], [ %j.0, %221 ], [ 0, %233 ], [ %.23, %260 ], [ %273, %287 ], [ %j.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_287_79) & (memory_controller_waitrequest == 1'd0)) & (main_262_263_reg == 1'd1)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %293 ], [ 0, %264 ], [ 0, %279 ], [ 0, %290 ], [ 0, %218 ], [ %j.0, %.backedge ], [ %j.0, %219 ], [ %j.0, %221 ], [ 0, %233 ], [ %.23, %260 ], [ %273, %287 ], [ %j.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_290_80) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %293 ], [ 0, %264 ], [ 0, %279 ], [ 0, %290 ], [ 0, %218 ], [ %j.0, %.backedge ], [ %j.0, %219 ], [ %j.0, %221 ], [ 0, %233 ], [ %.23, %260 ], [ %273, %287 ], [ %j.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_291_81) & (memory_controller_waitrequest == 1'd0)) & (main_291_292 == 1'd1)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %293 ], [ 0, %264 ], [ 0, %279 ], [ 0, %290 ], [ 0, %218 ], [ %j.0, %.backedge ], [ %j.0, %219 ], [ %j.0, %221 ], [ 0, %233 ], [ %.23, %260 ], [ %273, %287 ], [ %j.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_293_117) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %324, %293 ], [ %265, %264 ], [ %282, %279 ], [ %i.0., %290 ], [ 0, %218 ], [ %i.0, %.backedge ], [ 0, %219 ], [ %i.0, %221 ], [ %i.0, %233 ], [ %i.0, %260 ], [ %i.0., %287 ], [ 76, %291 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_i_0_be = main__backedge_i_0_reg;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %324, %293 ], [ %265, %264 ], [ %282, %279 ], [ %i.0., %290 ], [ 0, %218 ], [ %i.0, %.backedge ], [ 0, %219 ], [ %i.0, %221 ], [ %i.0, %233 ], [ %i.0, %260 ], [ %i.0., %287 ], [ 76, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_218_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %324, %293 ], [ %265, %264 ], [ %282, %279 ], [ %i.0., %290 ], [ 0, %218 ], [ %i.0, %.backedge ], [ 0, %219 ], [ %i.0, %221 ], [ %i.0, %233 ], [ %i.0, %260 ], [ %i.0., %287 ], [ 76, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_219_54) & (memory_controller_waitrequest == 1'd0)) & (main_219_220 == 1'd1)))
begin
main__backedge_backedge_i_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %324, %293 ], [ %265, %264 ], [ %282, %279 ], [ %i.0., %290 ], [ 0, %218 ], [ %i.0, %.backedge ], [ 0, %219 ], [ %i.0, %221 ], [ %i.0, %233 ], [ %i.0, %260 ], [ %i.0., %287 ], [ 76, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_221_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be = main__backedge_i_0_reg;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %324, %293 ], [ %265, %264 ], [ %282, %279 ], [ %i.0., %290 ], [ 0, %218 ], [ %i.0, %.backedge ], [ 0, %219 ], [ %i.0, %221 ], [ %i.0, %233 ], [ %i.0, %260 ], [ %i.0., %287 ], [ 76, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_233_58) & (memory_controller_waitrequest == 1'd0)) & (main_233_234 == 1'd0)))
begin
main__backedge_backedge_i_0_be = main__backedge_i_0_reg;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %324, %293 ], [ %265, %264 ], [ %282, %279 ], [ %i.0., %290 ], [ 0, %218 ], [ %i.0, %.backedge ], [ 0, %219 ], [ %i.0, %221 ], [ %i.0, %233 ], [ %i.0, %260 ], [ %i.0., %287 ], [ 76, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_260_68) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be = main__backedge_i_0_reg;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %324, %293 ], [ %265, %264 ], [ %282, %279 ], [ %i.0., %290 ], [ 0, %218 ], [ %i.0, %.backedge ], [ 0, %219 ], [ %i.0, %221 ], [ %i.0, %233 ], [ %i.0, %260 ], [ %i.0., %287 ], [ 76, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_264_70) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be = main_264_265;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %324, %293 ], [ %265, %264 ], [ %282, %279 ], [ %i.0., %290 ], [ 0, %218 ], [ %i.0, %.backedge ], [ 0, %219 ], [ %i.0, %221 ], [ %i.0, %233 ], [ %i.0, %260 ], [ %i.0., %287 ], [ 76, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_279_76) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be = main_279_282_reg;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %324, %293 ], [ %265, %264 ], [ %282, %279 ], [ %i.0., %290 ], [ 0, %218 ], [ %i.0, %.backedge ], [ 0, %219 ], [ %i.0, %221 ], [ %i.0, %233 ], [ %i.0, %260 ], [ %i.0., %287 ], [ 76, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_287_79) & (memory_controller_waitrequest == 1'd0)) & (main_262_263_reg == 1'd1)))
begin
main__backedge_backedge_i_0_be = main_287_i_0_;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %324, %293 ], [ %265, %264 ], [ %282, %279 ], [ %i.0., %290 ], [ 0, %218 ], [ %i.0, %.backedge ], [ 0, %219 ], [ %i.0, %221 ], [ %i.0, %233 ], [ %i.0, %260 ], [ %i.0., %287 ], [ 76, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_290_80) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be = main_287_i_0__reg;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %324, %293 ], [ %265, %264 ], [ %282, %279 ], [ %i.0., %290 ], [ 0, %218 ], [ %i.0, %.backedge ], [ 0, %219 ], [ %i.0, %221 ], [ %i.0, %233 ], [ %i.0, %260 ], [ %i.0., %287 ], [ 76, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_291_81) & (memory_controller_waitrequest == 1'd0)) & (main_291_292 == 1'd1)))
begin
main__backedge_backedge_i_0_be = 32'd76;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %324, %293 ], [ %265, %264 ], [ %282, %279 ], [ %i.0., %290 ], [ 0, %218 ], [ %i.0, %.backedge ], [ 0, %219 ], [ %i.0, %221 ], [ %i.0, %233 ], [ %i.0, %260 ], [ %i.0., %287 ], [ 76, %291 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_293_117) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_i_0_be = main_293_324_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %324, %293 ], [ %265, %264 ], [ %282, %279 ], [ %i.0., %290 ], [ 0, %218 ], [ %i.0, %.backedge ], [ 0, %219 ], [ %i.0, %221 ], [ %i.0, %233 ], [ %i.0, %260 ], [ %i.0., %287 ], [ 76, %291 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %324, %293 ], [ %265, %264 ], [ %282, %279 ], [ %i.0., %290 ], [ 0, %218 ], [ %i.0, %.backedge ], [ 0, %219 ], [ %i.0, %221 ], [ %i.0, %233 ], [ %i.0, %260 ], [ %i.0., %287 ], [ 76, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_218_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %324, %293 ], [ %265, %264 ], [ %282, %279 ], [ %i.0., %290 ], [ 0, %218 ], [ %i.0, %.backedge ], [ 0, %219 ], [ %i.0, %221 ], [ %i.0, %233 ], [ %i.0, %260 ], [ %i.0., %287 ], [ 76, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_219_54) & (memory_controller_waitrequest == 1'd0)) & (main_219_220 == 1'd1)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %324, %293 ], [ %265, %264 ], [ %282, %279 ], [ %i.0., %290 ], [ 0, %218 ], [ %i.0, %.backedge ], [ 0, %219 ], [ %i.0, %221 ], [ %i.0, %233 ], [ %i.0, %260 ], [ %i.0., %287 ], [ 76, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_221_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %324, %293 ], [ %265, %264 ], [ %282, %279 ], [ %i.0., %290 ], [ 0, %218 ], [ %i.0, %.backedge ], [ 0, %219 ], [ %i.0, %221 ], [ %i.0, %233 ], [ %i.0, %260 ], [ %i.0., %287 ], [ 76, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_233_58) & (memory_controller_waitrequest == 1'd0)) & (main_233_234 == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %324, %293 ], [ %265, %264 ], [ %282, %279 ], [ %i.0., %290 ], [ 0, %218 ], [ %i.0, %.backedge ], [ 0, %219 ], [ %i.0, %221 ], [ %i.0, %233 ], [ %i.0, %260 ], [ %i.0., %287 ], [ 76, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_260_68) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %324, %293 ], [ %265, %264 ], [ %282, %279 ], [ %i.0., %290 ], [ 0, %218 ], [ %i.0, %.backedge ], [ 0, %219 ], [ %i.0, %221 ], [ %i.0, %233 ], [ %i.0, %260 ], [ %i.0., %287 ], [ 76, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_264_70) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %324, %293 ], [ %265, %264 ], [ %282, %279 ], [ %i.0., %290 ], [ 0, %218 ], [ %i.0, %.backedge ], [ 0, %219 ], [ %i.0, %221 ], [ %i.0, %233 ], [ %i.0, %260 ], [ %i.0., %287 ], [ 76, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_279_76) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %324, %293 ], [ %265, %264 ], [ %282, %279 ], [ %i.0., %290 ], [ 0, %218 ], [ %i.0, %.backedge ], [ 0, %219 ], [ %i.0, %221 ], [ %i.0, %233 ], [ %i.0, %260 ], [ %i.0., %287 ], [ 76, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_287_79) & (memory_controller_waitrequest == 1'd0)) & (main_262_263_reg == 1'd1)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %324, %293 ], [ %265, %264 ], [ %282, %279 ], [ %i.0., %290 ], [ 0, %218 ], [ %i.0, %.backedge ], [ 0, %219 ], [ %i.0, %221 ], [ %i.0, %233 ], [ %i.0, %260 ], [ %i.0., %287 ], [ 76, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_290_80) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %324, %293 ], [ %265, %264 ], [ %282, %279 ], [ %i.0., %290 ], [ 0, %218 ], [ %i.0, %.backedge ], [ 0, %219 ], [ %i.0, %221 ], [ %i.0, %233 ], [ %i.0, %260 ], [ %i.0., %287 ], [ 76, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_291_81) & (memory_controller_waitrequest == 1'd0)) & (main_291_292 == 1'd1)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %324, %293 ], [ %265, %264 ], [ %282, %279 ], [ %i.0., %290 ], [ 0, %218 ], [ %i.0, %.backedge ], [ 0, %219 ], [ %i.0, %221 ], [ %i.0, %233 ], [ %i.0, %260 ], [ %i.0., %287 ], [ 76, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_293_117) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %293 ], [ 1, %264 ], [ 1, %279 ], [ 1, %290 ], [ 1, %218 ], [ %state.0, %.backedge ], [ 4, %219 ], [ %., %221 ], [ 3, %233 ], [ %.24, %260 ], [ 3, %287 ], [ 5, %291 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_state_0_be = main__backedge_state_0_reg;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %293 ], [ 1, %264 ], [ 1, %279 ], [ 1, %290 ], [ 1, %218 ], [ %state.0, %.backedge ], [ 4, %219 ], [ %., %221 ], [ 3, %233 ], [ %.24, %260 ], [ 3, %287 ], [ 5, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_218_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be = 32'd1;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %293 ], [ 1, %264 ], [ 1, %279 ], [ 1, %290 ], [ 1, %218 ], [ %state.0, %.backedge ], [ 4, %219 ], [ %., %221 ], [ 3, %233 ], [ %.24, %260 ], [ 3, %287 ], [ 5, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_219_54) & (memory_controller_waitrequest == 1'd0)) & (main_219_220 == 1'd1)))
begin
main__backedge_backedge_state_0_be = 32'd4;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %293 ], [ 1, %264 ], [ 1, %279 ], [ 1, %290 ], [ 1, %218 ], [ %state.0, %.backedge ], [ 4, %219 ], [ %., %221 ], [ 3, %233 ], [ %.24, %260 ], [ 3, %287 ], [ 5, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_221_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be = main_221___reg;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %293 ], [ 1, %264 ], [ 1, %279 ], [ 1, %290 ], [ 1, %218 ], [ %state.0, %.backedge ], [ 4, %219 ], [ %., %221 ], [ 3, %233 ], [ %.24, %260 ], [ 3, %287 ], [ 5, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_233_58) & (memory_controller_waitrequest == 1'd0)) & (main_233_234 == 1'd0)))
begin
main__backedge_backedge_state_0_be = 32'd3;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %293 ], [ 1, %264 ], [ 1, %279 ], [ 1, %290 ], [ 1, %218 ], [ %state.0, %.backedge ], [ 4, %219 ], [ %., %221 ], [ 3, %233 ], [ %.24, %260 ], [ 3, %287 ], [ 5, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_260_68) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be = main_260__24;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %293 ], [ 1, %264 ], [ 1, %279 ], [ 1, %290 ], [ 1, %218 ], [ %state.0, %.backedge ], [ 4, %219 ], [ %., %221 ], [ 3, %233 ], [ %.24, %260 ], [ 3, %287 ], [ 5, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_264_70) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be = 32'd1;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %293 ], [ 1, %264 ], [ 1, %279 ], [ 1, %290 ], [ 1, %218 ], [ %state.0, %.backedge ], [ 4, %219 ], [ %., %221 ], [ 3, %233 ], [ %.24, %260 ], [ 3, %287 ], [ 5, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_279_76) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be = 32'd1;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %293 ], [ 1, %264 ], [ 1, %279 ], [ 1, %290 ], [ 1, %218 ], [ %state.0, %.backedge ], [ 4, %219 ], [ %., %221 ], [ 3, %233 ], [ %.24, %260 ], [ 3, %287 ], [ 5, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_287_79) & (memory_controller_waitrequest == 1'd0)) & (main_262_263_reg == 1'd1)))
begin
main__backedge_backedge_state_0_be = 32'd3;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %293 ], [ 1, %264 ], [ 1, %279 ], [ 1, %290 ], [ 1, %218 ], [ %state.0, %.backedge ], [ 4, %219 ], [ %., %221 ], [ 3, %233 ], [ %.24, %260 ], [ 3, %287 ], [ 5, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_290_80) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be = 32'd1;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %293 ], [ 1, %264 ], [ 1, %279 ], [ 1, %290 ], [ 1, %218 ], [ %state.0, %.backedge ], [ 4, %219 ], [ %., %221 ], [ 3, %233 ], [ %.24, %260 ], [ 3, %287 ], [ 5, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_291_81) & (memory_controller_waitrequest == 1'd0)) & (main_291_292 == 1'd1)))
begin
main__backedge_backedge_state_0_be = 32'd5;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %293 ], [ 1, %264 ], [ 1, %279 ], [ 1, %290 ], [ 1, %218 ], [ %state.0, %.backedge ], [ 4, %219 ], [ %., %221 ], [ 3, %233 ], [ %.24, %260 ], [ 3, %287 ], [ 5, %291 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_293_117) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_state_0_be = main__backedge_state_0_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %293 ], [ 1, %264 ], [ 1, %279 ], [ 1, %290 ], [ 1, %218 ], [ %state.0, %.backedge ], [ 4, %219 ], [ %., %221 ], [ 3, %233 ], [ %.24, %260 ], [ 3, %287 ], [ 5, %291 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %293 ], [ 1, %264 ], [ 1, %279 ], [ 1, %290 ], [ 1, %218 ], [ %state.0, %.backedge ], [ 4, %219 ], [ %., %221 ], [ 3, %233 ], [ %.24, %260 ], [ 3, %287 ], [ 5, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_218_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %293 ], [ 1, %264 ], [ 1, %279 ], [ 1, %290 ], [ 1, %218 ], [ %state.0, %.backedge ], [ 4, %219 ], [ %., %221 ], [ 3, %233 ], [ %.24, %260 ], [ 3, %287 ], [ 5, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_219_54) & (memory_controller_waitrequest == 1'd0)) & (main_219_220 == 1'd1)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %293 ], [ 1, %264 ], [ 1, %279 ], [ 1, %290 ], [ 1, %218 ], [ %state.0, %.backedge ], [ 4, %219 ], [ %., %221 ], [ 3, %233 ], [ %.24, %260 ], [ 3, %287 ], [ 5, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_221_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %293 ], [ 1, %264 ], [ 1, %279 ], [ 1, %290 ], [ 1, %218 ], [ %state.0, %.backedge ], [ 4, %219 ], [ %., %221 ], [ 3, %233 ], [ %.24, %260 ], [ 3, %287 ], [ 5, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_233_58) & (memory_controller_waitrequest == 1'd0)) & (main_233_234 == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %293 ], [ 1, %264 ], [ 1, %279 ], [ 1, %290 ], [ 1, %218 ], [ %state.0, %.backedge ], [ 4, %219 ], [ %., %221 ], [ 3, %233 ], [ %.24, %260 ], [ 3, %287 ], [ 5, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_260_68) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %293 ], [ 1, %264 ], [ 1, %279 ], [ 1, %290 ], [ 1, %218 ], [ %state.0, %.backedge ], [ 4, %219 ], [ %., %221 ], [ 3, %233 ], [ %.24, %260 ], [ 3, %287 ], [ 5, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_264_70) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %293 ], [ 1, %264 ], [ 1, %279 ], [ 1, %290 ], [ 1, %218 ], [ %state.0, %.backedge ], [ 4, %219 ], [ %., %221 ], [ 3, %233 ], [ %.24, %260 ], [ 3, %287 ], [ 5, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_279_76) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %293 ], [ 1, %264 ], [ 1, %279 ], [ 1, %290 ], [ 1, %218 ], [ %state.0, %.backedge ], [ 4, %219 ], [ %., %221 ], [ 3, %233 ], [ %.24, %260 ], [ 3, %287 ], [ 5, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_287_79) & (memory_controller_waitrequest == 1'd0)) & (main_262_263_reg == 1'd1)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %293 ], [ 1, %264 ], [ 1, %279 ], [ 1, %290 ], [ 1, %218 ], [ %state.0, %.backedge ], [ 4, %219 ], [ %., %221 ], [ 3, %233 ], [ %.24, %260 ], [ 3, %287 ], [ 5, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_290_80) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %293 ], [ 1, %264 ], [ 1, %279 ], [ 1, %290 ], [ 1, %218 ], [ %state.0, %.backedge ], [ 4, %219 ], [ %., %221 ], [ 3, %233 ], [ %.24, %260 ], [ 3, %287 ], [ 5, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_291_81) & (memory_controller_waitrequest == 1'd0)) & (main_291_292 == 1'd1)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %293 ], [ 1, %264 ], [ 1, %279 ], [ 1, %290 ], [ 1, %218 ], [ %state.0, %.backedge ], [ 4, %219 ], [ %., %221 ], [ 3, %233 ], [ %.24, %260 ], [ 3, %287 ], [ 5, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_293_117) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %323, %293 ], [ %sum_1hop.0, %264 ], [ %sum_1hop.0, %279 ], [ %sum_1hop.0, %290 ], [ %sum_1hop.0, %218 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %219 ], [ %sum_1hop.0, %221 ], [ %sum_1hop.0, %233 ], [ %sum_1hop.0, %260 ], [ %sum_1hop.0, %287 ], [ %sum_1hop.0, %291 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %323, %293 ], [ %sum_1hop.0, %264 ], [ %sum_1hop.0, %279 ], [ %sum_1hop.0, %290 ], [ %sum_1hop.0, %218 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %219 ], [ %sum_1hop.0, %221 ], [ %sum_1hop.0, %233 ], [ %sum_1hop.0, %260 ], [ %sum_1hop.0, %287 ], [ %sum_1hop.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_218_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %323, %293 ], [ %sum_1hop.0, %264 ], [ %sum_1hop.0, %279 ], [ %sum_1hop.0, %290 ], [ %sum_1hop.0, %218 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %219 ], [ %sum_1hop.0, %221 ], [ %sum_1hop.0, %233 ], [ %sum_1hop.0, %260 ], [ %sum_1hop.0, %287 ], [ %sum_1hop.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_219_54) & (memory_controller_waitrequest == 1'd0)) & (main_219_220 == 1'd1)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %323, %293 ], [ %sum_1hop.0, %264 ], [ %sum_1hop.0, %279 ], [ %sum_1hop.0, %290 ], [ %sum_1hop.0, %218 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %219 ], [ %sum_1hop.0, %221 ], [ %sum_1hop.0, %233 ], [ %sum_1hop.0, %260 ], [ %sum_1hop.0, %287 ], [ %sum_1hop.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_221_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %323, %293 ], [ %sum_1hop.0, %264 ], [ %sum_1hop.0, %279 ], [ %sum_1hop.0, %290 ], [ %sum_1hop.0, %218 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %219 ], [ %sum_1hop.0, %221 ], [ %sum_1hop.0, %233 ], [ %sum_1hop.0, %260 ], [ %sum_1hop.0, %287 ], [ %sum_1hop.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_233_58) & (memory_controller_waitrequest == 1'd0)) & (main_233_234 == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %323, %293 ], [ %sum_1hop.0, %264 ], [ %sum_1hop.0, %279 ], [ %sum_1hop.0, %290 ], [ %sum_1hop.0, %218 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %219 ], [ %sum_1hop.0, %221 ], [ %sum_1hop.0, %233 ], [ %sum_1hop.0, %260 ], [ %sum_1hop.0, %287 ], [ %sum_1hop.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_260_68) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %323, %293 ], [ %sum_1hop.0, %264 ], [ %sum_1hop.0, %279 ], [ %sum_1hop.0, %290 ], [ %sum_1hop.0, %218 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %219 ], [ %sum_1hop.0, %221 ], [ %sum_1hop.0, %233 ], [ %sum_1hop.0, %260 ], [ %sum_1hop.0, %287 ], [ %sum_1hop.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_264_70) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %323, %293 ], [ %sum_1hop.0, %264 ], [ %sum_1hop.0, %279 ], [ %sum_1hop.0, %290 ], [ %sum_1hop.0, %218 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %219 ], [ %sum_1hop.0, %221 ], [ %sum_1hop.0, %233 ], [ %sum_1hop.0, %260 ], [ %sum_1hop.0, %287 ], [ %sum_1hop.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_279_76) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %323, %293 ], [ %sum_1hop.0, %264 ], [ %sum_1hop.0, %279 ], [ %sum_1hop.0, %290 ], [ %sum_1hop.0, %218 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %219 ], [ %sum_1hop.0, %221 ], [ %sum_1hop.0, %233 ], [ %sum_1hop.0, %260 ], [ %sum_1hop.0, %287 ], [ %sum_1hop.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_287_79) & (memory_controller_waitrequest == 1'd0)) & (main_262_263_reg == 1'd1)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %323, %293 ], [ %sum_1hop.0, %264 ], [ %sum_1hop.0, %279 ], [ %sum_1hop.0, %290 ], [ %sum_1hop.0, %218 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %219 ], [ %sum_1hop.0, %221 ], [ %sum_1hop.0, %233 ], [ %sum_1hop.0, %260 ], [ %sum_1hop.0, %287 ], [ %sum_1hop.0, %291 ]*/
else if (((cur_state == LEGUP_F_main_BB_290_80) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %323, %293 ], [ %sum_1hop.0, %264 ], [ %sum_1hop.0, %279 ], [ %sum_1hop.0, %290 ], [ %sum_1hop.0, %218 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %219 ], [ %sum_1hop.0, %221 ], [ %sum_1hop.0, %233 ], [ %sum_1hop.0, %260 ], [ %sum_1hop.0, %287 ], [ %sum_1hop.0, %291 ]*/
else if ((((cur_state == LEGUP_F_main_BB_291_81) & (memory_controller_waitrequest == 1'd0)) & (main_291_292 == 1'd1)))
begin
main__backedge_backedge_sum_1hop_0_be = main__backedge_sum_1hop_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %323, %293 ], [ %sum_1hop.0, %264 ], [ %sum_1hop.0, %279 ], [ %sum_1hop.0, %290 ], [ %sum_1hop.0, %218 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %219 ], [ %sum_1hop.0, %221 ], [ %sum_1hop.0, %233 ], [ %sum_1hop.0, %260 ], [ %sum_1hop.0, %287 ], [ %sum_1hop.0, %291 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_293_117) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_sum_1hop_0_be = main_293_323;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %323, %293 ], [ %sum_1hop.0, %264 ], [ %sum_1hop.0, %279 ], [ %sum_1hop.0, %290 ], [ %sum_1hop.0, %218 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %219 ], [ %sum_1hop.0, %221 ], [ %sum_1hop.0, %233 ], [ %sum_1hop.0, %260 ], [ %sum_1hop.0, %287 ], [ %sum_1hop.0, %291 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %323, %293 ], [ %sum_1hop.0, %264 ], [ %sum_1hop.0, %279 ], [ %sum_1hop.0, %290 ], [ %sum_1hop.0, %218 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %219 ], [ %sum_1hop.0, %221 ], [ %sum_1hop.0, %233 ], [ %sum_1hop.0, %260 ], [ %sum_1hop.0, %287 ], [ %sum_1hop.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_218_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %323, %293 ], [ %sum_1hop.0, %264 ], [ %sum_1hop.0, %279 ], [ %sum_1hop.0, %290 ], [ %sum_1hop.0, %218 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %219 ], [ %sum_1hop.0, %221 ], [ %sum_1hop.0, %233 ], [ %sum_1hop.0, %260 ], [ %sum_1hop.0, %287 ], [ %sum_1hop.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_219_54) & (memory_controller_waitrequest == 1'd0)) & (main_219_220 == 1'd1)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %323, %293 ], [ %sum_1hop.0, %264 ], [ %sum_1hop.0, %279 ], [ %sum_1hop.0, %290 ], [ %sum_1hop.0, %218 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %219 ], [ %sum_1hop.0, %221 ], [ %sum_1hop.0, %233 ], [ %sum_1hop.0, %260 ], [ %sum_1hop.0, %287 ], [ %sum_1hop.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_221_57) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %323, %293 ], [ %sum_1hop.0, %264 ], [ %sum_1hop.0, %279 ], [ %sum_1hop.0, %290 ], [ %sum_1hop.0, %218 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %219 ], [ %sum_1hop.0, %221 ], [ %sum_1hop.0, %233 ], [ %sum_1hop.0, %260 ], [ %sum_1hop.0, %287 ], [ %sum_1hop.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_233_58) & (memory_controller_waitrequest == 1'd0)) & (main_233_234 == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %323, %293 ], [ %sum_1hop.0, %264 ], [ %sum_1hop.0, %279 ], [ %sum_1hop.0, %290 ], [ %sum_1hop.0, %218 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %219 ], [ %sum_1hop.0, %221 ], [ %sum_1hop.0, %233 ], [ %sum_1hop.0, %260 ], [ %sum_1hop.0, %287 ], [ %sum_1hop.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_260_68) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %323, %293 ], [ %sum_1hop.0, %264 ], [ %sum_1hop.0, %279 ], [ %sum_1hop.0, %290 ], [ %sum_1hop.0, %218 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %219 ], [ %sum_1hop.0, %221 ], [ %sum_1hop.0, %233 ], [ %sum_1hop.0, %260 ], [ %sum_1hop.0, %287 ], [ %sum_1hop.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_264_70) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %323, %293 ], [ %sum_1hop.0, %264 ], [ %sum_1hop.0, %279 ], [ %sum_1hop.0, %290 ], [ %sum_1hop.0, %218 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %219 ], [ %sum_1hop.0, %221 ], [ %sum_1hop.0, %233 ], [ %sum_1hop.0, %260 ], [ %sum_1hop.0, %287 ], [ %sum_1hop.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_279_76) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %323, %293 ], [ %sum_1hop.0, %264 ], [ %sum_1hop.0, %279 ], [ %sum_1hop.0, %290 ], [ %sum_1hop.0, %218 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %219 ], [ %sum_1hop.0, %221 ], [ %sum_1hop.0, %233 ], [ %sum_1hop.0, %260 ], [ %sum_1hop.0, %287 ], [ %sum_1hop.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_287_79) & (memory_controller_waitrequest == 1'd0)) & (main_262_263_reg == 1'd1)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %323, %293 ], [ %sum_1hop.0, %264 ], [ %sum_1hop.0, %279 ], [ %sum_1hop.0, %290 ], [ %sum_1hop.0, %218 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %219 ], [ %sum_1hop.0, %221 ], [ %sum_1hop.0, %233 ], [ %sum_1hop.0, %260 ], [ %sum_1hop.0, %287 ], [ %sum_1hop.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_290_80) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %323, %293 ], [ %sum_1hop.0, %264 ], [ %sum_1hop.0, %279 ], [ %sum_1hop.0, %290 ], [ %sum_1hop.0, %218 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %219 ], [ %sum_1hop.0, %221 ], [ %sum_1hop.0, %233 ], [ %sum_1hop.0, %260 ], [ %sum_1hop.0, %287 ], [ %sum_1hop.0, %291 ]*/
if ((((cur_state == LEGUP_F_main_BB_291_81) & (memory_controller_waitrequest == 1'd0)) & (main_291_292 == 1'd1)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum_1hop.0.be = phi i32 [ %323, %293 ], [ %sum_1hop.0, %264 ], [ %sum_1hop.0, %279 ], [ %sum_1hop.0, %290 ], [ %sum_1hop.0, %218 ], [ %sum_1hop.0, %.backedge ], [ %sum_1hop.0, %219 ], [ %sum_1hop.0, %221 ], [ %sum_1hop.0, %233 ], [ %sum_1hop.0, %260 ], [ %sum_1hop.0, %287 ], [ %sum_1hop.0, %291 ]*/
if (((cur_state == LEGUP_F_main_BB_293_117) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_1hop_0_be_reg <= main__backedge_backedge_sum_1hop_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_1hop_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_1hop_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader31*/
/*   %i.133 = phi i32 [ 0, %215 ], [ %216, %.preheader31 ]*/
if (((cur_state == LEGUP_F_main_BB_215_43) & (memory_controller_waitrequest == 1'd0)))
begin
main__preheader31_i_133 = 32'd0;
end
/* main: %.preheader31*/
/*   %i.133 = phi i32 [ 0, %215 ], [ %216, %.preheader31 ]*/
else /* if ((((cur_state == LEGUP_F_main_BB__preheader31_48) & (memory_controller_waitrequest == 1'd0)) & (main__preheader31_exitcond59_reg == 1'd0))) */
begin
main__preheader31_i_133 = main__preheader31_216_reg;
end
end
always @(posedge clk) begin
/* main: %.preheader31*/
/*   %i.133 = phi i32 [ 0, %215 ], [ %216, %.preheader31 ]*/
if (((cur_state == LEGUP_F_main_BB_215_43) & (memory_controller_waitrequest == 1'd0)))
begin
main__preheader31_i_133_reg <= main__preheader31_i_133;
if (reset == 1'b0 && ^(main__preheader31_i_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader31_i_133_reg"); $finish; end
end
/* main: %.preheader31*/
/*   %i.133 = phi i32 [ 0, %215 ], [ %216, %.preheader31 ]*/
if ((((cur_state == LEGUP_F_main_BB__preheader31_48) & (memory_controller_waitrequest == 1'd0)) & (main__preheader31_exitcond59_reg == 1'd0)))
begin
main__preheader31_i_133_reg <= main__preheader31_i_133;
if (reset == 1'b0 && ^(main__preheader31_i_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader31_i_133_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader31*/
/*   %tmp60 = shl i32 %i.133, 3*/
begin
main__preheader31_tmp60 = (main__preheader31_i_133_reg <<< (32'd3 % 32));
end
end
always @(posedge clk) begin
/* main: %.preheader31*/
/*   %tmp60 = shl i32 %i.133, 3*/
if ((cur_state == LEGUP_F_main_BB__preheader31_44))
begin
main__preheader31_tmp60_reg <= main__preheader31_tmp60;
if (reset == 1'b0 && ^(main__preheader31_tmp60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader31_tmp60_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader31*/
/*   %tmp7489 = or i32 %tmp60, 1*/
begin
main__preheader31_tmp7489 = (main__preheader31_tmp60 | 32'd1);
end
end
always @(posedge clk) begin
/* main: %.preheader31*/
/*   %tmp7489 = or i32 %tmp60, 1*/
if ((cur_state == LEGUP_F_main_BB__preheader31_44))
begin
main__preheader31_tmp7489_reg <= main__preheader31_tmp7489;
if (reset == 1'b0 && ^(main__preheader31_tmp7489) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader31_tmp7489_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader31*/
/*   %tmp7288 = or i32 %tmp60, 2*/
begin
main__preheader31_tmp7288 = (main__preheader31_tmp60 | 32'd2);
end
end
always @(posedge clk) begin
/* main: %.preheader31*/
/*   %tmp7288 = or i32 %tmp60, 2*/
if ((cur_state == LEGUP_F_main_BB__preheader31_44))
begin
main__preheader31_tmp7288_reg <= main__preheader31_tmp7288;
if (reset == 1'b0 && ^(main__preheader31_tmp7288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader31_tmp7288_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader31*/
/*   %tmp7087 = or i32 %tmp60, 3*/
begin
main__preheader31_tmp7087 = (main__preheader31_tmp60 | 32'd3);
end
end
always @(posedge clk) begin
/* main: %.preheader31*/
/*   %tmp7087 = or i32 %tmp60, 3*/
if ((cur_state == LEGUP_F_main_BB__preheader31_44))
begin
main__preheader31_tmp7087_reg <= main__preheader31_tmp7087;
if (reset == 1'b0 && ^(main__preheader31_tmp7087) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader31_tmp7087_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader31*/
/*   %tmp6886 = or i32 %tmp60, 4*/
begin
main__preheader31_tmp6886 = (main__preheader31_tmp60 | 32'd4);
end
end
always @(posedge clk) begin
/* main: %.preheader31*/
/*   %tmp6886 = or i32 %tmp60, 4*/
if ((cur_state == LEGUP_F_main_BB__preheader31_44))
begin
main__preheader31_tmp6886_reg <= main__preheader31_tmp6886;
if (reset == 1'b0 && ^(main__preheader31_tmp6886) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader31_tmp6886_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader31*/
/*   %tmp6685 = or i32 %tmp60, 5*/
begin
main__preheader31_tmp6685 = (main__preheader31_tmp60 | 32'd5);
end
end
always @(posedge clk) begin
/* main: %.preheader31*/
/*   %tmp6685 = or i32 %tmp60, 5*/
if ((cur_state == LEGUP_F_main_BB__preheader31_44))
begin
main__preheader31_tmp6685_reg <= main__preheader31_tmp6685;
if (reset == 1'b0 && ^(main__preheader31_tmp6685) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader31_tmp6685_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader31*/
/*   %tmp6484 = or i32 %tmp60, 6*/
begin
main__preheader31_tmp6484 = (main__preheader31_tmp60 | 32'd6);
end
end
always @(posedge clk) begin
/* main: %.preheader31*/
/*   %tmp6484 = or i32 %tmp60, 6*/
if ((cur_state == LEGUP_F_main_BB__preheader31_44))
begin
main__preheader31_tmp6484_reg <= main__preheader31_tmp6484;
if (reset == 1'b0 && ^(main__preheader31_tmp6484) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader31_tmp6484_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader31*/
/*   %tmp6283 = or i32 %tmp60, 7*/
begin
main__preheader31_tmp6283 = (main__preheader31_tmp60 | 32'd7);
end
end
always @(posedge clk) begin
/* main: %.preheader31*/
/*   %tmp6283 = or i32 %tmp60, 7*/
if ((cur_state == LEGUP_F_main_BB__preheader31_44))
begin
main__preheader31_tmp6283_reg <= main__preheader31_tmp6283;
if (reset == 1'b0 && ^(main__preheader31_tmp6283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader31_tmp6283_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader31*/
/*   %scevgep58.1 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp7489*/
begin
main__preheader31_scevgep58_1 = (1'd0 + (4 * main__preheader31_tmp7489));
end
end
always @(posedge clk) begin
/* main: %.preheader31*/
/*   %scevgep58.1 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp7489*/
if ((cur_state == LEGUP_F_main_BB__preheader31_44))
begin
main__preheader31_scevgep58_1_reg <= main__preheader31_scevgep58_1;
if (reset == 1'b0 && ^(main__preheader31_scevgep58_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader31_scevgep58_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader31*/
/*   %scevgep58.2 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp7288*/
begin
main__preheader31_scevgep58_2 = (1'd0 + (4 * main__preheader31_tmp7288));
end
end
always @(posedge clk) begin
/* main: %.preheader31*/
/*   %scevgep58.2 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp7288*/
if ((cur_state == LEGUP_F_main_BB__preheader31_44))
begin
main__preheader31_scevgep58_2_reg <= main__preheader31_scevgep58_2;
if (reset == 1'b0 && ^(main__preheader31_scevgep58_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader31_scevgep58_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader31*/
/*   %scevgep58.3 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp7087*/
begin
main__preheader31_scevgep58_3 = (1'd0 + (4 * main__preheader31_tmp7087));
end
end
always @(posedge clk) begin
/* main: %.preheader31*/
/*   %scevgep58.3 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp7087*/
if ((cur_state == LEGUP_F_main_BB__preheader31_44))
begin
main__preheader31_scevgep58_3_reg <= main__preheader31_scevgep58_3;
if (reset == 1'b0 && ^(main__preheader31_scevgep58_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader31_scevgep58_3_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader31*/
/*   %scevgep58.4 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp6886*/
begin
main__preheader31_scevgep58_4 = (1'd0 + (4 * main__preheader31_tmp6886));
end
end
always @(posedge clk) begin
/* main: %.preheader31*/
/*   %scevgep58.4 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp6886*/
if ((cur_state == LEGUP_F_main_BB__preheader31_44))
begin
main__preheader31_scevgep58_4_reg <= main__preheader31_scevgep58_4;
if (reset == 1'b0 && ^(main__preheader31_scevgep58_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader31_scevgep58_4_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader31*/
/*   %scevgep58.5 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp6685*/
begin
main__preheader31_scevgep58_5 = (1'd0 + (4 * main__preheader31_tmp6685));
end
end
always @(posedge clk) begin
/* main: %.preheader31*/
/*   %scevgep58.5 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp6685*/
if ((cur_state == LEGUP_F_main_BB__preheader31_44))
begin
main__preheader31_scevgep58_5_reg <= main__preheader31_scevgep58_5;
if (reset == 1'b0 && ^(main__preheader31_scevgep58_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader31_scevgep58_5_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader31*/
/*   %scevgep58.6 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp6484*/
begin
main__preheader31_scevgep58_6 = (1'd0 + (4 * main__preheader31_tmp6484));
end
end
always @(posedge clk) begin
/* main: %.preheader31*/
/*   %scevgep58.6 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp6484*/
if ((cur_state == LEGUP_F_main_BB__preheader31_44))
begin
main__preheader31_scevgep58_6_reg <= main__preheader31_scevgep58_6;
if (reset == 1'b0 && ^(main__preheader31_scevgep58_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader31_scevgep58_6_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader31*/
/*   %scevgep58.7 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp6283*/
begin
main__preheader31_scevgep58_7 = (1'd0 + (4 * main__preheader31_tmp6283));
end
end
always @(posedge clk) begin
/* main: %.preheader31*/
/*   %scevgep58.7 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp6283*/
if ((cur_state == LEGUP_F_main_BB__preheader31_44))
begin
main__preheader31_scevgep58_7_reg <= main__preheader31_scevgep58_7;
if (reset == 1'b0 && ^(main__preheader31_scevgep58_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader31_scevgep58_7_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader31*/
/*   %scevgep58 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp60*/
begin
main__preheader31_scevgep58 = (1'd0 + (4 * main__preheader31_tmp60));
end
end
always @(posedge clk) begin
/* main: %.preheader31*/
/*   %scevgep58 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp60*/
if ((cur_state == LEGUP_F_main_BB__preheader31_44))
begin
main__preheader31_scevgep58_reg <= main__preheader31_scevgep58;
if (reset == 1'b0 && ^(main__preheader31_scevgep58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader31_scevgep58_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader31*/
/*   %216 = add nsw i32 %i.133, 1*/
begin
main__preheader31_216 = (main__preheader31_i_133_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %.preheader31*/
/*   %216 = add nsw i32 %i.133, 1*/
if ((cur_state == LEGUP_F_main_BB__preheader31_44))
begin
main__preheader31_216_reg <= main__preheader31_216;
if (reset == 1'b0 && ^(main__preheader31_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader31_216_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader31*/
/*   %exitcond59 = icmp eq i32 %216, 8*/
begin
main__preheader31_exitcond59 = (main__preheader31_216 == 32'd8);
end
end
always @(posedge clk) begin
/* main: %.preheader31*/
/*   %exitcond59 = icmp eq i32 %216, 8*/
if ((cur_state == LEGUP_F_main_BB__preheader31_44))
begin
main__preheader31_exitcond59_reg <= main__preheader31_exitcond59;
if (reset == 1'b0 && ^(main__preheader31_exitcond59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader31_exitcond59_reg"); $finish; end
end
end
always @(*) begin
/* main: %.loopexit*/
/*   %i.234 = phi i32 [ %217, %.loopexit ], [ 0, %.loopexit.loopexit ]*/
if (((cur_state == LEGUP_F_main_BB__loopexit_loopexit_49) & (memory_controller_waitrequest == 1'd0)))
begin
main__loopexit_i_234 = 32'd0;
end
/* main: %.loopexit*/
/*   %i.234 = phi i32 [ %217, %.loopexit ], [ 0, %.loopexit.loopexit ]*/
else /* if ((((cur_state == LEGUP_F_main_BB__loopexit_51) & (memory_controller_waitrequest == 1'd0)) & (main__loopexit_exitcond76_reg == 1'd0))) */
begin
main__loopexit_i_234 = main__loopexit_217_reg;
end
end
always @(posedge clk) begin
/* main: %.loopexit*/
/*   %i.234 = phi i32 [ %217, %.loopexit ], [ 0, %.loopexit.loopexit ]*/
if (((cur_state == LEGUP_F_main_BB__loopexit_loopexit_49) & (memory_controller_waitrequest == 1'd0)))
begin
main__loopexit_i_234_reg <= main__loopexit_i_234;
if (reset == 1'b0 && ^(main__loopexit_i_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__loopexit_i_234_reg"); $finish; end
end
/* main: %.loopexit*/
/*   %i.234 = phi i32 [ %217, %.loopexit ], [ 0, %.loopexit.loopexit ]*/
if ((((cur_state == LEGUP_F_main_BB__loopexit_51) & (memory_controller_waitrequest == 1'd0)) & (main__loopexit_exitcond76_reg == 1'd0)))
begin
main__loopexit_i_234_reg <= main__loopexit_i_234;
if (reset == 1'b0 && ^(main__loopexit_i_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__loopexit_i_234_reg"); $finish; end
end
end
always @(*) begin
/* main: %.loopexit*/
/*   %scevgep77 = getelementptr [62 x i32]* %3, i32 0, i32 %i.234*/
begin
main__loopexit_scevgep77 = (1'd0 + (4 * main__loopexit_i_234_reg));
end
end
always @(posedge clk) begin
/* main: %.loopexit*/
/*   %scevgep77 = getelementptr [62 x i32]* %3, i32 0, i32 %i.234*/
if ((cur_state == LEGUP_F_main_BB__loopexit_50))
begin
main__loopexit_scevgep77_reg <= main__loopexit_scevgep77;
if (reset == 1'b0 && ^(main__loopexit_scevgep77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__loopexit_scevgep77_reg"); $finish; end
end
end
always @(*) begin
/* main: %.loopexit*/
/*   %scevgep78 = getelementptr [62 x i32]* %4, i32 0, i32 %i.234*/
begin
main__loopexit_scevgep78 = (1'd0 + (4 * main__loopexit_i_234_reg));
end
end
always @(posedge clk) begin
/* main: %.loopexit*/
/*   %scevgep78 = getelementptr [62 x i32]* %4, i32 0, i32 %i.234*/
if ((cur_state == LEGUP_F_main_BB__loopexit_50))
begin
main__loopexit_scevgep78_reg <= main__loopexit_scevgep78;
if (reset == 1'b0 && ^(main__loopexit_scevgep78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__loopexit_scevgep78_reg"); $finish; end
end
end
always @(*) begin
/* main: %.loopexit*/
/*   %217 = add nsw i32 %i.234, 1*/
begin
main__loopexit_217 = (main__loopexit_i_234_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %.loopexit*/
/*   %217 = add nsw i32 %i.234, 1*/
if ((cur_state == LEGUP_F_main_BB__loopexit_50))
begin
main__loopexit_217_reg <= main__loopexit_217;
if (reset == 1'b0 && ^(main__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__loopexit_217_reg"); $finish; end
end
end
always @(*) begin
/* main: %.loopexit*/
/*   %exitcond76 = icmp eq i32 %217, 62*/
begin
main__loopexit_exitcond76 = (main__loopexit_217 == 32'd62);
end
end
always @(posedge clk) begin
/* main: %.loopexit*/
/*   %exitcond76 = icmp eq i32 %217, 62*/
if ((cur_state == LEGUP_F_main_BB__loopexit_50))
begin
main__loopexit_exitcond76_reg <= main__loopexit_exitcond76;
if (reset == 1'b0 && ^(main__loopexit_exitcond76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__loopexit_exitcond76_reg"); $finish; end
end
end
always @(*) begin
/* main: %219*/
/*   %220 = icmp eq i32 %i.0, 76*/
begin
main_219_220 = (main__backedge_i_0_reg == 32'd76);
end
end
always @(posedge clk) begin
/* main: %219*/
/*   %220 = icmp eq i32 %i.0, 76*/
if ((cur_state == LEGUP_F_main_BB_219_54))
begin
main_219_220_reg <= main_219_220;
if (reset == 1'b0 && ^(main_219_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_219_220_reg"); $finish; end
end
end
always @(*) begin
/* main: %221*/
/*   %222 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 %i.0*/
begin
main_221_222 = (1'd0 + (4 * main__backedge_i_0_reg));
end
end
always @(posedge clk) begin
/* main: %221*/
/*   %222 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 %i.0*/
if ((cur_state == LEGUP_F_main_BB_221_55))
begin
main_221_222_reg <= main_221_222;
if (reset == 1'b0 && ^(main_221_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_221_222_reg"); $finish; end
end
end
always @(*) begin
/* main: %221*/
/*   %223 = load i32* %222, align 4, !tbaa !0*/
begin
main_221_223 = main_0_1_out_a;
end
end
always @(posedge clk) begin
/* main: %221*/
/*   %223 = load i32* %222, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_221_56))
begin
main_221_223_reg <= main_221_223;
if (reset == 1'b0 && ^(main_221_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_221_223_reg"); $finish; end
end
end
always @(*) begin
/* main: %221*/
/*   %224 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 %i.0*/
begin
main_221_224 = (1'd0 + (4 * main__backedge_i_0_reg));
end
end
always @(posedge clk) begin
/* main: %221*/
/*   %224 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 %i.0*/
if ((cur_state == LEGUP_F_main_BB_221_55))
begin
main_221_224_reg <= main_221_224;
if (reset == 1'b0 && ^(main_221_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_221_224_reg"); $finish; end
end
end
always @(*) begin
/* main: %221*/
/*   %225 = load i32* %224, align 4, !tbaa !0*/
begin
main_221_225 = main_0_2_out_a;
end
end
always @(posedge clk) begin
/* main: %221*/
/*   %225 = load i32* %224, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_221_56))
begin
main_221_225_reg <= main_221_225;
if (reset == 1'b0 && ^(main_221_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_221_225_reg"); $finish; end
end
end
always @(*) begin
/* main: %221*/
/*   %226 = getelementptr inbounds [62 x i32]* %3, i32 0, i32 %223*/
begin
main_221_226 = (1'd0 + (4 * main_221_223));
end
end
always @(posedge clk) begin
/* main: %221*/
/*   %226 = getelementptr inbounds [62 x i32]* %3, i32 0, i32 %223*/
if ((cur_state == LEGUP_F_main_BB_221_56))
begin
main_221_226_reg <= main_221_226;
if (reset == 1'b0 && ^(main_221_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_221_226_reg"); $finish; end
end
end
always @(*) begin
/* main: %221*/
/*   %227 = load i32* %226, align 4, !tbaa !0*/
begin
main_221_227 = main_0_3_out_a;
end
end
always @(posedge clk) begin
/* main: %221*/
/*   %227 = load i32* %226, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_221_57))
begin
main_221_227_reg <= main_221_227;
if (reset == 1'b0 && ^(main_221_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_221_227_reg"); $finish; end
end
end
always @(*) begin
/* main: %221*/
/*   %228 = getelementptr inbounds [62 x i32]* %4, i32 0, i32 %223*/
begin
main_221_228 = (1'd0 + (4 * main_221_223));
end
end
always @(posedge clk) begin
/* main: %221*/
/*   %228 = getelementptr inbounds [62 x i32]* %4, i32 0, i32 %223*/
if ((cur_state == LEGUP_F_main_BB_221_56))
begin
main_221_228_reg <= main_221_228;
if (reset == 1'b0 && ^(main_221_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_221_228_reg"); $finish; end
end
end
always @(*) begin
/* main: %221*/
/*   %229 = load i32* %228, align 4, !tbaa !0*/
begin
main_221_229 = main_0_4_out_a;
end
end
always @(posedge clk) begin
/* main: %221*/
/*   %229 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_221_57))
begin
main_221_229_reg <= main_221_229;
if (reset == 1'b0 && ^(main_221_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_221_229_reg"); $finish; end
end
end
always @(*) begin
/* main: %221*/
/*   %230 = getelementptr inbounds [62 x i32]* %3, i32 0, i32 %225*/
begin
main_221_230 = (1'd0 + (4 * main_221_225));
end
end
always @(posedge clk) begin
/* main: %221*/
/*   %230 = getelementptr inbounds [62 x i32]* %3, i32 0, i32 %225*/
if ((cur_state == LEGUP_F_main_BB_221_56))
begin
main_221_230_reg <= main_221_230;
if (reset == 1'b0 && ^(main_221_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_221_230_reg"); $finish; end
end
end
always @(*) begin
/* main: %221*/
/*   %231 = load i32* %230, align 4, !tbaa !0*/
begin
main_221_231 = main_0_3_out_b;
end
end
always @(posedge clk) begin
/* main: %221*/
/*   %231 = load i32* %230, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_221_57))
begin
main_221_231_reg <= main_221_231;
if (reset == 1'b0 && ^(main_221_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_221_231_reg"); $finish; end
end
end
always @(*) begin
/* main: %221*/
/*   %232 = icmp eq i32 %i.0, 0*/
begin
main_221_232 = (main__backedge_i_0_reg == 32'd0);
end
end
always @(posedge clk) begin
/* main: %221*/
/*   %232 = icmp eq i32 %i.0, 0*/
if ((cur_state == LEGUP_F_main_BB_221_55))
begin
main_221_232_reg <= main_221_232;
if (reset == 1'b0 && ^(main_221_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_221_232_reg"); $finish; end
end
end
always @(*) begin
/* main: %221*/
/*   %. = select i1 %232, i32 3, i32 2*/
begin
main_221__ = (main_221_232 ? 32'd3 : 32'd2);
end
end
always @(posedge clk) begin
/* main: %221*/
/*   %. = select i1 %232, i32 3, i32 2*/
if ((cur_state == LEGUP_F_main_BB_221_55))
begin
main_221___reg <= main_221__;
if (reset == 1'b0 && ^(main_221__) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_221___reg"); $finish; end
end
end
always @(*) begin
/* main: %233*/
/*   %234 = icmp eq i32 %pos_a_X.0, -1*/
begin
main_233_234 = (main__backedge_pos_a_X_0_reg == -32'd1);
end
end
always @(posedge clk) begin
/* main: %233*/
/*   %234 = icmp eq i32 %pos_a_X.0, -1*/
if ((cur_state == LEGUP_F_main_BB_233_58))
begin
main_233_234_reg <= main_233_234;
if (reset == 1'b0 && ^(main_233_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_233_234_reg"); $finish; end
end
end
always @(*) begin
/* main: %235*/
/*   %236 = add nsw i32 %i.0, -1*/
begin
main_235_236 = (main__backedge_i_0_reg + -32'd1);
end
end
always @(posedge clk) begin
/* main: %235*/
/*   %236 = add nsw i32 %i.0, -1*/
if ((cur_state == LEGUP_F_main_BB_235_59))
begin
main_235_236_reg <= main_235_236;
if (reset == 1'b0 && ^(main_235_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_235_236_reg"); $finish; end
end
end
always @(*) begin
/* main: %235*/
/*   %237 = getelementptr inbounds [62 x i32]* %3, i32 0, i32 %236*/
begin
main_235_237 = (1'd0 + (4 * main_235_236_reg));
end
end
always @(posedge clk) begin
/* main: %235*/
/*   %237 = getelementptr inbounds [62 x i32]* %3, i32 0, i32 %236*/
if ((cur_state == LEGUP_F_main_BB_235_60))
begin
main_235_237_reg <= main_235_237;
if (reset == 1'b0 && ^(main_235_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_235_237_reg"); $finish; end
end
end
always @(*) begin
/* main: %235*/
/*   %238 = load i32* %237, align 4, !tbaa !0*/
begin
main_235_238 = main_0_3_out_b;
end
end
always @(posedge clk) begin
/* main: %235*/
/*   %238 = load i32* %237, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_235_61))
begin
main_235_238_reg <= main_235_238;
if (reset == 1'b0 && ^(main_235_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_235_238_reg"); $finish; end
end
end
always @(*) begin
/* main: %235*/
/*   %239 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 %j.0*/
begin
main_235_239 = (1'd0 + (4 * main__backedge_j_0_reg));
end
end
always @(posedge clk) begin
/* main: %235*/
/*   %239 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 %j.0*/
if ((cur_state == LEGUP_F_main_BB_235_59))
begin
main_235_239_reg <= main_235_239;
if (reset == 1'b0 && ^(main_235_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_235_239_reg"); $finish; end
end
end
always @(*) begin
/* main: %235*/
/*   %240 = load i32* %239, align 4, !tbaa !0*/
begin
main_235_240 = main_0_6_out_a;
end
end
always @(posedge clk) begin
/* main: %235*/
/*   %240 = load i32* %239, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_235_60))
begin
main_235_240_reg <= main_235_240;
if (reset == 1'b0 && ^(main_235_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_235_240_reg"); $finish; end
end
end
always @(*) begin
/* main: %235*/
/*   %241 = add nsw i32 %240, %238*/
begin
main_235_241 = (main_235_240_reg + main_235_238);
end
end
always @(posedge clk) begin
/* main: %235*/
/*   %241 = add nsw i32 %240, %238*/
if ((cur_state == LEGUP_F_main_BB_235_61))
begin
main_235_241_reg <= main_235_241;
if (reset == 1'b0 && ^(main_235_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_235_241_reg"); $finish; end
end
end
always @(*) begin
/* main: %235*/
/*   %242 = getelementptr inbounds [62 x i32]* %3, i32 0, i32 %a.0*/
begin
main_235_242 = (1'd0 + (4 * main__backedge_a_0_reg));
end
end
always @(posedge clk) begin
/* main: %235*/
/*   %242 = getelementptr inbounds [62 x i32]* %3, i32 0, i32 %a.0*/
if ((cur_state == LEGUP_F_main_BB_235_59))
begin
main_235_242_reg <= main_235_242;
if (reset == 1'b0 && ^(main_235_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_235_242_reg"); $finish; end
end
end
always @(*) begin
/* main: %235*/
/*   %243 = getelementptr inbounds [62 x i32]* %4, i32 0, i32 %236*/
begin
main_235_243 = (1'd0 + (4 * main_235_236_reg));
end
end
always @(posedge clk) begin
/* main: %235*/
/*   %243 = getelementptr inbounds [62 x i32]* %4, i32 0, i32 %236*/
if ((cur_state == LEGUP_F_main_BB_235_60))
begin
main_235_243_reg <= main_235_243;
if (reset == 1'b0 && ^(main_235_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_235_243_reg"); $finish; end
end
end
always @(*) begin
/* main: %235*/
/*   %244 = load i32* %243, align 4, !tbaa !0*/
begin
main_235_244 = main_0_4_out_a;
end
end
always @(posedge clk) begin
/* main: %235*/
/*   %244 = load i32* %243, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_235_61))
begin
main_235_244_reg <= main_235_244;
if (reset == 1'b0 && ^(main_235_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_235_244_reg"); $finish; end
end
end
always @(*) begin
/* main: %235*/
/*   %245 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 %j.0*/
begin
main_235_245 = (1'd0 + (4 * main__backedge_j_0_reg));
end
end
always @(posedge clk) begin
/* main: %235*/
/*   %245 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 %j.0*/
if ((cur_state == LEGUP_F_main_BB_235_59))
begin
main_235_245_reg <= main_235_245;
if (reset == 1'b0 && ^(main_235_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_235_245_reg"); $finish; end
end
end
always @(*) begin
/* main: %235*/
/*   %246 = load i32* %245, align 4, !tbaa !0*/
begin
main_235_246 = main_0_7_out_a;
end
end
always @(posedge clk) begin
/* main: %235*/
/*   %246 = load i32* %245, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_235_60))
begin
main_235_246_reg <= main_235_246;
if (reset == 1'b0 && ^(main_235_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_235_246_reg"); $finish; end
end
end
always @(*) begin
/* main: %235*/
/*   %247 = add nsw i32 %246, %244*/
begin
main_235_247 = (main_235_246_reg + main_235_244);
end
end
always @(posedge clk) begin
/* main: %235*/
/*   %247 = add nsw i32 %246, %244*/
if ((cur_state == LEGUP_F_main_BB_235_61))
begin
main_235_247_reg <= main_235_247;
if (reset == 1'b0 && ^(main_235_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_235_247_reg"); $finish; end
end
end
always @(*) begin
/* main: %235*/
/*   %248 = getelementptr inbounds [62 x i32]* %4, i32 0, i32 %a.0*/
begin
main_235_248 = (1'd0 + (4 * main__backedge_a_0_reg));
end
end
always @(posedge clk) begin
/* main: %235*/
/*   %248 = getelementptr inbounds [62 x i32]* %4, i32 0, i32 %a.0*/
if ((cur_state == LEGUP_F_main_BB_235_59))
begin
main_235_248_reg <= main_235_248;
if (reset == 1'b0 && ^(main_235_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_235_248_reg"); $finish; end
end
end
always @(*) begin
/* main: %235*/
/*   %249 = add nsw i32 %j.0, 1*/
begin
main_235_249 = (main__backedge_j_0_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %235*/
/*   %249 = add nsw i32 %j.0, 1*/
if ((cur_state == LEGUP_F_main_BB_235_59))
begin
main_235_249_reg <= main_235_249;
if (reset == 1'b0 && ^(main_235_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_235_249_reg"); $finish; end
end
end
always @(*) begin
/* main: %235*/
/*   %idxscale17 = shl i32 %241, 3*/
begin
main_235_idxscale17 = (main_235_241 <<< (32'd3 % 32));
end
end
always @(posedge clk) begin
/* main: %235*/
/*   %idxscale17 = shl i32 %241, 3*/
if ((cur_state == LEGUP_F_main_BB_235_61))
begin
main_235_idxscale17_reg <= main_235_idxscale17;
if (reset == 1'b0 && ^(main_235_idxscale17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_235_idxscale17_reg"); $finish; end
end
end
always @(*) begin
/* main: %235*/
/*   %.sum18 = add i32 %idxscale17, %247*/
begin
main_235__sum18 = (main_235_idxscale17 + main_235_247);
end
end
always @(posedge clk) begin
/* main: %235*/
/*   %.sum18 = add i32 %idxscale17, %247*/
if ((cur_state == LEGUP_F_main_BB_235_61))
begin
main_235__sum18_reg <= main_235__sum18;
if (reset == 1'b0 && ^(main_235__sum18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_235__sum18_reg"); $finish; end
end
end
always @(*) begin
/* main: %235*/
/*   %250 = getelementptr inbounds [64 x i32]* %5, i32 0, i32 %.sum18*/
begin
main_235_250 = (1'd0 + (4 * main_235__sum18_reg));
end
end
always @(posedge clk) begin
/* main: %235*/
/*   %250 = getelementptr inbounds [64 x i32]* %5, i32 0, i32 %.sum18*/
if ((cur_state == LEGUP_F_main_BB_235_62))
begin
main_235_250_reg <= main_235_250;
if (reset == 1'b0 && ^(main_235_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_235_250_reg"); $finish; end
end
end
always @(*) begin
/* main: %235*/
/*   %251 = load i32* %250, align 4, !tbaa !0*/
begin
main_235_251 = main_0_5_out_b;
end
end
always @(posedge clk) begin
/* main: %235*/
/*   %251 = load i32* %250, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_235_63))
begin
main_235_251_reg <= main_235_251;
if (reset == 1'b0 && ^(main_235_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_235_251_reg"); $finish; end
end
end
always @(*) begin
/* main: %235*/
/*   %252 = icmp eq i32 %251, -1*/
begin
main_235_252 = (main_235_251 == -32'd1);
end
end
always @(posedge clk) begin
/* main: %235*/
/*   %252 = icmp eq i32 %251, -1*/
if ((cur_state == LEGUP_F_main_BB_235_63))
begin
main_235_252_reg <= main_235_252;
if (reset == 1'b0 && ^(main_235_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_235_252_reg"); $finish; end
end
end
always @(*) begin
/* main: %235*/
/*   %253 = icmp ult i32 %241, 8*/
begin
main_235_253 = (main_235_241 < 32'd8);
end
end
always @(posedge clk) begin
/* main: %235*/
/*   %253 = icmp ult i32 %241, 8*/
if ((cur_state == LEGUP_F_main_BB_235_61))
begin
main_235_253_reg <= main_235_253;
if (reset == 1'b0 && ^(main_235_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_235_253_reg"); $finish; end
end
end
always @(*) begin
/* main: %235*/
/*   %or.cond = and i1 %252, %253*/
begin
main_235_or_cond = (main_235_252 & main_235_253_reg);
end
end
always @(posedge clk) begin
/* main: %235*/
/*   %or.cond = and i1 %252, %253*/
if ((cur_state == LEGUP_F_main_BB_235_63))
begin
main_235_or_cond_reg <= main_235_or_cond;
if (reset == 1'b0 && ^(main_235_or_cond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_235_or_cond_reg"); $finish; end
end
end
always @(*) begin
/* main: %235*/
/*   %254 = icmp ult i32 %247, 8*/
begin
main_235_254 = (main_235_247 < 32'd8);
end
end
always @(posedge clk) begin
/* main: %235*/
/*   %254 = icmp ult i32 %247, 8*/
if ((cur_state == LEGUP_F_main_BB_235_61))
begin
main_235_254_reg <= main_235_254;
if (reset == 1'b0 && ^(main_235_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_235_254_reg"); $finish; end
end
end
always @(*) begin
/* main: %235*/
/*   %or.cond22 = and i1 %or.cond, %254*/
begin
main_235_or_cond22 = (main_235_or_cond & main_235_254_reg);
end
end
always @(posedge clk) begin
/* main: %235*/
/*   %or.cond22 = and i1 %or.cond, %254*/
if ((cur_state == LEGUP_F_main_BB_235_63))
begin
main_235_or_cond22_reg <= main_235_or_cond22;
if (reset == 1'b0 && ^(main_235_or_cond22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_235_or_cond22_reg"); $finish; end
end
end
always @(*) begin
/* main: %256*/
/*   %257 = icmp sgt i32 %249, 28*/
begin
main_256_257 = ($signed(main_235_249_reg) > $signed(32'd28));
end
end
always @(posedge clk) begin
/* main: %256*/
/*   %257 = icmp sgt i32 %249, 28*/
if ((cur_state == LEGUP_F_main_BB_256_66))
begin
main_256_257_reg <= main_256_257;
if (reset == 1'b0 && ^(main_256_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_257_reg"); $finish; end
end
end
always @(*) begin
/* main: %260*/
/*   %pos_a_Y.1 = phi i32 [ %247, %255 ], [ %pos_a_Y.0, %256 ]*/
if (((cur_state == LEGUP_F_main_BB_255_65) & (memory_controller_waitrequest == 1'd0)))
begin
main_260_pos_a_Y_1 = main_235_247_reg;
end
/* main: %260*/
/*   %pos_a_Y.1 = phi i32 [ %247, %255 ], [ %pos_a_Y.0, %256 ]*/
else /* if ((((cur_state == LEGUP_F_main_BB_256_66) & (memory_controller_waitrequest == 1'd0)) & (main_256_257 == 1'd0))) */
begin
main_260_pos_a_Y_1 = main__backedge_pos_a_Y_0_reg;
end
end
always @(posedge clk) begin
/* main: %260*/
/*   %pos_a_Y.1 = phi i32 [ %247, %255 ], [ %pos_a_Y.0, %256 ]*/
if (((cur_state == LEGUP_F_main_BB_255_65) & (memory_controller_waitrequest == 1'd0)))
begin
main_260_pos_a_Y_1_reg <= main_260_pos_a_Y_1;
if (reset == 1'b0 && ^(main_260_pos_a_Y_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_260_pos_a_Y_1_reg"); $finish; end
end
/* main: %260*/
/*   %pos_a_Y.1 = phi i32 [ %247, %255 ], [ %pos_a_Y.0, %256 ]*/
if ((((cur_state == LEGUP_F_main_BB_256_66) & (memory_controller_waitrequest == 1'd0)) & (main_256_257 == 1'd0)))
begin
main_260_pos_a_Y_1_reg <= main_260_pos_a_Y_1;
if (reset == 1'b0 && ^(main_260_pos_a_Y_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_260_pos_a_Y_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %260*/
/*   %pos_a_X.1 = phi i32 [ %241, %255 ], [ %pos_a_X.0, %256 ]*/
if (((cur_state == LEGUP_F_main_BB_255_65) & (memory_controller_waitrequest == 1'd0)))
begin
main_260_pos_a_X_1 = main_235_241_reg;
end
/* main: %260*/
/*   %pos_a_X.1 = phi i32 [ %241, %255 ], [ %pos_a_X.0, %256 ]*/
else /* if ((((cur_state == LEGUP_F_main_BB_256_66) & (memory_controller_waitrequest == 1'd0)) & (main_256_257 == 1'd0))) */
begin
main_260_pos_a_X_1 = main__backedge_pos_a_X_0_reg;
end
end
always @(posedge clk) begin
/* main: %260*/
/*   %pos_a_X.1 = phi i32 [ %241, %255 ], [ %pos_a_X.0, %256 ]*/
if (((cur_state == LEGUP_F_main_BB_255_65) & (memory_controller_waitrequest == 1'd0)))
begin
main_260_pos_a_X_1_reg <= main_260_pos_a_X_1;
if (reset == 1'b0 && ^(main_260_pos_a_X_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_260_pos_a_X_1_reg"); $finish; end
end
/* main: %260*/
/*   %pos_a_X.1 = phi i32 [ %241, %255 ], [ %pos_a_X.0, %256 ]*/
if ((((cur_state == LEGUP_F_main_BB_256_66) & (memory_controller_waitrequest == 1'd0)) & (main_256_257 == 1'd0)))
begin
main_260_pos_a_X_1_reg <= main_260_pos_a_X_1;
if (reset == 1'b0 && ^(main_260_pos_a_X_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_260_pos_a_X_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %260*/
/*   %261 = icmp eq i32 %pos_a_X.1, -1*/
begin
main_260_261 = (main_260_pos_a_X_1_reg == -32'd1);
end
end
always @(posedge clk) begin
/* main: %260*/
/*   %261 = icmp eq i32 %pos_a_X.1, -1*/
if ((cur_state == LEGUP_F_main_BB_260_68))
begin
main_260_261_reg <= main_260_261;
if (reset == 1'b0 && ^(main_260_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_260_261_reg"); $finish; end
end
end
always @(*) begin
/* main: %260*/
/*   %.23 = select i1 %261, i32 %249, i32 0*/
begin
main_260__23 = (main_260_261 ? main_235_249_reg : 32'd0);
end
end
always @(posedge clk) begin
/* main: %260*/
/*   %.23 = select i1 %261, i32 %249, i32 0*/
if ((cur_state == LEGUP_F_main_BB_260_68))
begin
main_260__23_reg <= main_260__23;
if (reset == 1'b0 && ^(main_260__23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_260__23_reg"); $finish; end
end
end
always @(*) begin
/* main: %260*/
/*   %.24 = select i1 %261, i32 2, i32 3*/
begin
main_260__24 = (main_260_261 ? 32'd2 : 32'd3);
end
end
always @(posedge clk) begin
/* main: %260*/
/*   %.24 = select i1 %261, i32 2, i32 3*/
if ((cur_state == LEGUP_F_main_BB_260_68))
begin
main_260__24_reg <= main_260__24;
if (reset == 1'b0 && ^(main_260__24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_260__24_reg"); $finish; end
end
end
always @(*) begin
/* main: %262*/
/*   %263 = icmp eq i32 %pos_b_X.0, -1*/
begin
main_262_263 = (main__backedge_pos_b_X_0_reg == -32'd1);
end
end
always @(posedge clk) begin
/* main: %262*/
/*   %263 = icmp eq i32 %pos_b_X.0, -1*/
if ((cur_state == LEGUP_F_main_BB_262_69))
begin
main_262_263_reg <= main_262_263;
if (reset == 1'b0 && ^(main_262_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_262_263_reg"); $finish; end
end
end
always @(*) begin
/* main: %264*/
/*   %265 = add nsw i32 %i.0, 1*/
begin
main_264_265 = (main__backedge_i_0_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %264*/
/*   %265 = add nsw i32 %i.0, 1*/
if ((cur_state == LEGUP_F_main_BB_264_70))
begin
main_264_265_reg <= main_264_265;
if (reset == 1'b0 && ^(main_264_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_264_265_reg"); $finish; end
end
end
always @(*) begin
/* main: %266*/
/*   %267 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 %j.0*/
begin
main_266_267 = (1'd0 + (4 * main__backedge_j_0_reg));
end
end
always @(posedge clk) begin
/* main: %266*/
/*   %267 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 %j.0*/
if ((cur_state == LEGUP_F_main_BB_266_71))
begin
main_266_267_reg <= main_266_267;
if (reset == 1'b0 && ^(main_266_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_266_267_reg"); $finish; end
end
end
always @(*) begin
/* main: %266*/
/*   %268 = load i32* %267, align 4, !tbaa !0*/
begin
main_266_268 = main_0_6_out_b;
end
end
always @(posedge clk) begin
/* main: %266*/
/*   %268 = load i32* %267, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_266_72))
begin
main_266_268_reg <= main_266_268;
if (reset == 1'b0 && ^(main_266_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_266_268_reg"); $finish; end
end
end
always @(*) begin
/* main: %266*/
/*   %269 = add nsw i32 %268, %pos_a_X.0*/
begin
main_266_269 = (main_266_268 + main__backedge_pos_a_X_0_reg);
end
end
always @(posedge clk) begin
/* main: %266*/
/*   %269 = add nsw i32 %268, %pos_a_X.0*/
if ((cur_state == LEGUP_F_main_BB_266_72))
begin
main_266_269_reg <= main_266_269;
if (reset == 1'b0 && ^(main_266_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_266_269_reg"); $finish; end
end
end
always @(*) begin
/* main: %266*/
/*   %270 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 %j.0*/
begin
main_266_270 = (1'd0 + (4 * main__backedge_j_0_reg));
end
end
always @(posedge clk) begin
/* main: %266*/
/*   %270 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 %j.0*/
if ((cur_state == LEGUP_F_main_BB_266_71))
begin
main_266_270_reg <= main_266_270;
if (reset == 1'b0 && ^(main_266_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_266_270_reg"); $finish; end
end
end
always @(*) begin
/* main: %266*/
/*   %271 = load i32* %270, align 4, !tbaa !0*/
begin
main_266_271 = main_0_7_out_b;
end
end
always @(posedge clk) begin
/* main: %266*/
/*   %271 = load i32* %270, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_266_72))
begin
main_266_271_reg <= main_266_271;
if (reset == 1'b0 && ^(main_266_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_266_271_reg"); $finish; end
end
end
always @(*) begin
/* main: %266*/
/*   %272 = add nsw i32 %271, %pos_a_Y.0*/
begin
main_266_272 = (main_266_271 + main__backedge_pos_a_Y_0_reg);
end
end
always @(posedge clk) begin
/* main: %266*/
/*   %272 = add nsw i32 %271, %pos_a_Y.0*/
if ((cur_state == LEGUP_F_main_BB_266_72))
begin
main_266_272_reg <= main_266_272;
if (reset == 1'b0 && ^(main_266_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_266_272_reg"); $finish; end
end
end
always @(*) begin
/* main: %266*/
/*   %273 = add nsw i32 %j.0, 1*/
begin
main_266_273 = (main__backedge_j_0_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %266*/
/*   %273 = add nsw i32 %j.0, 1*/
if ((cur_state == LEGUP_F_main_BB_266_71))
begin
main_266_273_reg <= main_266_273;
if (reset == 1'b0 && ^(main_266_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_266_273_reg"); $finish; end
end
end
always @(*) begin
/* main: %266*/
/*   %idxscale15 = shl i32 %269, 3*/
begin
main_266_idxscale15 = (main_266_269 <<< (32'd3 % 32));
end
end
always @(posedge clk) begin
/* main: %266*/
/*   %idxscale15 = shl i32 %269, 3*/
if ((cur_state == LEGUP_F_main_BB_266_72))
begin
main_266_idxscale15_reg <= main_266_idxscale15;
if (reset == 1'b0 && ^(main_266_idxscale15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_266_idxscale15_reg"); $finish; end
end
end
always @(*) begin
/* main: %266*/
/*   %.sum16 = add i32 %idxscale15, %272*/
begin
main_266__sum16 = (main_266_idxscale15 + main_266_272);
end
end
always @(posedge clk) begin
/* main: %266*/
/*   %.sum16 = add i32 %idxscale15, %272*/
if ((cur_state == LEGUP_F_main_BB_266_72))
begin
main_266__sum16_reg <= main_266__sum16;
if (reset == 1'b0 && ^(main_266__sum16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_266__sum16_reg"); $finish; end
end
end
always @(*) begin
/* main: %266*/
/*   %274 = getelementptr inbounds [64 x i32]* %5, i32 0, i32 %.sum16*/
begin
main_266_274 = (1'd0 + (4 * main_266__sum16_reg));
end
end
always @(posedge clk) begin
/* main: %266*/
/*   %274 = getelementptr inbounds [64 x i32]* %5, i32 0, i32 %.sum16*/
if ((cur_state == LEGUP_F_main_BB_266_73))
begin
main_266_274_reg <= main_266_274;
if (reset == 1'b0 && ^(main_266_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_266_274_reg"); $finish; end
end
end
always @(*) begin
/* main: %266*/
/*   %275 = load i32* %274, align 4, !tbaa !0*/
begin
main_266_275 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %266*/
/*   %275 = load i32* %274, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_266_74))
begin
main_266_275_reg <= main_266_275;
if (reset == 1'b0 && ^(main_266_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_266_275_reg"); $finish; end
end
end
always @(*) begin
/* main: %266*/
/*   %276 = icmp eq i32 %275, -1*/
begin
main_266_276 = (main_266_275 == -32'd1);
end
end
always @(posedge clk) begin
/* main: %266*/
/*   %276 = icmp eq i32 %275, -1*/
if ((cur_state == LEGUP_F_main_BB_266_74))
begin
main_266_276_reg <= main_266_276;
if (reset == 1'b0 && ^(main_266_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_266_276_reg"); $finish; end
end
end
always @(*) begin
/* main: %266*/
/*   %277 = icmp ult i32 %269, 8*/
begin
main_266_277 = (main_266_269 < 32'd8);
end
end
always @(posedge clk) begin
/* main: %266*/
/*   %277 = icmp ult i32 %269, 8*/
if ((cur_state == LEGUP_F_main_BB_266_72))
begin
main_266_277_reg <= main_266_277;
if (reset == 1'b0 && ^(main_266_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_266_277_reg"); $finish; end
end
end
always @(*) begin
/* main: %266*/
/*   %or.cond25 = and i1 %276, %277*/
begin
main_266_or_cond25 = (main_266_276 & main_266_277_reg);
end
end
always @(posedge clk) begin
/* main: %266*/
/*   %or.cond25 = and i1 %276, %277*/
if ((cur_state == LEGUP_F_main_BB_266_74))
begin
main_266_or_cond25_reg <= main_266_or_cond25;
if (reset == 1'b0 && ^(main_266_or_cond25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_266_or_cond25_reg"); $finish; end
end
end
always @(*) begin
/* main: %266*/
/*   %278 = icmp ult i32 %272, 8*/
begin
main_266_278 = (main_266_272 < 32'd8);
end
end
always @(posedge clk) begin
/* main: %266*/
/*   %278 = icmp ult i32 %272, 8*/
if ((cur_state == LEGUP_F_main_BB_266_72))
begin
main_266_278_reg <= main_266_278;
if (reset == 1'b0 && ^(main_266_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_266_278_reg"); $finish; end
end
end
always @(*) begin
/* main: %266*/
/*   %or.cond26 = and i1 %or.cond25, %278*/
begin
main_266_or_cond26 = (main_266_or_cond25 & main_266_278_reg);
end
end
always @(posedge clk) begin
/* main: %266*/
/*   %or.cond26 = and i1 %or.cond25, %278*/
if ((cur_state == LEGUP_F_main_BB_266_74))
begin
main_266_or_cond26_reg <= main_266_or_cond26;
if (reset == 1'b0 && ^(main_266_or_cond26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_266_or_cond26_reg"); $finish; end
end
end
always @(*) begin
/* main: %279*/
/*   %280 = getelementptr inbounds [62 x i32]* %3, i32 0, i32 %b.0*/
begin
main_279_280 = (1'd0 + (4 * main__backedge_b_0_reg));
end
end
always @(posedge clk) begin
/* main: %279*/
/*   %280 = getelementptr inbounds [62 x i32]* %3, i32 0, i32 %b.0*/
if ((cur_state == LEGUP_F_main_BB_279_75))
begin
main_279_280_reg <= main_279_280;
if (reset == 1'b0 && ^(main_279_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_279_280_reg"); $finish; end
end
end
always @(*) begin
/* main: %279*/
/*   %281 = getelementptr inbounds [62 x i32]* %4, i32 0, i32 %b.0*/
begin
main_279_281 = (1'd0 + (4 * main__backedge_b_0_reg));
end
end
always @(posedge clk) begin
/* main: %279*/
/*   %281 = getelementptr inbounds [62 x i32]* %4, i32 0, i32 %b.0*/
if ((cur_state == LEGUP_F_main_BB_279_75))
begin
main_279_281_reg <= main_279_281;
if (reset == 1'b0 && ^(main_279_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_279_281_reg"); $finish; end
end
end
always @(*) begin
/* main: %279*/
/*   %282 = add nsw i32 %i.0, 1*/
begin
main_279_282 = (main__backedge_i_0_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %279*/
/*   %282 = add nsw i32 %i.0, 1*/
if ((cur_state == LEGUP_F_main_BB_279_75))
begin
main_279_282_reg <= main_279_282;
if (reset == 1'b0 && ^(main_279_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_279_282_reg"); $finish; end
end
end
always @(*) begin
/* main: %283*/
/*   %284 = icmp sgt i32 %273, 28*/
begin
main_283_284 = ($signed(main_266_273_reg) > $signed(32'd28));
end
end
always @(posedge clk) begin
/* main: %283*/
/*   %284 = icmp sgt i32 %273, 28*/
if ((cur_state == LEGUP_F_main_BB_283_77))
begin
main_283_284_reg <= main_283_284;
if (reset == 1'b0 && ^(main_283_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_283_284_reg"); $finish; end
end
end
always @(*) begin
/* main: %287*/
/*   %288 = zext i1 %263 to i32*/
begin
main_287_288 = main_262_263_reg;
end
end
always @(posedge clk) begin
/* main: %287*/
/*   %288 = zext i1 %263 to i32*/
if ((cur_state == LEGUP_F_main_BB_287_79))
begin
main_287_288_reg <= main_287_288;
if (reset == 1'b0 && ^(main_287_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_287_288_reg"); $finish; end
end
end
always @(*) begin
/* main: %287*/
/*   %289 = xor i32 %288, 1*/
begin
main_287_289 = (main_287_288 ^ 32'd1);
end
end
always @(posedge clk) begin
/* main: %287*/
/*   %289 = xor i32 %288, 1*/
if ((cur_state == LEGUP_F_main_BB_287_79))
begin
main_287_289_reg <= main_287_289;
if (reset == 1'b0 && ^(main_287_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_287_289_reg"); $finish; end
end
end
always @(*) begin
/* main: %287*/
/*   %i.0. = add i32 %i.0, %289*/
begin
main_287_i_0_ = (main__backedge_i_0_reg + main_287_289);
end
end
always @(posedge clk) begin
/* main: %287*/
/*   %i.0. = add i32 %i.0, %289*/
if ((cur_state == LEGUP_F_main_BB_287_79))
begin
main_287_i_0__reg <= main_287_i_0_;
if (reset == 1'b0 && ^(main_287_i_0_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_287_i_0__reg"); $finish; end
end
end
always @(*) begin
/* main: %291*/
/*   %292 = icmp eq i32 %i.0, 76*/
begin
main_291_292 = (main__backedge_i_0_reg == 32'd76);
end
end
always @(posedge clk) begin
/* main: %291*/
/*   %292 = icmp eq i32 %i.0, 76*/
if ((cur_state == LEGUP_F_main_BB_291_81))
begin
main_291_292_reg <= main_291_292;
if (reset == 1'b0 && ^(main_291_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_291_292_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %294 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 %i.0*/
begin
main_293_294 = (1'd0 + (4 * main__backedge_i_0_reg));
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %294 = getelementptr inbounds [76 x i32]* %1, i32 0, i32 %i.0*/
if ((cur_state == LEGUP_F_main_BB_293_82))
begin
main_293_294_reg <= main_293_294;
if (reset == 1'b0 && ^(main_293_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_294_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %295 = load i32* %294, align 4, !tbaa !0*/
begin
main_293_295 = main_0_1_out_b;
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %295 = load i32* %294, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_293_83))
begin
main_293_295_reg <= main_293_295;
if (reset == 1'b0 && ^(main_293_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_295_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %296 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 %i.0*/
begin
main_293_296 = (1'd0 + (4 * main__backedge_i_0_reg));
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %296 = getelementptr inbounds [76 x i32]* %2, i32 0, i32 %i.0*/
if ((cur_state == LEGUP_F_main_BB_293_82))
begin
main_293_296_reg <= main_293_296;
if (reset == 1'b0 && ^(main_293_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_296_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %297 = load i32* %296, align 4, !tbaa !0*/
begin
main_293_297 = main_0_2_out_b;
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %297 = load i32* %296, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_293_83))
begin
main_293_297_reg <= main_293_297;
if (reset == 1'b0 && ^(main_293_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_297_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %298 = getelementptr inbounds [62 x i32]* %3, i32 0, i32 %295*/
begin
main_293_298 = (1'd0 + (4 * main_293_295));
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %298 = getelementptr inbounds [62 x i32]* %3, i32 0, i32 %295*/
if ((cur_state == LEGUP_F_main_BB_293_83))
begin
main_293_298_reg <= main_293_298;
if (reset == 1'b0 && ^(main_293_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_298_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %299 = load i32* %298, align 4, !tbaa !0*/
begin
main_293_299 = main_0_3_out_a;
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %299 = load i32* %298, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_293_84))
begin
main_293_299_reg <= main_293_299;
if (reset == 1'b0 && ^(main_293_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_299_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %300 = getelementptr inbounds [62 x i32]* %3, i32 0, i32 %297*/
begin
main_293_300 = (1'd0 + (4 * main_293_297));
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %300 = getelementptr inbounds [62 x i32]* %3, i32 0, i32 %297*/
if ((cur_state == LEGUP_F_main_BB_293_83))
begin
main_293_300_reg <= main_293_300;
if (reset == 1'b0 && ^(main_293_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_300_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %301 = load i32* %300, align 4, !tbaa !0*/
begin
main_293_301 = main_0_3_out_b;
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %301 = load i32* %300, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_293_84))
begin
main_293_301_reg <= main_293_301;
if (reset == 1'b0 && ^(main_293_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_301_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %302 = sub nsw i32 %299, %301*/
begin
main_293_302 = (main_293_299 - main_293_301);
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %302 = sub nsw i32 %299, %301*/
if ((cur_state == LEGUP_F_main_BB_293_84))
begin
main_293_302_reg <= main_293_302;
if (reset == 1'b0 && ^(main_293_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_302_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %303 = sub i32 0, %302*/
begin
main_293_303 = (32'd0 - main_293_302);
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %303 = sub i32 0, %302*/
if ((cur_state == LEGUP_F_main_BB_293_84))
begin
main_293_303_reg <= main_293_303;
if (reset == 1'b0 && ^(main_293_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_303_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %304 = icmp slt i32 %302, 0*/
begin
main_293_304 = ($signed(main_293_302) < $signed(32'd0));
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %304 = icmp slt i32 %302, 0*/
if ((cur_state == LEGUP_F_main_BB_293_84))
begin
main_293_304_reg <= main_293_304;
if (reset == 1'b0 && ^(main_293_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_304_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %.27 = select i1 %304, i32 %303, i32 %302*/
begin
main_293__27 = (main_293_304 ? main_293_303 : main_293_302);
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %.27 = select i1 %304, i32 %303, i32 %302*/
if ((cur_state == LEGUP_F_main_BB_293_84))
begin
main_293__27_reg <= main_293__27;
if (reset == 1'b0 && ^(main_293__27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293__27_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %305 = getelementptr inbounds [62 x i32]* %4, i32 0, i32 %295*/
begin
main_293_305 = (1'd0 + (4 * main_293_295));
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %305 = getelementptr inbounds [62 x i32]* %4, i32 0, i32 %295*/
if ((cur_state == LEGUP_F_main_BB_293_83))
begin
main_293_305_reg <= main_293_305;
if (reset == 1'b0 && ^(main_293_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_305_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %306 = load i32* %305, align 4, !tbaa !0*/
begin
main_293_306 = main_0_4_out_a;
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %306 = load i32* %305, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_293_84))
begin
main_293_306_reg <= main_293_306;
if (reset == 1'b0 && ^(main_293_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_306_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %307 = getelementptr inbounds [62 x i32]* %4, i32 0, i32 %297*/
begin
main_293_307 = (1'd0 + (4 * main_293_297));
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %307 = getelementptr inbounds [62 x i32]* %4, i32 0, i32 %297*/
if ((cur_state == LEGUP_F_main_BB_293_83))
begin
main_293_307_reg <= main_293_307;
if (reset == 1'b0 && ^(main_293_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_307_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %308 = load i32* %307, align 4, !tbaa !0*/
begin
main_293_308 = main_0_4_out_b;
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %308 = load i32* %307, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_293_84))
begin
main_293_308_reg <= main_293_308;
if (reset == 1'b0 && ^(main_293_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_308_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %309 = sub nsw i32 %306, %308*/
begin
main_293_309 = (main_293_306 - main_293_308);
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %309 = sub nsw i32 %306, %308*/
if ((cur_state == LEGUP_F_main_BB_293_84))
begin
main_293_309_reg <= main_293_309;
if (reset == 1'b0 && ^(main_293_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_309_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %310 = icmp slt i32 %309, 0*/
begin
main_293_310 = ($signed(main_293_309) < $signed(32'd0));
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %310 = icmp slt i32 %309, 0*/
if ((cur_state == LEGUP_F_main_BB_293_84))
begin
main_293_310_reg <= main_293_310;
if (reset == 1'b0 && ^(main_293_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_310_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %311 = sub i32 0, %309*/
begin
main_293_311 = (32'd0 - main_293_309);
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %311 = sub i32 0, %309*/
if ((cur_state == LEGUP_F_main_BB_293_84))
begin
main_293_311_reg <= main_293_311;
if (reset == 1'b0 && ^(main_293_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_311_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %diff_pos_y.0 = select i1 %310, i32 %311, i32 %309*/
begin
main_293_diff_pos_y_0 = (main_293_310 ? main_293_311 : main_293_309);
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %diff_pos_y.0 = select i1 %310, i32 %311, i32 %309*/
if ((cur_state == LEGUP_F_main_BB_293_84))
begin
main_293_diff_pos_y_0_reg <= main_293_diff_pos_y_0;
if (reset == 1'b0 && ^(main_293_diff_pos_y_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_diff_pos_y_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %312 = add i32 %sum.0, -1*/
begin
main_293_312 = (main__backedge_sum_0_reg + -32'd1);
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %312 = add i32 %sum.0, -1*/
if ((cur_state == LEGUP_F_main_BB_293_82))
begin
main_293_312_reg <= main_293_312;
if (reset == 1'b0 && ^(main_293_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_312_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %313 = add i32 %312, %.27*/
begin
main_293_313 = (main_293_312_reg + main_293__27_reg);
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %313 = add i32 %312, %.27*/
if ((cur_state == LEGUP_F_main_BB_293_85))
begin
main_293_313_reg <= main_293_313;
if (reset == 1'b0 && ^(main_293_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_313_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %314 = add i32 %313, %diff_pos_y.0*/
begin
main_293_314 = (main_293_313 + main_293_diff_pos_y_0_reg);
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %314 = add i32 %313, %diff_pos_y.0*/
if ((cur_state == LEGUP_F_main_BB_293_85))
begin
main_293_314_reg <= main_293_314;
if (reset == 1'b0 && ^(main_293_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_314_reg"); $finish; end
end
end
always @(*) begin
main_293_315 = main_signed_divide_32_0;
end
always @(posedge clk) begin
/* main: %293*/
/*   %315 = sdiv i32 %.27, 2*/
if ((cur_state == LEGUP_F_main_BB_293_116))
begin
main_293_315_reg <= main_293_315;
if (reset == 1'b0 && ^(main_293_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_315_reg"); $finish; end
end
/* main: %293*/
/*   %315 = sdiv i32 %.27, 2*/
if ((cur_state == LEGUP_F_main_BB_293_116))
begin
main_293_315_reg <= main_293_315;
if (reset == 1'b0 && ^(main_293_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_315_reg"); $finish; end
end
/* main: %293*/
/*   %317 = sdiv i32 %diff_pos_y.0, 2*/
if ((cur_state == LEGUP_F_main_BB_293_117))
begin
main_293_315_reg <= main_293_317;
if (reset == 1'b0 && ^(main_293_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_315_reg"); $finish; end
end
end
always @(*) begin
main_293_316 = main_signed_modulus_32_0;
end
always @(posedge clk) begin
/* main: %293*/
/*   %316 = srem i32 %.27, 2*/
if ((cur_state == LEGUP_F_main_BB_293_116))
begin
main_293_316_reg <= main_293_316;
if (reset == 1'b0 && ^(main_293_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_316_reg"); $finish; end
end
/* main: %293*/
/*   %316 = srem i32 %.27, 2*/
if ((cur_state == LEGUP_F_main_BB_293_116))
begin
main_293_316_reg <= main_293_316;
if (reset == 1'b0 && ^(main_293_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_316_reg"); $finish; end
end
end
always @(*) begin
main_293_317 = main_signed_divide_32_0;
end
always @(*) begin
/* main: %293*/
/*   %317 = sdiv i32 %diff_pos_y.0, 2*/
main_293_317_reg = main_293_315_reg;
end
always @(*) begin
main_293_318 = main_signed_modulus_32_1;
end
always @(posedge clk) begin
/* main: %293*/
/*   %318 = srem i32 %diff_pos_y.0, 2*/
if ((cur_state == LEGUP_F_main_BB_293_116))
begin
main_293_318_reg <= main_293_318;
if (reset == 1'b0 && ^(main_293_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_318_reg"); $finish; end
end
/* main: %293*/
/*   %318 = srem i32 %diff_pos_y.0, 2*/
if ((cur_state == LEGUP_F_main_BB_293_116))
begin
main_293_318_reg <= main_293_318;
if (reset == 1'b0 && ^(main_293_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_318_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %319 = add i32 %sum_1hop.0, -1*/
begin
main_293_319 = (main__backedge_sum_1hop_0_reg + -32'd1);
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %319 = add i32 %sum_1hop.0, -1*/
if ((cur_state == LEGUP_F_main_BB_293_82))
begin
main_293_319_reg <= main_293_319;
if (reset == 1'b0 && ^(main_293_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_319_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %320 = add i32 %319, %315*/
begin
main_293_320 = (main_293_319_reg + main_293_315);
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %320 = add i32 %319, %315*/
if ((cur_state == LEGUP_F_main_BB_293_116))
begin
main_293_320_reg <= main_293_320;
if (reset == 1'b0 && ^(main_293_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_320_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %321 = add i32 %320, %316*/
begin
main_293_321 = (main_293_320 + main_293_316);
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %321 = add i32 %320, %316*/
if ((cur_state == LEGUP_F_main_BB_293_116))
begin
main_293_321_reg <= main_293_321;
if (reset == 1'b0 && ^(main_293_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_321_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %322 = add i32 %321, %317*/
begin
main_293_322 = (main_293_321_reg + main_293_317);
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %322 = add i32 %321, %317*/
if ((cur_state == LEGUP_F_main_BB_293_117))
begin
main_293_322_reg <= main_293_322;
if (reset == 1'b0 && ^(main_293_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_322_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %323 = add i32 %322, %318*/
begin
main_293_323 = (main_293_322 + main_293_318_reg);
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %323 = add i32 %322, %318*/
if ((cur_state == LEGUP_F_main_BB_293_117))
begin
main_293_323_reg <= main_293_323;
if (reset == 1'b0 && ^(main_293_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_323_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %324 = add nsw i32 %i.0, 1*/
begin
main_293_324 = (main__backedge_i_0_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %324 = add nsw i32 %i.0, 1*/
if ((cur_state == LEGUP_F_main_BB_293_82))
begin
main_293_324_reg <= main_293_324;
if (reset == 1'b0 && ^(main_293_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_324_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %i.330 = phi i32 [ %342, %.preheader ], [ 0, %.preheader.preheader ]*/
if (((cur_state == LEGUP_F_main_BB__preheader_preheader_4) & (memory_controller_waitrequest == 1'd0)))
begin
main__preheader_i_330 = 32'd0;
end
/* main: %.preheader*/
/*   %i.330 = phi i32 [ %342, %.preheader ], [ 0, %.preheader.preheader ]*/
else /* if ((((cur_state == LEGUP_F_main_BB__preheader_122) & (memory_controller_waitrequest == 1'd0)) & (main__preheader_exitcond_reg == 1'd0))) */
begin
main__preheader_i_330 = main__preheader_342_reg;
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %i.330 = phi i32 [ %342, %.preheader ], [ 0, %.preheader.preheader ]*/
if (((cur_state == LEGUP_F_main_BB__preheader_preheader_4) & (memory_controller_waitrequest == 1'd0)))
begin
main__preheader_i_330_reg <= main__preheader_i_330;
if (reset == 1'b0 && ^(main__preheader_i_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_i_330_reg"); $finish; end
end
/* main: %.preheader*/
/*   %i.330 = phi i32 [ %342, %.preheader ], [ 0, %.preheader.preheader ]*/
if ((((cur_state == LEGUP_F_main_BB__preheader_122) & (memory_controller_waitrequest == 1'd0)) & (main__preheader_exitcond_reg == 1'd0)))
begin
main__preheader_i_330_reg <= main__preheader_i_330;
if (reset == 1'b0 && ^(main__preheader_i_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_i_330_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %tmp40 = shl i32 %i.330, 3*/
begin
main__preheader_tmp40 = (main__preheader_i_330_reg <<< (32'd3 % 32));
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %tmp40 = shl i32 %i.330, 3*/
if ((cur_state == LEGUP_F_main_BB__preheader_118))
begin
main__preheader_tmp40_reg <= main__preheader_tmp40;
if (reset == 1'b0 && ^(main__preheader_tmp40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_tmp40_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %tmp5496 = or i32 %tmp40, 1*/
begin
main__preheader_tmp5496 = (main__preheader_tmp40 | 32'd1);
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %tmp5496 = or i32 %tmp40, 1*/
if ((cur_state == LEGUP_F_main_BB__preheader_118))
begin
main__preheader_tmp5496_reg <= main__preheader_tmp5496;
if (reset == 1'b0 && ^(main__preheader_tmp5496) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_tmp5496_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %tmp5295 = or i32 %tmp40, 2*/
begin
main__preheader_tmp5295 = (main__preheader_tmp40 | 32'd2);
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %tmp5295 = or i32 %tmp40, 2*/
if ((cur_state == LEGUP_F_main_BB__preheader_118))
begin
main__preheader_tmp5295_reg <= main__preheader_tmp5295;
if (reset == 1'b0 && ^(main__preheader_tmp5295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_tmp5295_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %tmp5094 = or i32 %tmp40, 3*/
begin
main__preheader_tmp5094 = (main__preheader_tmp40 | 32'd3);
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %tmp5094 = or i32 %tmp40, 3*/
if ((cur_state == LEGUP_F_main_BB__preheader_118))
begin
main__preheader_tmp5094_reg <= main__preheader_tmp5094;
if (reset == 1'b0 && ^(main__preheader_tmp5094) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_tmp5094_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %tmp4893 = or i32 %tmp40, 4*/
begin
main__preheader_tmp4893 = (main__preheader_tmp40 | 32'd4);
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %tmp4893 = or i32 %tmp40, 4*/
if ((cur_state == LEGUP_F_main_BB__preheader_118))
begin
main__preheader_tmp4893_reg <= main__preheader_tmp4893;
if (reset == 1'b0 && ^(main__preheader_tmp4893) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_tmp4893_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %tmp4692 = or i32 %tmp40, 5*/
begin
main__preheader_tmp4692 = (main__preheader_tmp40 | 32'd5);
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %tmp4692 = or i32 %tmp40, 5*/
if ((cur_state == LEGUP_F_main_BB__preheader_118))
begin
main__preheader_tmp4692_reg <= main__preheader_tmp4692;
if (reset == 1'b0 && ^(main__preheader_tmp4692) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_tmp4692_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %tmp4491 = or i32 %tmp40, 6*/
begin
main__preheader_tmp4491 = (main__preheader_tmp40 | 32'd6);
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %tmp4491 = or i32 %tmp40, 6*/
if ((cur_state == LEGUP_F_main_BB__preheader_118))
begin
main__preheader_tmp4491_reg <= main__preheader_tmp4491;
if (reset == 1'b0 && ^(main__preheader_tmp4491) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_tmp4491_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %tmp4290 = or i32 %tmp40, 7*/
begin
main__preheader_tmp4290 = (main__preheader_tmp40 | 32'd7);
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %tmp4290 = or i32 %tmp40, 7*/
if ((cur_state == LEGUP_F_main_BB__preheader_118))
begin
main__preheader_tmp4290_reg <= main__preheader_tmp4290;
if (reset == 1'b0 && ^(main__preheader_tmp4290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_tmp4290_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %scevgep.1 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp5496*/
begin
main__preheader_scevgep_1 = (1'd0 + (4 * main__preheader_tmp5496));
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %scevgep.1 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp5496*/
if ((cur_state == LEGUP_F_main_BB__preheader_118))
begin
main__preheader_scevgep_1_reg <= main__preheader_scevgep_1;
if (reset == 1'b0 && ^(main__preheader_scevgep_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_scevgep_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %scevgep.2 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp5295*/
begin
main__preheader_scevgep_2 = (1'd0 + (4 * main__preheader_tmp5295));
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %scevgep.2 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp5295*/
if ((cur_state == LEGUP_F_main_BB__preheader_118))
begin
main__preheader_scevgep_2_reg <= main__preheader_scevgep_2;
if (reset == 1'b0 && ^(main__preheader_scevgep_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_scevgep_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %scevgep.3 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp5094*/
begin
main__preheader_scevgep_3 = (1'd0 + (4 * main__preheader_tmp5094));
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %scevgep.3 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp5094*/
if ((cur_state == LEGUP_F_main_BB__preheader_118))
begin
main__preheader_scevgep_3_reg <= main__preheader_scevgep_3;
if (reset == 1'b0 && ^(main__preheader_scevgep_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_scevgep_3_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %scevgep.4 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp4893*/
begin
main__preheader_scevgep_4 = (1'd0 + (4 * main__preheader_tmp4893));
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %scevgep.4 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp4893*/
if ((cur_state == LEGUP_F_main_BB__preheader_118))
begin
main__preheader_scevgep_4_reg <= main__preheader_scevgep_4;
if (reset == 1'b0 && ^(main__preheader_scevgep_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_scevgep_4_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %scevgep.5 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp4692*/
begin
main__preheader_scevgep_5 = (1'd0 + (4 * main__preheader_tmp4692));
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %scevgep.5 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp4692*/
if ((cur_state == LEGUP_F_main_BB__preheader_118))
begin
main__preheader_scevgep_5_reg <= main__preheader_scevgep_5;
if (reset == 1'b0 && ^(main__preheader_scevgep_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_scevgep_5_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %scevgep.6 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp4491*/
begin
main__preheader_scevgep_6 = (1'd0 + (4 * main__preheader_tmp4491));
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %scevgep.6 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp4491*/
if ((cur_state == LEGUP_F_main_BB__preheader_118))
begin
main__preheader_scevgep_6_reg <= main__preheader_scevgep_6;
if (reset == 1'b0 && ^(main__preheader_scevgep_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_scevgep_6_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %scevgep.7 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp4290*/
begin
main__preheader_scevgep_7 = (1'd0 + (4 * main__preheader_tmp4290));
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %scevgep.7 = getelementptr [64 x i32]* %5, i32 0, i32 %tmp4290*/
if ((cur_state == LEGUP_F_main_BB__preheader_118))
begin
main__preheader_scevgep_7_reg <= main__preheader_scevgep_7;
if (reset == 1'b0 && ^(main__preheader_scevgep_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_scevgep_7_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %scevgep = getelementptr [64 x i32]* %5, i32 0, i32 %tmp40*/
begin
main__preheader_scevgep = (1'd0 + (4 * main__preheader_tmp40));
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %scevgep = getelementptr [64 x i32]* %5, i32 0, i32 %tmp40*/
if ((cur_state == LEGUP_F_main_BB__preheader_118))
begin
main__preheader_scevgep_reg <= main__preheader_scevgep;
if (reset == 1'b0 && ^(main__preheader_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_scevgep_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %325 = load i32* %scevgep, align 4, !tbaa !0*/
begin
main__preheader_325 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %325 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_119))
begin
main__preheader_325_reg <= main__preheader_325;
if (reset == 1'b0 && ^(main__preheader_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_325_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %327 = load i32* %scevgep.1, align 4, !tbaa !0*/
begin
main__preheader_327 = main_0_5_out_b;
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %327 = load i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_119))
begin
main__preheader_327_reg <= main__preheader_327;
if (reset == 1'b0 && ^(main__preheader_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_327_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %329 = load i32* %scevgep.2, align 4, !tbaa !0*/
begin
main__preheader_329 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %329 = load i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_120))
begin
main__preheader_329_reg <= main__preheader_329;
if (reset == 1'b0 && ^(main__preheader_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_329_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %331 = load i32* %scevgep.3, align 4, !tbaa !0*/
begin
main__preheader_331 = main_0_5_out_b;
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %331 = load i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_120))
begin
main__preheader_331_reg <= main__preheader_331;
if (reset == 1'b0 && ^(main__preheader_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_331_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %333 = load i32* %scevgep.4, align 4, !tbaa !0*/
begin
main__preheader_333 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %333 = load i32* %scevgep.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_121))
begin
main__preheader_333_reg <= main__preheader_333;
if (reset == 1'b0 && ^(main__preheader_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_333_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %335 = load i32* %scevgep.5, align 4, !tbaa !0*/
begin
main__preheader_335 = main_0_5_out_b;
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %335 = load i32* %scevgep.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_121))
begin
main__preheader_335_reg <= main__preheader_335;
if (reset == 1'b0 && ^(main__preheader_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_335_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %337 = load i32* %scevgep.6, align 4, !tbaa !0*/
begin
main__preheader_337 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %337 = load i32* %scevgep.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_122))
begin
main__preheader_337_reg <= main__preheader_337;
if (reset == 1'b0 && ^(main__preheader_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_337_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %339 = load i32* %scevgep.7, align 4, !tbaa !0*/
begin
main__preheader_339 = main_0_5_out_b;
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %339 = load i32* %scevgep.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_122))
begin
main__preheader_339_reg <= main__preheader_339;
if (reset == 1'b0 && ^(main__preheader_339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_339_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %342 = add nsw i32 %i.330, 1*/
begin
main__preheader_342 = (main__preheader_i_330_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %342 = add nsw i32 %i.330, 1*/
if ((cur_state == LEGUP_F_main_BB__preheader_118))
begin
main__preheader_342_reg <= main__preheader_342;
if (reset == 1'b0 && ^(main__preheader_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_342_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader*/
/*   %exitcond = icmp eq i32 %342, 8*/
begin
main__preheader_exitcond = (main__preheader_342 == 32'd8);
end
end
always @(posedge clk) begin
/* main: %.preheader*/
/*   %exitcond = icmp eq i32 %342, 8*/
if ((cur_state == LEGUP_F_main_BB__preheader_118))
begin
main__preheader_exitcond_reg <= main__preheader_exitcond;
if (reset == 1'b0 && ^(main__preheader_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_exitcond_reg"); $finish; end
end
end
always @(*) begin
/* main: %345*/
/*   %.0 = phi i32 [ 0, %285 ], [ 0, %258 ], [ 1, %343 ]*/
if (((cur_state == LEGUP_F_main_BB_258_67) & (memory_controller_waitrequest == 1'd0)))
begin
main_345__0 = 32'd0;
end
/* main: %345*/
/*   %.0 = phi i32 [ 0, %285 ], [ 0, %258 ], [ 1, %343 ]*/
else if (((cur_state == LEGUP_F_main_BB_285_78) & (memory_controller_waitrequest == 1'd0)))
begin
main_345__0 = 32'd0;
end
/* main: %345*/
/*   %.0 = phi i32 [ 0, %285 ], [ 0, %258 ], [ 1, %343 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_343_123) & (memory_controller_waitrequest == 1'd0))) */
begin
main_345__0 = 32'd1;
end
end
always @(posedge clk) begin
/* main: %345*/
/*   %.0 = phi i32 [ 0, %285 ], [ 0, %258 ], [ 1, %343 ]*/
if (((cur_state == LEGUP_F_main_BB_258_67) & (memory_controller_waitrequest == 1'd0)))
begin
main_345__0_reg <= main_345__0;
if (reset == 1'b0 && ^(main_345__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_345__0_reg"); $finish; end
end
/* main: %345*/
/*   %.0 = phi i32 [ 0, %285 ], [ 0, %258 ], [ 1, %343 ]*/
if (((cur_state == LEGUP_F_main_BB_285_78) & (memory_controller_waitrequest == 1'd0)))
begin
main_345__0_reg <= main_345__0;
if (reset == 1'b0 && ^(main_345__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_345__0_reg"); $finish; end
end
/* main: %345*/
/*   %.0 = phi i32 [ 0, %285 ], [ 0, %258 ], [ 1, %343 ]*/
if (((cur_state == LEGUP_F_main_BB_343_123) & (memory_controller_waitrequest == 1'd0)))
begin
main_345__0_reg <= main_345__0;
if (reset == 1'b0 && ^(main_345__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_345__0_reg"); $finish; end
end
end
always @(*) begin
main_0_1_address_a = 1'd0;
/* main: %215*/
/*   store i32 0, i32* %.sub8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_5))
begin
main_0_1_address_a = (main_0__sub8_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 2, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_6))
begin
main_0_1_address_a = (main_0_10_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 4, i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_7))
begin
main_0_1_address_a = (main_0_14_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 6, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_8))
begin
main_0_1_address_a = (main_0_18_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 8, i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_9))
begin
main_0_1_address_a = (main_0_22_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 8, i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_10))
begin
main_0_1_address_a = (main_0_26_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 9, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_11))
begin
main_0_1_address_a = (main_0_30_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 9, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_12))
begin
main_0_1_address_a = (main_0_34_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 10, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_13))
begin
main_0_1_address_a = (main_0_38_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 10, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_14))
begin
main_0_1_address_a = (main_0_42_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 11, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_15))
begin
main_0_1_address_a = (main_0_46_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 11, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_16))
begin
main_0_1_address_a = (main_0_50_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 12, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_17))
begin
main_0_1_address_a = (main_0_54_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 14, i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_18))
begin
main_0_1_address_a = (main_0_58_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 16, i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_19))
begin
main_0_1_address_a = (main_0_62_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 18, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_20))
begin
main_0_1_address_a = (main_0_66_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 20, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_21))
begin
main_0_1_address_a = (main_0_70_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 22, i32* %74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_22))
begin
main_0_1_address_a = (main_0_74_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 24, i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_23))
begin
main_0_1_address_a = (main_0_78_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 26, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_24))
begin
main_0_1_address_a = (main_0_82_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 28, i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_25))
begin
main_0_1_address_a = (main_0_86_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 30, i32* %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_26))
begin
main_0_1_address_a = (main_0_90_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 32, i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_27))
begin
main_0_1_address_a = (main_0_94_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 34, i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_28))
begin
main_0_1_address_a = (main_0_98_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 36, i32* %102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_29))
begin
main_0_1_address_a = (main_0_102_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 38, i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_30))
begin
main_0_1_address_a = (main_0_106_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 40, i32* %110, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_31))
begin
main_0_1_address_a = (main_0_110_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 43, i32* %114, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_32))
begin
main_0_1_address_a = (main_0_114_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 45, i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_33))
begin
main_0_1_address_a = (main_0_118_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 47, i32* %122, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_34))
begin
main_0_1_address_a = (main_0_122_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 49, i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_35))
begin
main_0_1_address_a = (main_0_126_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 51, i32* %130, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_36))
begin
main_0_1_address_a = (main_0_130_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 52, i32* %134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_37))
begin
main_0_1_address_a = (main_0_134_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 54, i32* %138, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_38))
begin
main_0_1_address_a = (main_0_138_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 56, i32* %142, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_39))
begin
main_0_1_address_a = (main_0_142_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 57, i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_40))
begin
main_0_1_address_a = (main_0_146_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 58, i32* %150, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_41))
begin
main_0_1_address_a = (main_0_150_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 59, i32* %154, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_42))
begin
main_0_1_address_a = (main_0_154_reg >>> 3'd2);
end
/* main: %221*/
/*   %223 = load i32* %222, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_221_55))
begin
main_0_1_address_a = (main_221_222 >>> 3'd2);
end
end
always @(*) begin
main_0_1_write_enable_a = 1'd0;
/* main: %215*/
/*   store i32 0, i32* %.sub8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_5))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 2, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_6))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 4, i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_7))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 6, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_8))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 8, i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_9))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 8, i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_10))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 9, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_11))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 9, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_12))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 10, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_13))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 10, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_14))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 11, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_15))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 11, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_16))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 12, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_17))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 14, i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_18))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 16, i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_19))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 18, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_20))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 20, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_21))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 22, i32* %74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_22))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 24, i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_23))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 26, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_24))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 28, i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_25))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 30, i32* %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_26))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 32, i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_27))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 34, i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_28))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 36, i32* %102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_29))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 38, i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_30))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 40, i32* %110, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_31))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 43, i32* %114, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_32))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 45, i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_33))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 47, i32* %122, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_34))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 49, i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_35))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 51, i32* %130, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_36))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 52, i32* %134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_37))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 54, i32* %138, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_38))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 56, i32* %142, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_39))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 57, i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_40))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 58, i32* %150, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_41))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 59, i32* %154, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_42))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %221*/
/*   %223 = load i32* %222, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_221_55))
begin
main_0_1_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_1_in_a = 1'd0;
/* main: %215*/
/*   store i32 0, i32* %.sub8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_5))
begin
main_0_1_in_a = 32'd0;
end
/* main: %215*/
/*   store i32 2, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_6))
begin
main_0_1_in_a = 32'd2;
end
/* main: %215*/
/*   store i32 4, i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_7))
begin
main_0_1_in_a = 32'd4;
end
/* main: %215*/
/*   store i32 6, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_8))
begin
main_0_1_in_a = 32'd6;
end
/* main: %215*/
/*   store i32 8, i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_9))
begin
main_0_1_in_a = 32'd8;
end
/* main: %215*/
/*   store i32 8, i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_10))
begin
main_0_1_in_a = 32'd8;
end
/* main: %215*/
/*   store i32 9, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_11))
begin
main_0_1_in_a = 32'd9;
end
/* main: %215*/
/*   store i32 9, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_12))
begin
main_0_1_in_a = 32'd9;
end
/* main: %215*/
/*   store i32 10, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_13))
begin
main_0_1_in_a = 32'd10;
end
/* main: %215*/
/*   store i32 10, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_14))
begin
main_0_1_in_a = 32'd10;
end
/* main: %215*/
/*   store i32 11, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_15))
begin
main_0_1_in_a = 32'd11;
end
/* main: %215*/
/*   store i32 11, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_16))
begin
main_0_1_in_a = 32'd11;
end
/* main: %215*/
/*   store i32 12, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_17))
begin
main_0_1_in_a = 32'd12;
end
/* main: %215*/
/*   store i32 14, i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_18))
begin
main_0_1_in_a = 32'd14;
end
/* main: %215*/
/*   store i32 16, i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_19))
begin
main_0_1_in_a = 32'd16;
end
/* main: %215*/
/*   store i32 18, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_20))
begin
main_0_1_in_a = 32'd18;
end
/* main: %215*/
/*   store i32 20, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_21))
begin
main_0_1_in_a = 32'd20;
end
/* main: %215*/
/*   store i32 22, i32* %74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_22))
begin
main_0_1_in_a = 32'd22;
end
/* main: %215*/
/*   store i32 24, i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_23))
begin
main_0_1_in_a = 32'd24;
end
/* main: %215*/
/*   store i32 26, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_24))
begin
main_0_1_in_a = 32'd26;
end
/* main: %215*/
/*   store i32 28, i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_25))
begin
main_0_1_in_a = 32'd28;
end
/* main: %215*/
/*   store i32 30, i32* %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_26))
begin
main_0_1_in_a = 32'd30;
end
/* main: %215*/
/*   store i32 32, i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_27))
begin
main_0_1_in_a = 32'd32;
end
/* main: %215*/
/*   store i32 34, i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_28))
begin
main_0_1_in_a = 32'd34;
end
/* main: %215*/
/*   store i32 36, i32* %102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_29))
begin
main_0_1_in_a = 32'd36;
end
/* main: %215*/
/*   store i32 38, i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_30))
begin
main_0_1_in_a = 32'd38;
end
/* main: %215*/
/*   store i32 40, i32* %110, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_31))
begin
main_0_1_in_a = 32'd40;
end
/* main: %215*/
/*   store i32 43, i32* %114, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_32))
begin
main_0_1_in_a = 32'd43;
end
/* main: %215*/
/*   store i32 45, i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_33))
begin
main_0_1_in_a = 32'd45;
end
/* main: %215*/
/*   store i32 47, i32* %122, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_34))
begin
main_0_1_in_a = 32'd47;
end
/* main: %215*/
/*   store i32 49, i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_35))
begin
main_0_1_in_a = 32'd49;
end
/* main: %215*/
/*   store i32 51, i32* %130, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_36))
begin
main_0_1_in_a = 32'd51;
end
/* main: %215*/
/*   store i32 52, i32* %134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_37))
begin
main_0_1_in_a = 32'd52;
end
/* main: %215*/
/*   store i32 54, i32* %138, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_38))
begin
main_0_1_in_a = 32'd54;
end
/* main: %215*/
/*   store i32 56, i32* %142, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_39))
begin
main_0_1_in_a = 32'd56;
end
/* main: %215*/
/*   store i32 57, i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_40))
begin
main_0_1_in_a = 32'd57;
end
/* main: %215*/
/*   store i32 58, i32* %150, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_41))
begin
main_0_1_in_a = 32'd58;
end
/* main: %215*/
/*   store i32 59, i32* %154, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_42))
begin
main_0_1_in_a = 32'd59;
end
end
always @(*) begin
main_0_1_address_b = 1'd0;
/* main: %215*/
/*   store i32 1, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_5))
begin
main_0_1_address_b = (main_0_8_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 3, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_6))
begin
main_0_1_address_b = (main_0_12_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 5, i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_7))
begin
main_0_1_address_b = (main_0_16_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 7, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_8))
begin
main_0_1_address_b = (main_0_20_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 8, i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_9))
begin
main_0_1_address_b = (main_0_24_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 8, i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_10))
begin
main_0_1_address_b = (main_0_28_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 9, i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_11))
begin
main_0_1_address_b = (main_0_32_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 9, i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_12))
begin
main_0_1_address_b = (main_0_36_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 10, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_13))
begin
main_0_1_address_b = (main_0_40_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 10, i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_14))
begin
main_0_1_address_b = (main_0_44_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 11, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_15))
begin
main_0_1_address_b = (main_0_48_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 11, i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_16))
begin
main_0_1_address_b = (main_0_52_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 13, i32* %56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_17))
begin
main_0_1_address_b = (main_0_56_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 15, i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_18))
begin
main_0_1_address_b = (main_0_60_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 17, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_19))
begin
main_0_1_address_b = (main_0_64_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 19, i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_20))
begin
main_0_1_address_b = (main_0_68_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 21, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_21))
begin
main_0_1_address_b = (main_0_72_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 23, i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_22))
begin
main_0_1_address_b = (main_0_76_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 25, i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_23))
begin
main_0_1_address_b = (main_0_80_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 27, i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_24))
begin
main_0_1_address_b = (main_0_84_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 29, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_25))
begin
main_0_1_address_b = (main_0_88_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 31, i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_26))
begin
main_0_1_address_b = (main_0_92_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 33, i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_27))
begin
main_0_1_address_b = (main_0_96_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 35, i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_28))
begin
main_0_1_address_b = (main_0_100_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 37, i32* %104, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_29))
begin
main_0_1_address_b = (main_0_104_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 39, i32* %108, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_30))
begin
main_0_1_address_b = (main_0_108_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 42, i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_31))
begin
main_0_1_address_b = (main_0_112_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 44, i32* %116, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_32))
begin
main_0_1_address_b = (main_0_116_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 46, i32* %120, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_33))
begin
main_0_1_address_b = (main_0_120_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 48, i32* %124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_34))
begin
main_0_1_address_b = (main_0_124_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 50, i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_35))
begin
main_0_1_address_b = (main_0_128_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 51, i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_36))
begin
main_0_1_address_b = (main_0_132_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 53, i32* %136, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_37))
begin
main_0_1_address_b = (main_0_136_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 54, i32* %140, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_38))
begin
main_0_1_address_b = (main_0_140_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 56, i32* %144, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_39))
begin
main_0_1_address_b = (main_0_144_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 57, i32* %148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_40))
begin
main_0_1_address_b = (main_0_148_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 59, i32* %152, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_41))
begin
main_0_1_address_b = (main_0_152_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 60, i32* %156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_42))
begin
main_0_1_address_b = (main_0_156_reg >>> 3'd2);
end
/* main: %293*/
/*   %295 = load i32* %294, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_293_82))
begin
main_0_1_address_b = (main_293_294 >>> 3'd2);
end
end
always @(*) begin
main_0_1_write_enable_b = 1'd0;
/* main: %215*/
/*   store i32 1, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_5))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 3, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_6))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 5, i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_7))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 7, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_8))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 8, i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_9))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 8, i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_10))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 9, i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_11))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 9, i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_12))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 10, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_13))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 10, i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_14))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 11, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_15))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 11, i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_16))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 13, i32* %56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_17))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 15, i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_18))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 17, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_19))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 19, i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_20))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 21, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_21))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 23, i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_22))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 25, i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_23))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 27, i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_24))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 29, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_25))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 31, i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_26))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 33, i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_27))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 35, i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_28))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 37, i32* %104, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_29))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 39, i32* %108, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_30))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 42, i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_31))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 44, i32* %116, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_32))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 46, i32* %120, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_33))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 48, i32* %124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_34))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 50, i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_35))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 51, i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_36))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 53, i32* %136, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_37))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 54, i32* %140, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_38))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 56, i32* %144, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_39))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 57, i32* %148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_40))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 59, i32* %152, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_41))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 60, i32* %156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_42))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %293*/
/*   %295 = load i32* %294, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_293_82))
begin
main_0_1_write_enable_b = 1'd0;
end
end
always @(*) begin
main_0_1_in_b = 1'd0;
/* main: %215*/
/*   store i32 1, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_5))
begin
main_0_1_in_b = 32'd1;
end
/* main: %215*/
/*   store i32 3, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_6))
begin
main_0_1_in_b = 32'd3;
end
/* main: %215*/
/*   store i32 5, i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_7))
begin
main_0_1_in_b = 32'd5;
end
/* main: %215*/
/*   store i32 7, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_8))
begin
main_0_1_in_b = 32'd7;
end
/* main: %215*/
/*   store i32 8, i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_9))
begin
main_0_1_in_b = 32'd8;
end
/* main: %215*/
/*   store i32 8, i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_10))
begin
main_0_1_in_b = 32'd8;
end
/* main: %215*/
/*   store i32 9, i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_11))
begin
main_0_1_in_b = 32'd9;
end
/* main: %215*/
/*   store i32 9, i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_12))
begin
main_0_1_in_b = 32'd9;
end
/* main: %215*/
/*   store i32 10, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_13))
begin
main_0_1_in_b = 32'd10;
end
/* main: %215*/
/*   store i32 10, i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_14))
begin
main_0_1_in_b = 32'd10;
end
/* main: %215*/
/*   store i32 11, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_15))
begin
main_0_1_in_b = 32'd11;
end
/* main: %215*/
/*   store i32 11, i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_16))
begin
main_0_1_in_b = 32'd11;
end
/* main: %215*/
/*   store i32 13, i32* %56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_17))
begin
main_0_1_in_b = 32'd13;
end
/* main: %215*/
/*   store i32 15, i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_18))
begin
main_0_1_in_b = 32'd15;
end
/* main: %215*/
/*   store i32 17, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_19))
begin
main_0_1_in_b = 32'd17;
end
/* main: %215*/
/*   store i32 19, i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_20))
begin
main_0_1_in_b = 32'd19;
end
/* main: %215*/
/*   store i32 21, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_21))
begin
main_0_1_in_b = 32'd21;
end
/* main: %215*/
/*   store i32 23, i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_22))
begin
main_0_1_in_b = 32'd23;
end
/* main: %215*/
/*   store i32 25, i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_23))
begin
main_0_1_in_b = 32'd25;
end
/* main: %215*/
/*   store i32 27, i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_24))
begin
main_0_1_in_b = 32'd27;
end
/* main: %215*/
/*   store i32 29, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_25))
begin
main_0_1_in_b = 32'd29;
end
/* main: %215*/
/*   store i32 31, i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_26))
begin
main_0_1_in_b = 32'd31;
end
/* main: %215*/
/*   store i32 33, i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_27))
begin
main_0_1_in_b = 32'd33;
end
/* main: %215*/
/*   store i32 35, i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_28))
begin
main_0_1_in_b = 32'd35;
end
/* main: %215*/
/*   store i32 37, i32* %104, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_29))
begin
main_0_1_in_b = 32'd37;
end
/* main: %215*/
/*   store i32 39, i32* %108, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_30))
begin
main_0_1_in_b = 32'd39;
end
/* main: %215*/
/*   store i32 42, i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_31))
begin
main_0_1_in_b = 32'd42;
end
/* main: %215*/
/*   store i32 44, i32* %116, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_32))
begin
main_0_1_in_b = 32'd44;
end
/* main: %215*/
/*   store i32 46, i32* %120, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_33))
begin
main_0_1_in_b = 32'd46;
end
/* main: %215*/
/*   store i32 48, i32* %124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_34))
begin
main_0_1_in_b = 32'd48;
end
/* main: %215*/
/*   store i32 50, i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_35))
begin
main_0_1_in_b = 32'd50;
end
/* main: %215*/
/*   store i32 51, i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_36))
begin
main_0_1_in_b = 32'd51;
end
/* main: %215*/
/*   store i32 53, i32* %136, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_37))
begin
main_0_1_in_b = 32'd53;
end
/* main: %215*/
/*   store i32 54, i32* %140, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_38))
begin
main_0_1_in_b = 32'd54;
end
/* main: %215*/
/*   store i32 56, i32* %144, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_39))
begin
main_0_1_in_b = 32'd56;
end
/* main: %215*/
/*   store i32 57, i32* %148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_40))
begin
main_0_1_in_b = 32'd57;
end
/* main: %215*/
/*   store i32 59, i32* %152, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_41))
begin
main_0_1_in_b = 32'd59;
end
/* main: %215*/
/*   store i32 60, i32* %156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_42))
begin
main_0_1_in_b = 32'd60;
end
end
always @(*) begin
main_0_2_address_a = 1'd0;
/* main: %215*/
/*   store i32 24, i32* %.sub9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_5))
begin
main_0_2_address_a = (main_0__sub9_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 26, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_6))
begin
main_0_2_address_a = (main_0_11_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 28, i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_7))
begin
main_0_2_address_a = (main_0_15_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 30, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_8))
begin
main_0_2_address_a = (main_0_19_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 24, i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_9))
begin
main_0_2_address_a = (main_0_23_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 32, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_10))
begin
main_0_2_address_a = (main_0_27_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 25, i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_11))
begin
main_0_2_address_a = (main_0_31_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 34, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_12))
begin
main_0_2_address_a = (main_0_35_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 26, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_13))
begin
main_0_2_address_a = (main_0_39_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 36, i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_14))
begin
main_0_2_address_a = (main_0_43_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 27, i32* %47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_15))
begin
main_0_2_address_a = (main_0_47_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 38, i32* %51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_16))
begin
main_0_2_address_a = (main_0_51_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 32, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_17))
begin
main_0_2_address_a = (main_0_55_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 36, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_18))
begin
main_0_2_address_a = (main_0_59_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 33, i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_19))
begin
main_0_2_address_a = (main_0_63_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 37, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_20))
begin
main_0_2_address_a = (main_0_67_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 40, i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_21))
begin
main_0_2_address_a = (main_0_71_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 41, i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_22))
begin
main_0_2_address_a = (main_0_75_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 42, i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_23))
begin
main_0_2_address_a = (main_0_79_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 43, i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_24))
begin
main_0_2_address_a = (main_0_83_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 44, i32* %87, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_25))
begin
main_0_2_address_a = (main_0_87_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 45, i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_26))
begin
main_0_2_address_a = (main_0_91_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 46, i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_27))
begin
main_0_2_address_a = (main_0_95_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 46, i32* %99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_28))
begin
main_0_2_address_a = (main_0_99_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 48, i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_29))
begin
main_0_2_address_a = (main_0_103_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 48, i32* %107, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_30))
begin
main_0_2_address_a = (main_0_107_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 50, i32* %111, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_31))
begin
main_0_2_address_a = (main_0_111_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 51, i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_32))
begin
main_0_2_address_a = (main_0_115_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 52, i32* %119, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_33))
begin
main_0_2_address_a = (main_0_119_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 54, i32* %123, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_34))
begin
main_0_2_address_a = (main_0_123_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 54, i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_35))
begin
main_0_2_address_a = (main_0_127_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 40, i32* %131, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_36))
begin
main_0_2_address_a = (main_0_131_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 56, i32* %135, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_37))
begin
main_0_2_address_a = (main_0_135_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 57, i32* %139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_38))
begin
main_0_2_address_a = (main_0_139_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 59, i32* %143, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_39))
begin
main_0_2_address_a = (main_0_143_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 59, i32* %147, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_40))
begin
main_0_2_address_a = (main_0_147_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 50, i32* %151, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_41))
begin
main_0_2_address_a = (main_0_151_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 61, i32* %155, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_42))
begin
main_0_2_address_a = (main_0_155_reg >>> 3'd2);
end
/* main: %221*/
/*   %225 = load i32* %224, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_221_55))
begin
main_0_2_address_a = (main_221_224 >>> 3'd2);
end
end
always @(*) begin
main_0_2_write_enable_a = 1'd0;
/* main: %215*/
/*   store i32 24, i32* %.sub9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_5))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 26, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_6))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 28, i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_7))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 30, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_8))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 24, i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_9))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 32, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_10))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 25, i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_11))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 34, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_12))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 26, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_13))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 36, i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_14))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 27, i32* %47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_15))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 38, i32* %51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_16))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 32, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_17))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 36, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_18))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 33, i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_19))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 37, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_20))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 40, i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_21))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 41, i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_22))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 42, i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_23))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 43, i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_24))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 44, i32* %87, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_25))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 45, i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_26))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 46, i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_27))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 46, i32* %99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_28))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 48, i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_29))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 48, i32* %107, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_30))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 50, i32* %111, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_31))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 51, i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_32))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 52, i32* %119, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_33))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 54, i32* %123, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_34))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 54, i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_35))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 40, i32* %131, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_36))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 56, i32* %135, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_37))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 57, i32* %139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_38))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 59, i32* %143, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_39))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 59, i32* %147, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_40))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 50, i32* %151, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_41))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 61, i32* %155, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_42))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %221*/
/*   %225 = load i32* %224, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_221_55))
begin
main_0_2_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_2_in_a = 1'd0;
/* main: %215*/
/*   store i32 24, i32* %.sub9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_5))
begin
main_0_2_in_a = 32'd24;
end
/* main: %215*/
/*   store i32 26, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_6))
begin
main_0_2_in_a = 32'd26;
end
/* main: %215*/
/*   store i32 28, i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_7))
begin
main_0_2_in_a = 32'd28;
end
/* main: %215*/
/*   store i32 30, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_8))
begin
main_0_2_in_a = 32'd30;
end
/* main: %215*/
/*   store i32 24, i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_9))
begin
main_0_2_in_a = 32'd24;
end
/* main: %215*/
/*   store i32 32, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_10))
begin
main_0_2_in_a = 32'd32;
end
/* main: %215*/
/*   store i32 25, i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_11))
begin
main_0_2_in_a = 32'd25;
end
/* main: %215*/
/*   store i32 34, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_12))
begin
main_0_2_in_a = 32'd34;
end
/* main: %215*/
/*   store i32 26, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_13))
begin
main_0_2_in_a = 32'd26;
end
/* main: %215*/
/*   store i32 36, i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_14))
begin
main_0_2_in_a = 32'd36;
end
/* main: %215*/
/*   store i32 27, i32* %47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_15))
begin
main_0_2_in_a = 32'd27;
end
/* main: %215*/
/*   store i32 38, i32* %51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_16))
begin
main_0_2_in_a = 32'd38;
end
/* main: %215*/
/*   store i32 32, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_17))
begin
main_0_2_in_a = 32'd32;
end
/* main: %215*/
/*   store i32 36, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_18))
begin
main_0_2_in_a = 32'd36;
end
/* main: %215*/
/*   store i32 33, i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_19))
begin
main_0_2_in_a = 32'd33;
end
/* main: %215*/
/*   store i32 37, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_20))
begin
main_0_2_in_a = 32'd37;
end
/* main: %215*/
/*   store i32 40, i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_21))
begin
main_0_2_in_a = 32'd40;
end
/* main: %215*/
/*   store i32 41, i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_22))
begin
main_0_2_in_a = 32'd41;
end
/* main: %215*/
/*   store i32 42, i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_23))
begin
main_0_2_in_a = 32'd42;
end
/* main: %215*/
/*   store i32 43, i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_24))
begin
main_0_2_in_a = 32'd43;
end
/* main: %215*/
/*   store i32 44, i32* %87, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_25))
begin
main_0_2_in_a = 32'd44;
end
/* main: %215*/
/*   store i32 45, i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_26))
begin
main_0_2_in_a = 32'd45;
end
/* main: %215*/
/*   store i32 46, i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_27))
begin
main_0_2_in_a = 32'd46;
end
/* main: %215*/
/*   store i32 46, i32* %99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_28))
begin
main_0_2_in_a = 32'd46;
end
/* main: %215*/
/*   store i32 48, i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_29))
begin
main_0_2_in_a = 32'd48;
end
/* main: %215*/
/*   store i32 48, i32* %107, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_30))
begin
main_0_2_in_a = 32'd48;
end
/* main: %215*/
/*   store i32 50, i32* %111, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_31))
begin
main_0_2_in_a = 32'd50;
end
/* main: %215*/
/*   store i32 51, i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_32))
begin
main_0_2_in_a = 32'd51;
end
/* main: %215*/
/*   store i32 52, i32* %119, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_33))
begin
main_0_2_in_a = 32'd52;
end
/* main: %215*/
/*   store i32 54, i32* %123, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_34))
begin
main_0_2_in_a = 32'd54;
end
/* main: %215*/
/*   store i32 54, i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_35))
begin
main_0_2_in_a = 32'd54;
end
/* main: %215*/
/*   store i32 40, i32* %131, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_36))
begin
main_0_2_in_a = 32'd40;
end
/* main: %215*/
/*   store i32 56, i32* %135, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_37))
begin
main_0_2_in_a = 32'd56;
end
/* main: %215*/
/*   store i32 57, i32* %139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_38))
begin
main_0_2_in_a = 32'd57;
end
/* main: %215*/
/*   store i32 59, i32* %143, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_39))
begin
main_0_2_in_a = 32'd59;
end
/* main: %215*/
/*   store i32 59, i32* %147, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_40))
begin
main_0_2_in_a = 32'd59;
end
/* main: %215*/
/*   store i32 50, i32* %151, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_41))
begin
main_0_2_in_a = 32'd50;
end
/* main: %215*/
/*   store i32 61, i32* %155, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_42))
begin
main_0_2_in_a = 32'd61;
end
end
always @(*) begin
main_0_2_address_b = 1'd0;
/* main: %215*/
/*   store i32 25, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_5))
begin
main_0_2_address_b = (main_0_9_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 27, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_6))
begin
main_0_2_address_b = (main_0_13_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 29, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_7))
begin
main_0_2_address_b = (main_0_17_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 31, i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_8))
begin
main_0_2_address_b = (main_0_21_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 28, i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_9))
begin
main_0_2_address_b = (main_0_25_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 33, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_10))
begin
main_0_2_address_b = (main_0_29_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 29, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_11))
begin
main_0_2_address_b = (main_0_33_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 35, i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_12))
begin
main_0_2_address_b = (main_0_37_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 30, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_13))
begin
main_0_2_address_b = (main_0_41_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 37, i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_14))
begin
main_0_2_address_b = (main_0_45_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 31, i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_15))
begin
main_0_2_address_b = (main_0_49_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 39, i32* %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_16))
begin
main_0_2_address_b = (main_0_53_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 34, i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_17))
begin
main_0_2_address_b = (main_0_57_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 38, i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_18))
begin
main_0_2_address_b = (main_0_61_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 35, i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_19))
begin
main_0_2_address_b = (main_0_65_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 39, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_20))
begin
main_0_2_address_b = (main_0_69_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 40, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_21))
begin
main_0_2_address_b = (main_0_73_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 41, i32* %77, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_22))
begin
main_0_2_address_b = (main_0_77_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 42, i32* %81, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_23))
begin
main_0_2_address_b = (main_0_81_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 43, i32* %85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_24))
begin
main_0_2_address_b = (main_0_85_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 44, i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_25))
begin
main_0_2_address_b = (main_0_89_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 45, i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_26))
begin
main_0_2_address_b = (main_0_93_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 47, i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_27))
begin
main_0_2_address_b = (main_0_97_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 47, i32* %101, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_28))
begin
main_0_2_address_b = (main_0_101_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 49, i32* %105, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_29))
begin
main_0_2_address_b = (main_0_105_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 49, i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_30))
begin
main_0_2_address_b = (main_0_109_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 51, i32* %113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_31))
begin
main_0_2_address_b = (main_0_113_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 52, i32* %117, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_32))
begin
main_0_2_address_b = (main_0_117_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 53, i32* %121, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_33))
begin
main_0_2_address_b = (main_0_121_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 53, i32* %125, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_34))
begin
main_0_2_address_b = (main_0_125_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 55, i32* %129, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_35))
begin
main_0_2_address_b = (main_0_129_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 56, i32* %133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_36))
begin
main_0_2_address_b = (main_0_133_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 57, i32* %137, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_37))
begin
main_0_2_address_b = (main_0_137_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 58, i32* %141, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_38))
begin
main_0_2_address_b = (main_0_141_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 60, i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_39))
begin
main_0_2_address_b = (main_0_145_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 60, i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_40))
begin
main_0_2_address_b = (main_0_149_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 55, i32* %153, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_41))
begin
main_0_2_address_b = (main_0_153_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 61, i32* %157, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_42))
begin
main_0_2_address_b = (main_0_157_reg >>> 3'd2);
end
/* main: %293*/
/*   %297 = load i32* %296, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_293_82))
begin
main_0_2_address_b = (main_293_296 >>> 3'd2);
end
end
always @(*) begin
main_0_2_write_enable_b = 1'd0;
/* main: %215*/
/*   store i32 25, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_5))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 27, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_6))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 29, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_7))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 31, i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_8))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 28, i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_9))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 33, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_10))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 29, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_11))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 35, i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_12))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 30, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_13))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 37, i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_14))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 31, i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_15))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 39, i32* %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_16))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 34, i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_17))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 38, i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_18))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 35, i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_19))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 39, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_20))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 40, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_21))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 41, i32* %77, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_22))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 42, i32* %81, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_23))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 43, i32* %85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_24))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 44, i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_25))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 45, i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_26))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 47, i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_27))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 47, i32* %101, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_28))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 49, i32* %105, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_29))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 49, i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_30))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 51, i32* %113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_31))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 52, i32* %117, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_32))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 53, i32* %121, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_33))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 53, i32* %125, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_34))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 55, i32* %129, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_35))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 56, i32* %133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_36))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 57, i32* %137, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_37))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 58, i32* %141, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_38))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 60, i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_39))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 60, i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_40))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 55, i32* %153, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_41))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 61, i32* %157, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_42))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %293*/
/*   %297 = load i32* %296, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_293_82))
begin
main_0_2_write_enable_b = 1'd0;
end
end
always @(*) begin
main_0_2_in_b = 1'd0;
/* main: %215*/
/*   store i32 25, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_5))
begin
main_0_2_in_b = 32'd25;
end
/* main: %215*/
/*   store i32 27, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_6))
begin
main_0_2_in_b = 32'd27;
end
/* main: %215*/
/*   store i32 29, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_7))
begin
main_0_2_in_b = 32'd29;
end
/* main: %215*/
/*   store i32 31, i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_8))
begin
main_0_2_in_b = 32'd31;
end
/* main: %215*/
/*   store i32 28, i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_9))
begin
main_0_2_in_b = 32'd28;
end
/* main: %215*/
/*   store i32 33, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_10))
begin
main_0_2_in_b = 32'd33;
end
/* main: %215*/
/*   store i32 29, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_11))
begin
main_0_2_in_b = 32'd29;
end
/* main: %215*/
/*   store i32 35, i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_12))
begin
main_0_2_in_b = 32'd35;
end
/* main: %215*/
/*   store i32 30, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_13))
begin
main_0_2_in_b = 32'd30;
end
/* main: %215*/
/*   store i32 37, i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_14))
begin
main_0_2_in_b = 32'd37;
end
/* main: %215*/
/*   store i32 31, i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_15))
begin
main_0_2_in_b = 32'd31;
end
/* main: %215*/
/*   store i32 39, i32* %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_16))
begin
main_0_2_in_b = 32'd39;
end
/* main: %215*/
/*   store i32 34, i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_17))
begin
main_0_2_in_b = 32'd34;
end
/* main: %215*/
/*   store i32 38, i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_18))
begin
main_0_2_in_b = 32'd38;
end
/* main: %215*/
/*   store i32 35, i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_19))
begin
main_0_2_in_b = 32'd35;
end
/* main: %215*/
/*   store i32 39, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_20))
begin
main_0_2_in_b = 32'd39;
end
/* main: %215*/
/*   store i32 40, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_21))
begin
main_0_2_in_b = 32'd40;
end
/* main: %215*/
/*   store i32 41, i32* %77, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_22))
begin
main_0_2_in_b = 32'd41;
end
/* main: %215*/
/*   store i32 42, i32* %81, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_23))
begin
main_0_2_in_b = 32'd42;
end
/* main: %215*/
/*   store i32 43, i32* %85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_24))
begin
main_0_2_in_b = 32'd43;
end
/* main: %215*/
/*   store i32 44, i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_25))
begin
main_0_2_in_b = 32'd44;
end
/* main: %215*/
/*   store i32 45, i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_26))
begin
main_0_2_in_b = 32'd45;
end
/* main: %215*/
/*   store i32 47, i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_27))
begin
main_0_2_in_b = 32'd47;
end
/* main: %215*/
/*   store i32 47, i32* %101, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_28))
begin
main_0_2_in_b = 32'd47;
end
/* main: %215*/
/*   store i32 49, i32* %105, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_29))
begin
main_0_2_in_b = 32'd49;
end
/* main: %215*/
/*   store i32 49, i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_30))
begin
main_0_2_in_b = 32'd49;
end
/* main: %215*/
/*   store i32 51, i32* %113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_31))
begin
main_0_2_in_b = 32'd51;
end
/* main: %215*/
/*   store i32 52, i32* %117, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_32))
begin
main_0_2_in_b = 32'd52;
end
/* main: %215*/
/*   store i32 53, i32* %121, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_33))
begin
main_0_2_in_b = 32'd53;
end
/* main: %215*/
/*   store i32 53, i32* %125, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_34))
begin
main_0_2_in_b = 32'd53;
end
/* main: %215*/
/*   store i32 55, i32* %129, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_35))
begin
main_0_2_in_b = 32'd55;
end
/* main: %215*/
/*   store i32 56, i32* %133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_36))
begin
main_0_2_in_b = 32'd56;
end
/* main: %215*/
/*   store i32 57, i32* %137, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_37))
begin
main_0_2_in_b = 32'd57;
end
/* main: %215*/
/*   store i32 58, i32* %141, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_38))
begin
main_0_2_in_b = 32'd58;
end
/* main: %215*/
/*   store i32 60, i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_39))
begin
main_0_2_in_b = 32'd60;
end
/* main: %215*/
/*   store i32 60, i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_40))
begin
main_0_2_in_b = 32'd60;
end
/* main: %215*/
/*   store i32 55, i32* %153, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_41))
begin
main_0_2_in_b = 32'd55;
end
/* main: %215*/
/*   store i32 61, i32* %157, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_42))
begin
main_0_2_in_b = 32'd61;
end
end
always @(*) begin
main_0_3_address_a = 1'd0;
/* main: %.loopexit*/
/*   store i32 -1, i32* %scevgep77, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__loopexit_50))
begin
main_0_3_address_a = (main__loopexit_scevgep77 >>> 3'd2);
end
/* main: %218*/
/*   store i32 0, i32* %212, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_52))
begin
main_0_3_address_a = (main_0_212_reg >>> 3'd2);
end
/* main: %221*/
/*   %227 = load i32* %226, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_221_56))
begin
main_0_3_address_a = (main_221_226 >>> 3'd2);
end
/* main: %279*/
/*   store i32 %269, i32* %280, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_279_75))
begin
main_0_3_address_a = (main_279_280 >>> 3'd2);
end
/* main: %293*/
/*   %299 = load i32* %298, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_293_83))
begin
main_0_3_address_a = (main_293_298 >>> 3'd2);
end
end
always @(*) begin
main_0_3_write_enable_a = 1'd0;
/* main: %.loopexit*/
/*   store i32 -1, i32* %scevgep77, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__loopexit_50))
begin
main_0_3_write_enable_a = 1'd1;
end
/* main: %218*/
/*   store i32 0, i32* %212, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_52))
begin
main_0_3_write_enable_a = 1'd1;
end
/* main: %221*/
/*   %227 = load i32* %226, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_221_56))
begin
main_0_3_write_enable_a = 1'd0;
end
/* main: %279*/
/*   store i32 %269, i32* %280, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_279_75))
begin
main_0_3_write_enable_a = 1'd1;
end
/* main: %293*/
/*   %299 = load i32* %298, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_293_83))
begin
main_0_3_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_3_in_a = 1'd0;
/* main: %.loopexit*/
/*   store i32 -1, i32* %scevgep77, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__loopexit_50))
begin
main_0_3_in_a = -32'd1;
end
/* main: %218*/
/*   store i32 0, i32* %212, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_52))
begin
main_0_3_in_a = 32'd0;
end
/* main: %279*/
/*   store i32 %269, i32* %280, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_279_75))
begin
main_0_3_in_a = main_266_269_reg;
end
end
always @(*) begin
main_0_3_address_b = 1'd0;
/* main: %221*/
/*   %231 = load i32* %230, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_221_56))
begin
main_0_3_address_b = (main_221_230 >>> 3'd2);
end
/* main: %235*/
/*   %238 = load i32* %237, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_235_60))
begin
main_0_3_address_b = (main_235_237 >>> 3'd2);
end
/* main: %235*/
/*   store i32 %241, i32* %242, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_235_61))
begin
main_0_3_address_b = (main_235_242_reg >>> 3'd2);
end
/* main: %293*/
/*   %301 = load i32* %300, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_293_83))
begin
main_0_3_address_b = (main_293_300 >>> 3'd2);
end
end
always @(*) begin
main_0_3_write_enable_b = 1'd0;
/* main: %221*/
/*   %231 = load i32* %230, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_221_56))
begin
main_0_3_write_enable_b = 1'd0;
end
/* main: %235*/
/*   %238 = load i32* %237, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_235_60))
begin
main_0_3_write_enable_b = 1'd0;
end
/* main: %235*/
/*   store i32 %241, i32* %242, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_235_61))
begin
main_0_3_write_enable_b = 1'd1;
end
/* main: %293*/
/*   %301 = load i32* %300, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_293_83))
begin
main_0_3_write_enable_b = 1'd0;
end
end
always @(*) begin
main_0_3_in_b = 1'd0;
/* main: %235*/
/*   store i32 %241, i32* %242, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_235_61))
begin
main_0_3_in_b = main_235_241;
end
end
always @(*) begin
main_0_4_address_a = 1'd0;
/* main: %.loopexit*/
/*   store i32 -1, i32* %scevgep78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__loopexit_50))
begin
main_0_4_address_a = (main__loopexit_scevgep78 >>> 3'd2);
end
/* main: %218*/
/*   store i32 0, i32* %213, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_52))
begin
main_0_4_address_a = (main_0_213_reg >>> 3'd2);
end
/* main: %221*/
/*   %229 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_221_56))
begin
main_0_4_address_a = (main_221_228 >>> 3'd2);
end
/* main: %235*/
/*   %244 = load i32* %243, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_235_60))
begin
main_0_4_address_a = (main_235_243 >>> 3'd2);
end
/* main: %235*/
/*   store i32 %247, i32* %248, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_235_61))
begin
main_0_4_address_a = (main_235_248_reg >>> 3'd2);
end
/* main: %293*/
/*   %306 = load i32* %305, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_293_83))
begin
main_0_4_address_a = (main_293_305 >>> 3'd2);
end
end
always @(*) begin
main_0_4_write_enable_a = 1'd0;
/* main: %.loopexit*/
/*   store i32 -1, i32* %scevgep78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__loopexit_50))
begin
main_0_4_write_enable_a = 1'd1;
end
/* main: %218*/
/*   store i32 0, i32* %213, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_52))
begin
main_0_4_write_enable_a = 1'd1;
end
/* main: %221*/
/*   %229 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_221_56))
begin
main_0_4_write_enable_a = 1'd0;
end
/* main: %235*/
/*   %244 = load i32* %243, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_235_60))
begin
main_0_4_write_enable_a = 1'd0;
end
/* main: %235*/
/*   store i32 %247, i32* %248, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_235_61))
begin
main_0_4_write_enable_a = 1'd1;
end
/* main: %293*/
/*   %306 = load i32* %305, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_293_83))
begin
main_0_4_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_4_in_a = 1'd0;
/* main: %.loopexit*/
/*   store i32 -1, i32* %scevgep78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__loopexit_50))
begin
main_0_4_in_a = -32'd1;
end
/* main: %218*/
/*   store i32 0, i32* %213, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_52))
begin
main_0_4_in_a = 32'd0;
end
/* main: %235*/
/*   store i32 %247, i32* %248, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_235_61))
begin
main_0_4_in_a = main_235_247;
end
end
always @(*) begin
main_0_4_address_b = 1'd0;
/* main: %279*/
/*   store i32 %272, i32* %281, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_279_75))
begin
main_0_4_address_b = (main_279_281 >>> 3'd2);
end
/* main: %293*/
/*   %308 = load i32* %307, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_293_83))
begin
main_0_4_address_b = (main_293_307 >>> 3'd2);
end
end
always @(*) begin
main_0_4_write_enable_b = 1'd0;
/* main: %279*/
/*   store i32 %272, i32* %281, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_279_75))
begin
main_0_4_write_enable_b = 1'd1;
end
/* main: %293*/
/*   %308 = load i32* %307, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_293_83))
begin
main_0_4_write_enable_b = 1'd0;
end
end
always @(*) begin
main_0_4_in_b = 1'd0;
/* main: %279*/
/*   store i32 %272, i32* %281, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_279_75))
begin
main_0_4_in_b = main_266_272_reg;
end
end
always @(*) begin
main_0_5_address_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 -1, i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_44))
begin
main_0_5_address_a = (main__preheader31_scevgep58 >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %scevgep58.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_45))
begin
main_0_5_address_a = (main__preheader31_scevgep58_2_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %scevgep58.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_46))
begin
main_0_5_address_a = (main__preheader31_scevgep58_4_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %scevgep58.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_47))
begin
main_0_5_address_a = (main__preheader31_scevgep58_6_reg >>> 3'd2);
end
/* main: %218*/
/*   store i32 0, i32* %214, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_52))
begin
main_0_5_address_a = (main_0_214_reg >>> 3'd2);
end
/* main: %266*/
/*   %275 = load i32* %274, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_266_73))
begin
main_0_5_address_a = (main_266_274 >>> 3'd2);
end
/* main: %279*/
/*   store i32 %b.0, i32* %274, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_279_75))
begin
main_0_5_address_a = (main_266_274_reg >>> 3'd2);
end
/* main: %.preheader*/
/*   %325 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_118))
begin
main_0_5_address_a = (main__preheader_scevgep >>> 3'd2);
end
/* main: %.preheader*/
/*   %329 = load i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_119))
begin
main_0_5_address_a = (main__preheader_scevgep_2_reg >>> 3'd2);
end
/* main: %.preheader*/
/*   %333 = load i32* %scevgep.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_120))
begin
main_0_5_address_a = (main__preheader_scevgep_4_reg >>> 3'd2);
end
/* main: %.preheader*/
/*   %337 = load i32* %scevgep.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_121))
begin
main_0_5_address_a = (main__preheader_scevgep_6_reg >>> 3'd2);
end
end
always @(*) begin
main_0_5_write_enable_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 -1, i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_44))
begin
main_0_5_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %scevgep58.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_45))
begin
main_0_5_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %scevgep58.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_46))
begin
main_0_5_write_enable_a = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %scevgep58.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_47))
begin
main_0_5_write_enable_a = 1'd1;
end
/* main: %218*/
/*   store i32 0, i32* %214, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_52))
begin
main_0_5_write_enable_a = 1'd1;
end
/* main: %266*/
/*   %275 = load i32* %274, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_266_73))
begin
main_0_5_write_enable_a = 1'd0;
end
/* main: %279*/
/*   store i32 %b.0, i32* %274, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_279_75))
begin
main_0_5_write_enable_a = 1'd1;
end
/* main: %.preheader*/
/*   %325 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_118))
begin
main_0_5_write_enable_a = 1'd0;
end
/* main: %.preheader*/
/*   %329 = load i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_119))
begin
main_0_5_write_enable_a = 1'd0;
end
/* main: %.preheader*/
/*   %333 = load i32* %scevgep.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_120))
begin
main_0_5_write_enable_a = 1'd0;
end
/* main: %.preheader*/
/*   %337 = load i32* %scevgep.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_121))
begin
main_0_5_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_5_in_a = 1'd0;
/* main: %.preheader31*/
/*   store i32 -1, i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_44))
begin
main_0_5_in_a = -32'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %scevgep58.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_45))
begin
main_0_5_in_a = -32'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %scevgep58.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_46))
begin
main_0_5_in_a = -32'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %scevgep58.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_47))
begin
main_0_5_in_a = -32'd1;
end
/* main: %218*/
/*   store i32 0, i32* %214, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_218_52))
begin
main_0_5_in_a = 32'd0;
end
/* main: %279*/
/*   store i32 %b.0, i32* %274, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_279_75))
begin
main_0_5_in_a = main__backedge_b_0_reg;
end
end
always @(*) begin
main_0_5_address_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 -1, i32* %scevgep58.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_44))
begin
main_0_5_address_b = (main__preheader31_scevgep58_1 >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %scevgep58.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_45))
begin
main_0_5_address_b = (main__preheader31_scevgep58_3_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %scevgep58.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_46))
begin
main_0_5_address_b = (main__preheader31_scevgep58_5_reg >>> 3'd2);
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %scevgep58.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_47))
begin
main_0_5_address_b = (main__preheader31_scevgep58_7_reg >>> 3'd2);
end
/* main: %235*/
/*   %251 = load i32* %250, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_235_62))
begin
main_0_5_address_b = (main_235_250 >>> 3'd2);
end
/* main: %255*/
/*   store i32 %a.0, i32* %250, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_255_64))
begin
main_0_5_address_b = (main_235_250_reg >>> 3'd2);
end
/* main: %.preheader*/
/*   %327 = load i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_118))
begin
main_0_5_address_b = (main__preheader_scevgep_1 >>> 3'd2);
end
/* main: %.preheader*/
/*   %331 = load i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_119))
begin
main_0_5_address_b = (main__preheader_scevgep_3_reg >>> 3'd2);
end
/* main: %.preheader*/
/*   %335 = load i32* %scevgep.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_120))
begin
main_0_5_address_b = (main__preheader_scevgep_5_reg >>> 3'd2);
end
/* main: %.preheader*/
/*   %339 = load i32* %scevgep.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_121))
begin
main_0_5_address_b = (main__preheader_scevgep_7_reg >>> 3'd2);
end
end
always @(*) begin
main_0_5_write_enable_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 -1, i32* %scevgep58.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_44))
begin
main_0_5_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %scevgep58.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_45))
begin
main_0_5_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %scevgep58.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_46))
begin
main_0_5_write_enable_b = 1'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %scevgep58.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_47))
begin
main_0_5_write_enable_b = 1'd1;
end
/* main: %235*/
/*   %251 = load i32* %250, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_235_62))
begin
main_0_5_write_enable_b = 1'd0;
end
/* main: %255*/
/*   store i32 %a.0, i32* %250, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_255_64))
begin
main_0_5_write_enable_b = 1'd1;
end
/* main: %.preheader*/
/*   %327 = load i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_118))
begin
main_0_5_write_enable_b = 1'd0;
end
/* main: %.preheader*/
/*   %331 = load i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_119))
begin
main_0_5_write_enable_b = 1'd0;
end
/* main: %.preheader*/
/*   %335 = load i32* %scevgep.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_120))
begin
main_0_5_write_enable_b = 1'd0;
end
/* main: %.preheader*/
/*   %339 = load i32* %scevgep.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader_121))
begin
main_0_5_write_enable_b = 1'd0;
end
end
always @(*) begin
main_0_5_in_b = 1'd0;
/* main: %.preheader31*/
/*   store i32 -1, i32* %scevgep58.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_44))
begin
main_0_5_in_b = -32'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %scevgep58.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_45))
begin
main_0_5_in_b = -32'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %scevgep58.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_46))
begin
main_0_5_in_b = -32'd1;
end
/* main: %.preheader31*/
/*   store i32 -1, i32* %scevgep58.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader31_47))
begin
main_0_5_in_b = -32'd1;
end
/* main: %255*/
/*   store i32 %a.0, i32* %250, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_255_64))
begin
main_0_5_in_b = main__backedge_a_0_reg;
end
end
always @(*) begin
main_0_6_address_a = 1'd0;
/* main: %215*/
/*   store i32 0, i32* %.sub13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_5))
begin
main_0_6_address_a = (main_0__sub13_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 0, i32* %160, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_6))
begin
main_0_6_address_a = (main_0_160_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 -1, i32* %164, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_7))
begin
main_0_6_address_a = (main_0_164_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 1, i32* %168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_8))
begin
main_0_6_address_a = (main_0_168_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 0, i32* %172, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_9))
begin
main_0_6_address_a = (main_0_172_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 0, i32* %176, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_10))
begin
main_0_6_address_a = (main_0_176_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 -1, i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_11))
begin
main_0_6_address_a = (main_0_180_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 1, i32* %184, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_12))
begin
main_0_6_address_a = (main_0_184_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 -2, i32* %188, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_13))
begin
main_0_6_address_a = (main_0_188_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 2, i32* %192, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_14))
begin
main_0_6_address_a = (main_0_192_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 0, i32* %196, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_15))
begin
main_0_6_address_a = (main_0_196_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 0, i32* %200, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_16))
begin
main_0_6_address_a = (main_0_200_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 1, i32* %204, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_17))
begin
main_0_6_address_a = (main_0_204_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 -1, i32* %208, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_18))
begin
main_0_6_address_a = (main_0_208_reg >>> 3'd2);
end
/* main: %235*/
/*   %240 = load i32* %239, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_235_59))
begin
main_0_6_address_a = (main_235_239 >>> 3'd2);
end
end
always @(*) begin
main_0_6_write_enable_a = 1'd0;
/* main: %215*/
/*   store i32 0, i32* %.sub13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_5))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 0, i32* %160, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_6))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 -1, i32* %164, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_7))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 1, i32* %168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_8))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 0, i32* %172, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_9))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 0, i32* %176, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_10))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 -1, i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_11))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 1, i32* %184, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_12))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 -2, i32* %188, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_13))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 2, i32* %192, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_14))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 0, i32* %196, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_15))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 0, i32* %200, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_16))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 1, i32* %204, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_17))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 -1, i32* %208, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_18))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %235*/
/*   %240 = load i32* %239, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_235_59))
begin
main_0_6_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_6_in_a = 1'd0;
/* main: %215*/
/*   store i32 0, i32* %.sub13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_5))
begin
main_0_6_in_a = 32'd0;
end
/* main: %215*/
/*   store i32 0, i32* %160, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_6))
begin
main_0_6_in_a = 32'd0;
end
/* main: %215*/
/*   store i32 -1, i32* %164, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_7))
begin
main_0_6_in_a = -32'd1;
end
/* main: %215*/
/*   store i32 1, i32* %168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_8))
begin
main_0_6_in_a = 32'd1;
end
/* main: %215*/
/*   store i32 0, i32* %172, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_9))
begin
main_0_6_in_a = 32'd0;
end
/* main: %215*/
/*   store i32 0, i32* %176, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_10))
begin
main_0_6_in_a = 32'd0;
end
/* main: %215*/
/*   store i32 -1, i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_11))
begin
main_0_6_in_a = -32'd1;
end
/* main: %215*/
/*   store i32 1, i32* %184, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_12))
begin
main_0_6_in_a = 32'd1;
end
/* main: %215*/
/*   store i32 -2, i32* %188, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_13))
begin
main_0_6_in_a = -32'd2;
end
/* main: %215*/
/*   store i32 2, i32* %192, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_14))
begin
main_0_6_in_a = 32'd2;
end
/* main: %215*/
/*   store i32 0, i32* %196, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_15))
begin
main_0_6_in_a = 32'd0;
end
/* main: %215*/
/*   store i32 0, i32* %200, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_16))
begin
main_0_6_in_a = 32'd0;
end
/* main: %215*/
/*   store i32 1, i32* %204, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_17))
begin
main_0_6_in_a = 32'd1;
end
/* main: %215*/
/*   store i32 -1, i32* %208, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_18))
begin
main_0_6_in_a = -32'd1;
end
end
always @(*) begin
main_0_6_address_b = 1'd0;
/* main: %215*/
/*   store i32 1, i32* %158, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_5))
begin
main_0_6_address_b = (main_0_158_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 -1, i32* %162, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_6))
begin
main_0_6_address_b = (main_0_162_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 1, i32* %166, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_7))
begin
main_0_6_address_b = (main_0_166_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 -1, i32* %170, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_8))
begin
main_0_6_address_b = (main_0_170_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 2, i32* %174, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_9))
begin
main_0_6_address_b = (main_0_174_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 -2, i32* %178, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_10))
begin
main_0_6_address_b = (main_0_178_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 1, i32* %182, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_11))
begin
main_0_6_address_b = (main_0_182_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 -1, i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_12))
begin
main_0_6_address_b = (main_0_186_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 2, i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_13))
begin
main_0_6_address_b = (main_0_190_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 -2, i32* %194, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_14))
begin
main_0_6_address_b = (main_0_194_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 4, i32* %198, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_15))
begin
main_0_6_address_b = (main_0_198_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 -4, i32* %202, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_16))
begin
main_0_6_address_b = (main_0_202_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 1, i32* %206, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_17))
begin
main_0_6_address_b = (main_0_206_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 -1, i32* %210, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_18))
begin
main_0_6_address_b = (main_0_210_reg >>> 3'd2);
end
/* main: %266*/
/*   %268 = load i32* %267, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_266_71))
begin
main_0_6_address_b = (main_266_267 >>> 3'd2);
end
end
always @(*) begin
main_0_6_write_enable_b = 1'd0;
/* main: %215*/
/*   store i32 1, i32* %158, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_5))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 -1, i32* %162, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_6))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 1, i32* %166, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_7))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 -1, i32* %170, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_8))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 2, i32* %174, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_9))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 -2, i32* %178, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_10))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 1, i32* %182, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_11))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 -1, i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_12))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 2, i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_13))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 -2, i32* %194, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_14))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 4, i32* %198, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_15))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 -4, i32* %202, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_16))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 1, i32* %206, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_17))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 -1, i32* %210, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_18))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %266*/
/*   %268 = load i32* %267, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_266_71))
begin
main_0_6_write_enable_b = 1'd0;
end
end
always @(*) begin
main_0_6_in_b = 1'd0;
/* main: %215*/
/*   store i32 1, i32* %158, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_5))
begin
main_0_6_in_b = 32'd1;
end
/* main: %215*/
/*   store i32 -1, i32* %162, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_6))
begin
main_0_6_in_b = -32'd1;
end
/* main: %215*/
/*   store i32 1, i32* %166, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_7))
begin
main_0_6_in_b = 32'd1;
end
/* main: %215*/
/*   store i32 -1, i32* %170, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_8))
begin
main_0_6_in_b = -32'd1;
end
/* main: %215*/
/*   store i32 2, i32* %174, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_9))
begin
main_0_6_in_b = 32'd2;
end
/* main: %215*/
/*   store i32 -2, i32* %178, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_10))
begin
main_0_6_in_b = -32'd2;
end
/* main: %215*/
/*   store i32 1, i32* %182, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_11))
begin
main_0_6_in_b = 32'd1;
end
/* main: %215*/
/*   store i32 -1, i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_12))
begin
main_0_6_in_b = -32'd1;
end
/* main: %215*/
/*   store i32 2, i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_13))
begin
main_0_6_in_b = 32'd2;
end
/* main: %215*/
/*   store i32 -2, i32* %194, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_14))
begin
main_0_6_in_b = -32'd2;
end
/* main: %215*/
/*   store i32 4, i32* %198, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_15))
begin
main_0_6_in_b = 32'd4;
end
/* main: %215*/
/*   store i32 -4, i32* %202, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_16))
begin
main_0_6_in_b = -32'd4;
end
/* main: %215*/
/*   store i32 1, i32* %206, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_17))
begin
main_0_6_in_b = 32'd1;
end
/* main: %215*/
/*   store i32 -1, i32* %210, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_18))
begin
main_0_6_in_b = -32'd1;
end
end
always @(*) begin
main_0_7_address_a = 1'd0;
/* main: %215*/
/*   store i32 1, i32* %.sub14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_5))
begin
main_0_7_address_a = (main_0__sub14_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 -1, i32* %161, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_6))
begin
main_0_7_address_a = (main_0_161_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 1, i32* %165, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_7))
begin
main_0_7_address_a = (main_0_165_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 -1, i32* %169, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_8))
begin
main_0_7_address_a = (main_0_169_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 2, i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_9))
begin
main_0_7_address_a = (main_0_173_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 -2, i32* %177, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_10))
begin
main_0_7_address_a = (main_0_177_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 2, i32* %181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_11))
begin
main_0_7_address_a = (main_0_181_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 -2, i32* %185, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_12))
begin
main_0_7_address_a = (main_0_185_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 1, i32* %189, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_13))
begin
main_0_7_address_a = (main_0_189_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 -1, i32* %193, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_14))
begin
main_0_7_address_a = (main_0_193_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 4, i32* %197, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_15))
begin
main_0_7_address_a = (main_0_197_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 -4, i32* %201, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_16))
begin
main_0_7_address_a = (main_0_201_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 3, i32* %205, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_17))
begin
main_0_7_address_a = (main_0_205_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 -3, i32* %209, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_18))
begin
main_0_7_address_a = (main_0_209_reg >>> 3'd2);
end
/* main: %235*/
/*   %246 = load i32* %245, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_235_59))
begin
main_0_7_address_a = (main_235_245 >>> 3'd2);
end
end
always @(*) begin
main_0_7_write_enable_a = 1'd0;
/* main: %215*/
/*   store i32 1, i32* %.sub14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_5))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 -1, i32* %161, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_6))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 1, i32* %165, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_7))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 -1, i32* %169, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_8))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 2, i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_9))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 -2, i32* %177, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_10))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 2, i32* %181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_11))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 -2, i32* %185, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_12))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 1, i32* %189, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_13))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 -1, i32* %193, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_14))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 4, i32* %197, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_15))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 -4, i32* %201, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_16))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 3, i32* %205, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_17))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %215*/
/*   store i32 -3, i32* %209, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_18))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %235*/
/*   %246 = load i32* %245, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_235_59))
begin
main_0_7_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_7_in_a = 1'd0;
/* main: %215*/
/*   store i32 1, i32* %.sub14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_5))
begin
main_0_7_in_a = 32'd1;
end
/* main: %215*/
/*   store i32 -1, i32* %161, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_6))
begin
main_0_7_in_a = -32'd1;
end
/* main: %215*/
/*   store i32 1, i32* %165, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_7))
begin
main_0_7_in_a = 32'd1;
end
/* main: %215*/
/*   store i32 -1, i32* %169, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_8))
begin
main_0_7_in_a = -32'd1;
end
/* main: %215*/
/*   store i32 2, i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_9))
begin
main_0_7_in_a = 32'd2;
end
/* main: %215*/
/*   store i32 -2, i32* %177, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_10))
begin
main_0_7_in_a = -32'd2;
end
/* main: %215*/
/*   store i32 2, i32* %181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_11))
begin
main_0_7_in_a = 32'd2;
end
/* main: %215*/
/*   store i32 -2, i32* %185, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_12))
begin
main_0_7_in_a = -32'd2;
end
/* main: %215*/
/*   store i32 1, i32* %189, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_13))
begin
main_0_7_in_a = 32'd1;
end
/* main: %215*/
/*   store i32 -1, i32* %193, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_14))
begin
main_0_7_in_a = -32'd1;
end
/* main: %215*/
/*   store i32 4, i32* %197, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_15))
begin
main_0_7_in_a = 32'd4;
end
/* main: %215*/
/*   store i32 -4, i32* %201, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_16))
begin
main_0_7_in_a = -32'd4;
end
/* main: %215*/
/*   store i32 3, i32* %205, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_17))
begin
main_0_7_in_a = 32'd3;
end
/* main: %215*/
/*   store i32 -3, i32* %209, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_18))
begin
main_0_7_in_a = -32'd3;
end
end
always @(*) begin
main_0_7_address_b = 1'd0;
/* main: %215*/
/*   store i32 0, i32* %159, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_5))
begin
main_0_7_address_b = (main_0_159_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 0, i32* %163, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_6))
begin
main_0_7_address_b = (main_0_163_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 1, i32* %167, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_7))
begin
main_0_7_address_b = (main_0_167_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 -1, i32* %171, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_8))
begin
main_0_7_address_b = (main_0_171_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 0, i32* %175, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_9))
begin
main_0_7_address_b = (main_0_175_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 0, i32* %179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_10))
begin
main_0_7_address_b = (main_0_179_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 2, i32* %183, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_11))
begin
main_0_7_address_b = (main_0_183_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 -2, i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_12))
begin
main_0_7_address_b = (main_0_187_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 1, i32* %191, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_13))
begin
main_0_7_address_b = (main_0_191_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 -1, i32* %195, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_14))
begin
main_0_7_address_b = (main_0_195_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 0, i32* %199, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_15))
begin
main_0_7_address_b = (main_0_199_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 0, i32* %203, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_16))
begin
main_0_7_address_b = (main_0_203_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 -3, i32* %207, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_17))
begin
main_0_7_address_b = (main_0_207_reg >>> 3'd2);
end
/* main: %215*/
/*   store i32 3, i32* %211, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_18))
begin
main_0_7_address_b = (main_0_211_reg >>> 3'd2);
end
/* main: %266*/
/*   %271 = load i32* %270, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_266_71))
begin
main_0_7_address_b = (main_266_270 >>> 3'd2);
end
end
always @(*) begin
main_0_7_write_enable_b = 1'd0;
/* main: %215*/
/*   store i32 0, i32* %159, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_5))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 0, i32* %163, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_6))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 1, i32* %167, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_7))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 -1, i32* %171, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_8))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 0, i32* %175, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_9))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 0, i32* %179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_10))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 2, i32* %183, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_11))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 -2, i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_12))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 1, i32* %191, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_13))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 -1, i32* %195, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_14))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 0, i32* %199, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_15))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 0, i32* %203, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_16))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 -3, i32* %207, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_17))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %215*/
/*   store i32 3, i32* %211, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_18))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %266*/
/*   %271 = load i32* %270, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_266_71))
begin
main_0_7_write_enable_b = 1'd0;
end
end
always @(*) begin
main_0_7_in_b = 1'd0;
/* main: %215*/
/*   store i32 0, i32* %159, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_5))
begin
main_0_7_in_b = 32'd0;
end
/* main: %215*/
/*   store i32 0, i32* %163, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_6))
begin
main_0_7_in_b = 32'd0;
end
/* main: %215*/
/*   store i32 1, i32* %167, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_7))
begin
main_0_7_in_b = 32'd1;
end
/* main: %215*/
/*   store i32 -1, i32* %171, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_8))
begin
main_0_7_in_b = -32'd1;
end
/* main: %215*/
/*   store i32 0, i32* %175, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_9))
begin
main_0_7_in_b = 32'd0;
end
/* main: %215*/
/*   store i32 0, i32* %179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_10))
begin
main_0_7_in_b = 32'd0;
end
/* main: %215*/
/*   store i32 2, i32* %183, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_11))
begin
main_0_7_in_b = 32'd2;
end
/* main: %215*/
/*   store i32 -2, i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_12))
begin
main_0_7_in_b = -32'd2;
end
/* main: %215*/
/*   store i32 1, i32* %191, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_13))
begin
main_0_7_in_b = 32'd1;
end
/* main: %215*/
/*   store i32 -1, i32* %195, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_14))
begin
main_0_7_in_b = -32'd1;
end
/* main: %215*/
/*   store i32 0, i32* %199, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_15))
begin
main_0_7_in_b = 32'd0;
end
/* main: %215*/
/*   store i32 0, i32* %203, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_16))
begin
main_0_7_in_b = 32'd0;
end
/* main: %215*/
/*   store i32 -3, i32* %207, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_17))
begin
main_0_7_in_b = -32'd3;
end
/* main: %215*/
/*   store i32 3, i32* %211, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_18))
begin
main_0_7_in_b = 32'd3;
end
end
always @(*) begin
/* main: %293*/
/*   %315 = sdiv i32 %.27, 2*/
if ((cur_state == LEGUP_F_main_BB_293_84))
begin
main_signed_divide_32_0_op0 = main_293__27;
end
/* main: %293*/
/*   %317 = sdiv i32 %diff_pos_y.0, 2*/
else /* if ((cur_state == LEGUP_F_main_BB_293_85)) */
begin
main_signed_divide_32_0_op0 = main_293_diff_pos_y_0_reg;
end
end
always @(*) begin
/* main: %293*/
/*   %315 = sdiv i32 %.27, 2*/
if ((cur_state == LEGUP_F_main_BB_293_84))
begin
main_signed_divide_32_0_op1 = 32'd2;
end
/* main: %293*/
/*   %317 = sdiv i32 %diff_pos_y.0, 2*/
else /* if ((cur_state == LEGUP_F_main_BB_293_85)) */
begin
main_signed_divide_32_0_op1 = 32'd2;
end
end
always @(*) begin
lpm_divide_main_293_315_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_main_293_315_out = lpm_divide_main_293_315_temp_out;
end
always @(*) begin
main_signed_divide_32_0 = lpm_divide_main_293_315_out;
end
always @(*) begin
/* main: %293*/
/*   %316 = srem i32 %.27, 2*/
begin
main_signed_modulus_32_0_op0 = main_293__27;
end
end
always @(*) begin
/* main: %293*/
/*   %316 = srem i32 %.27, 2*/
if (reset) begin main_signed_modulus_32_0_op1 = 0; end
begin
main_signed_modulus_32_0_op1 = 32'd2;
end
end
always @(*) begin
lpm_divide_main_293_316_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_main_293_316_out = lpm_divide_main_293_316_temp_out;
end
always @(*) begin
main_signed_modulus_32_0 = lpm_divide_main_293_316_out;
end
always @(*) begin
/* main: %293*/
/*   %318 = srem i32 %diff_pos_y.0, 2*/
begin
main_signed_modulus_32_1_op0 = main_293_diff_pos_y_0;
end
end
always @(*) begin
/* main: %293*/
/*   %318 = srem i32 %diff_pos_y.0, 2*/
if (reset) begin main_signed_modulus_32_1_op1 = 0; end
begin
main_signed_modulus_32_1_op1 = 32'd2;
end
end
always @(*) begin
lpm_divide_main_293_318_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_main_293_318_out = lpm_divide_main_293_318_temp_out;
end
always @(*) begin
main_signed_modulus_32_1 = lpm_divide_main_293_318_out;
end
always @(*) begin
lpm_divide_main_293_317_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %345*/
/*   ret i32 %.0*/
if ((cur_state == LEGUP_F_main_BB_345_124))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %345*/
/*   ret i32 %.0*/
if ((cur_state == LEGUP_F_main_BB_345_124))
begin
return_val <= main_345__0_reg;
if (reset == 1'b0 && ^(main_345__0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
