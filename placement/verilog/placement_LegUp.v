//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Fri Feb 14 11:56:42 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 7
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_main_BB_0_1 = 7'd1;
parameter [6:0] LEGUP_F_main_BB__backedge_2 = 7'd2;
parameter [6:0] LEGUP_F_main_BB__backedge_backedge_3 = 7'd3;
parameter [6:0] LEGUP_F_main_BB__preheader22_4 = 7'd4;
parameter [6:0] LEGUP_F_main_BB__preheader22_5 = 7'd5;
parameter [6:0] LEGUP_F_main_BB__preheader22_6 = 7'd6;
parameter [6:0] LEGUP_F_main_BB__preheader22_7 = 7'd7;
parameter [6:0] LEGUP_F_main_BB__preheader22_8 = 7'd8;
parameter [6:0] LEGUP_F_main_BB__preheader22_9 = 7'd9;
parameter [6:0] LEGUP_F_main_BB__preheader22_10 = 7'd10;
parameter [6:0] LEGUP_F_main_BB__preheader22_11 = 7'd11;
parameter [6:0] LEGUP_F_main_BB__preheader22_12 = 7'd12;
parameter [6:0] LEGUP_F_main_BB__preheader24_13 = 7'd13;
parameter [6:0] LEGUP_F_main_BB__preheader24_14 = 7'd14;
parameter [6:0] LEGUP_F_main_BB__preheader24_15 = 7'd15;
parameter [6:0] LEGUP_F_main_BB__preheader24_16 = 7'd16;
parameter [6:0] LEGUP_F_main_BB__preheader24_17 = 7'd17;
parameter [6:0] LEGUP_F_main_BB__preheader24_18 = 7'd18;
parameter [6:0] LEGUP_F_main_BB__preheader24_19 = 7'd19;
parameter [6:0] LEGUP_F_main_BB__preheader24_20 = 7'd20;
parameter [6:0] LEGUP_F_main_BB__preheader24_21 = 7'd21;
parameter [6:0] LEGUP_F_main_BB__preheader24_22 = 7'd22;
parameter [6:0] LEGUP_F_main_BB__preheader24_23 = 7'd23;
parameter [6:0] LEGUP_F_main_BB__preheader24_24 = 7'd24;
parameter [6:0] LEGUP_F_main_BB__preheader24_25 = 7'd25;
parameter [6:0] LEGUP_F_main_BB__preheader24_26 = 7'd26;
parameter [6:0] LEGUP_F_main_BB__preheader24_27 = 7'd27;
parameter [6:0] LEGUP_F_main_BB_127_28 = 7'd28;
parameter [6:0] LEGUP_F_main_BB_130_29 = 7'd29;
parameter [6:0] LEGUP_F_main_BB_130_30 = 7'd30;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4_exit_31 = 7'd31;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4_exit_32 = 7'd32;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4_exit_33 = 7'd33;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4_exit_34 = 7'd34;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4_exit_35 = 7'd35;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4_exit_36 = 7'd36;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4_exit_37 = 7'd37;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4_exit_38 = 7'd38;
parameter [6:0] LEGUP_F_main_BB_133_39 = 7'd39;
parameter [6:0] LEGUP_F_main_BB_136_40 = 7'd40;
parameter [6:0] LEGUP_F_main_BB_136_41 = 7'd41;
parameter [6:0] LEGUP_F_main_BB_136_42 = 7'd42;
parameter [6:0] LEGUP_F_main_BB_148_43 = 7'd43;
parameter [6:0] LEGUP_F_main_BB_151_44 = 7'd44;
parameter [6:0] LEGUP_F_main_BB_151_45 = 7'd45;
parameter [6:0] LEGUP_F_main_BB_151_46 = 7'd46;
parameter [6:0] LEGUP_F_main_BB_151_47 = 7'd47;
parameter [6:0] LEGUP_F_main_BB_151_48 = 7'd48;
parameter [6:0] LEGUP_F_main_BB_173_49 = 7'd49;
parameter [6:0] LEGUP_F_main_BB_173_50 = 7'd50;
parameter [6:0] LEGUP_F_main_BB_174_51 = 7'd51;
parameter [6:0] LEGUP_F_main_BB_176_52 = 7'd52;
parameter [6:0] LEGUP_F_main_BB_178_53 = 7'd53;
parameter [6:0] LEGUP_F_main_BB_180_54 = 7'd54;
parameter [6:0] LEGUP_F_main_BB_183_55 = 7'd55;
parameter [6:0] LEGUP_F_main_BB_185_56 = 7'd56;
parameter [6:0] LEGUP_F_main_BB_185_57 = 7'd57;
parameter [6:0] LEGUP_F_main_BB_185_58 = 7'd58;
parameter [6:0] LEGUP_F_main_BB_185_59 = 7'd59;
parameter [6:0] LEGUP_F_main_BB_200_60 = 7'd60;
parameter [6:0] LEGUP_F_main_BB_200_61 = 7'd61;
parameter [6:0] LEGUP_F_main_BB_204_62 = 7'd62;
parameter [6:0] LEGUP_F_main_BB_206_63 = 7'd63;
parameter [6:0] LEGUP_F_main_BB_208_64 = 7'd64;
parameter [6:0] LEGUP_F_main_BB_211_65 = 7'd65;
parameter [6:0] LEGUP_F_main_BB_212_66 = 7'd66;
parameter [6:0] LEGUP_F_main_BB_215_67 = 7'd67;
parameter [6:0] LEGUP_F_main_BB_215_68 = 7'd68;
parameter [6:0] LEGUP_F_main_BB_215_69 = 7'd69;
parameter [6:0] LEGUP_F_main_BB_215_70 = 7'd70;
parameter [6:0] LEGUP_F_main_BB_236_71 = 7'd71;
parameter [6:0] LEGUP_F_main_BB_239_72 = 7'd72;
parameter [6:0] LEGUP_F_main_BB_241_73 = 7'd73;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [6:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0__sub14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_43_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_46_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_47;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_53;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_53_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_55_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_56_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_57_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_59_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_62_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_66_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_67;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_67_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_68;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_70_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_72_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_74;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_75_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_76_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_77;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_77_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_79_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_80;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_80_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_81_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_83;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_83_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_84;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_84_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_85_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_86_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_87;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_87_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_88;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_88_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_89;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_89_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep55_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_scevgep56_13_reg;
reg [31:0] main__backedge_b_0;
reg [31:0] main__backedge_b_0_reg;
reg [31:0] main__backedge_a_0;
reg [31:0] main__backedge_a_0_reg;
reg [31:0] main__backedge_pos_b_X_0;
reg [31:0] main__backedge_pos_b_X_0_reg;
reg [31:0] main__backedge_pos_a_Y_0;
reg [31:0] main__backedge_pos_a_Y_0_reg;
reg [31:0] main__backedge_pos_a_X_0;
reg [31:0] main__backedge_pos_a_X_0_reg;
reg [31:0] main__backedge_j_0;
reg [31:0] main__backedge_j_0_reg;
reg [31:0] main__backedge_i_0;
reg [31:0] main__backedge_i_0_reg;
reg [31:0] main__backedge_state_0;
reg [31:0] main__backedge_state_0_reg;
reg [31:0] main__backedge_sum_0;
reg [31:0] main__backedge_sum_0_reg;
reg [31:0] main__backedge_backedge_b_0_be;
reg [31:0] main__backedge_backedge_b_0_be_reg;
reg [31:0] main__backedge_backedge_a_0_be;
reg [31:0] main__backedge_backedge_a_0_be_reg;
reg [31:0] main__backedge_backedge_pos_b_X_0_be;
reg [31:0] main__backedge_backedge_pos_b_X_0_be_reg;
reg [31:0] main__backedge_backedge_pos_a_Y_0_be;
reg [31:0] main__backedge_backedge_pos_a_Y_0_be_reg;
reg [31:0] main__backedge_backedge_pos_a_X_0_be;
reg [31:0] main__backedge_backedge_pos_a_X_0_be_reg;
reg [31:0] main__backedge_backedge_j_0_be;
reg [31:0] main__backedge_backedge_j_0_be_reg;
reg [31:0] main__backedge_backedge_i_0_be;
reg [31:0] main__backedge_backedge_i_0_be_reg;
reg [31:0] main__backedge_backedge_state_0_be;
reg [31:0] main__backedge_backedge_state_0_be_reg;
reg [31:0] main__backedge_backedge_sum_0_be;
reg [31:0] main__backedge_backedge_sum_0_be_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_3_reg;
reg [31:0] main__preheader22_90;
reg [31:0] main__preheader22_90_reg;
reg [31:0] main__preheader22_92;
reg [31:0] main__preheader22_92_reg;
reg [31:0] main__preheader22_94;
reg [31:0] main__preheader22_94_reg;
reg [31:0] main__preheader22_96;
reg [31:0] main__preheader22_96_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_1_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_1_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_2_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_2_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_3_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_3_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_139;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_139_reg;
reg [31:0] main__preheader22_99;
reg [31:0] main__preheader22_99_reg;
reg [31:0] main__preheader22_101;
reg [31:0] main__preheader22_101_reg;
reg [31:0] main__preheader22_103;
reg [31:0] main__preheader22_103_reg;
reg [31:0] main__preheader22_105;
reg [31:0] main__preheader22_105_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_1_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_1_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_2_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_2_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_3_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_3_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_240;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_240_reg;
reg [31:0] main__preheader22_108;
reg [31:0] main__preheader22_108_reg;
reg [31:0] main__preheader22_110;
reg [31:0] main__preheader22_110_reg;
reg [31:0] main__preheader22_112;
reg [31:0] main__preheader22_112_reg;
reg [31:0] main__preheader22_114;
reg [31:0] main__preheader22_114_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_1_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_1_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_2_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_2_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_3_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_3_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_341;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader22_scevgep_341_reg;
reg [31:0] main__preheader22_117;
reg [31:0] main__preheader22_117_reg;
reg [31:0] main__preheader22_119;
reg [31:0] main__preheader22_119_reg;
reg [31:0] main__preheader22_121;
reg [31:0] main__preheader22_121_reg;
reg [31:0] main__preheader22_123;
reg [31:0] main__preheader22_123_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_127_s_i_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_127_s_i_0_reg;
reg [31:0] main_127_128;
reg [31:0] main_127_128_reg;
reg  main_127_129;
reg  main_127_129_reg;
reg [31:0] main_130_131;
reg [31:0] main_130_131_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_130_132;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_130_132_reg;
reg  main_133_135;
reg  main_133_135_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_136_137;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_136_137_reg;
reg [31:0] main_136_138;
reg [31:0] main_136_138_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_136_139;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_136_139_reg;
reg [31:0] main_136_140;
reg [31:0] main_136_140_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_136_141;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_136_141_reg;
reg [31:0] main_136_142;
reg [31:0] main_136_142_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_136_143;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_136_143_reg;
reg [31:0] main_136_144;
reg [31:0] main_136_144_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_136_145;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_136_145_reg;
reg [31:0] main_136_146;
reg [31:0] main_136_146_reg;
reg  main_136_147;
reg  main_136_147_reg;
reg [31:0] main_136__;
reg [31:0] main_136___reg;
reg  main_148_150;
reg  main_148_150_reg;
reg [31:0] main_151_152;
reg [31:0] main_151_152_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_151_153;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_151_153_reg;
reg [31:0] main_151_154;
reg [31:0] main_151_154_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_151_155;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_151_155_reg;
reg [31:0] main_151_156;
reg [31:0] main_151_156_reg;
reg [31:0] main_151_157;
reg [31:0] main_151_157_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_151_158;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_151_158_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_151_159;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_151_159_reg;
reg [31:0] main_151_160;
reg [31:0] main_151_160_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_151_161;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_151_161_reg;
reg [31:0] main_151_162;
reg [31:0] main_151_162_reg;
reg [31:0] main_151_163;
reg [31:0] main_151_163_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_151_164;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_151_164_reg;
reg [31:0] main_151_165;
reg [31:0] main_151_165_reg;
reg [31:0] main_151_166;
reg [31:0] main_151_166_reg;
reg [31:0] main_151_167;
reg [31:0] main_151_167_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_151_168;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_151_168_reg;
reg [31:0] main_151_169;
reg [31:0] main_151_169_reg;
reg  main_151_170;
reg  main_151_170_reg;
reg  main_151_171;
reg  main_151_171_reg;
reg  main_151_or_cond;
reg  main_151_or_cond_reg;
reg  main_151_172;
reg  main_151_172_reg;
reg  main_151_or_cond15;
reg  main_151_or_cond15_reg;
reg  main_174_175;
reg  main_174_175_reg;
reg [31:0] main_178_pos_a_Y_1;
reg [31:0] main_178_pos_a_Y_1_reg;
reg [31:0] main_178_pos_a_X_1;
reg [31:0] main_178_pos_a_X_1_reg;
reg  main_178_179;
reg  main_178_179_reg;
reg [31:0] main_178__16;
reg [31:0] main_178__16_reg;
reg [31:0] main_178__17;
reg [31:0] main_178__17_reg;
reg  main_180_182;
reg  main_180_182_reg;
reg [31:0] main_183_184;
reg [31:0] main_183_184_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_185_186;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_185_186_reg;
reg [31:0] main_185_187;
reg [31:0] main_185_187_reg;
reg [31:0] main_185_188;
reg [31:0] main_185_188_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_185_189;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_185_189_reg;
reg [31:0] main_185_190;
reg [31:0] main_185_190_reg;
reg [31:0] main_185_191;
reg [31:0] main_185_191_reg;
reg [31:0] main_185_192;
reg [31:0] main_185_192_reg;
reg [31:0] main_185_193;
reg [31:0] main_185_193_reg;
reg [31:0] main_185_194;
reg [31:0] main_185_194_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_185_195;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_185_195_reg;
reg [31:0] main_185_196;
reg [31:0] main_185_196_reg;
reg  main_185_197;
reg  main_185_197_reg;
reg  main_185_198;
reg  main_185_198_reg;
reg  main_185_or_cond18;
reg  main_185_or_cond18_reg;
reg  main_185_199;
reg  main_185_199_reg;
reg  main_185_or_cond19;
reg  main_185_or_cond19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_200_201;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_200_201_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_200_202;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_200_202_reg;
reg [31:0] main_200_203;
reg [31:0] main_200_203_reg;
reg  main_204_205;
reg  main_204_205_reg;
reg [31:0] main_208_209;
reg [31:0] main_208_209_reg;
reg [31:0] main_208_210;
reg [31:0] main_208_210_reg;
reg [31:0] main_208_i_0_;
reg [31:0] main_208_i_0__reg;
reg  main_212_214;
reg  main_212_214_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_215_216;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_215_216_reg;
reg [31:0] main_215_217;
reg [31:0] main_215_217_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_215_218;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_215_218_reg;
reg [31:0] main_215_219;
reg [31:0] main_215_219_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_215_220;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_215_220_reg;
reg [31:0] main_215_221;
reg [31:0] main_215_221_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_215_222;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_215_222_reg;
reg [31:0] main_215_223;
reg [31:0] main_215_223_reg;
reg [31:0] main_215_224;
reg [31:0] main_215_224_reg;
reg [31:0] main_215_225;
reg [31:0] main_215_225_reg;
reg  main_215_226;
reg  main_215_226_reg;
reg [31:0] main_215__20;
reg [31:0] main_215__20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_215_227;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_215_227_reg;
reg [31:0] main_215_228;
reg [31:0] main_215_228_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_215_229;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_215_229_reg;
reg [31:0] main_215_230;
reg [31:0] main_215_230_reg;
reg [31:0] main_215_231;
reg [31:0] main_215_231_reg;
reg  main_215_232;
reg  main_215_232_reg;
reg [31:0] main_215_233;
reg [31:0] main_215_233_reg;
reg [31:0] main_215_diff_pos_y_0;
reg [31:0] main_215_diff_pos_y_0_reg;
reg [31:0] main_215_234;
reg [31:0] main_215_234_reg;
reg  main_215_235;
reg  main_215_235_reg;
reg [31:0] main_236_237;
reg [31:0] main_236_237_reg;
reg [31:0] main_236_238;
reg [31:0] main_236_238_reg;
reg [31:0] main_239_sum_1;
reg [31:0] main_239_sum_1_reg;
reg [31:0] main_239_240;
reg [31:0] main_239_240_reg;
reg [31:0] main_241__0;
reg [31:0] main_241__0_reg;
reg [3:0] main_0_1_address_a;
reg  main_0_1_write_enable_a;
reg [31:0] main_0_1_in_a;
wire [31:0] main_0_1_out_a;
reg [3:0] main_0_1_address_b;
reg  main_0_1_write_enable_b;
reg [31:0] main_0_1_in_b;
wire [31:0] main_0_1_out_b;
reg [3:0] main_0_2_address_a;
reg  main_0_2_write_enable_a;
reg [31:0] main_0_2_in_a;
wire [31:0] main_0_2_out_a;
reg [3:0] main_0_2_address_b;
reg  main_0_2_write_enable_b;
reg [31:0] main_0_2_in_b;
wire [31:0] main_0_2_out_b;
reg [3:0] main_0_3_address_a;
reg  main_0_3_write_enable_a;
reg [31:0] main_0_3_in_a;
wire [31:0] main_0_3_out_a;
reg [3:0] main_0_3_address_b;
reg  main_0_3_write_enable_b;
reg [31:0] main_0_3_in_b;
wire [31:0] main_0_3_out_b;
reg [3:0] main_0_4_address_a;
reg  main_0_4_write_enable_a;
reg [31:0] main_0_4_in_a;
wire [31:0] main_0_4_out_a;
reg [3:0] main_0_4_address_b;
reg  main_0_4_write_enable_b;
reg [31:0] main_0_4_in_b;
wire [31:0] main_0_4_out_b;
reg [3:0] main_0_5_address_a;
reg  main_0_5_write_enable_a;
reg [31:0] main_0_5_in_a;
wire [31:0] main_0_5_out_a;
reg [3:0] main_0_5_address_b;
reg  main_0_5_write_enable_b;
reg [31:0] main_0_5_in_b;
wire [31:0] main_0_5_out_b;
reg [4:0] main_0_6_address_a;
reg  main_0_6_write_enable_a;
reg [31:0] main_0_6_in_a;
wire [31:0] main_0_6_out_a;
reg [4:0] main_0_6_address_b;
reg  main_0_6_write_enable_b;
reg [31:0] main_0_6_in_b;
wire [31:0] main_0_6_out_b;
reg [4:0] main_0_7_address_a;
reg  main_0_7_write_enable_a;
reg [31:0] main_0_7_in_a;
wire [31:0] main_0_7_out_a;
reg [4:0] main_0_7_address_b;
reg  main_0_7_write_enable_b;
reg [31:0] main_0_7_in_b;
wire [31:0] main_0_7_out_b;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams

//   %1 = alloca [15 x i32], align 4
ram_dual_port main_0_1 (
	.clk( clk ),
	.address_a( main_0_1_address_a ),
	.address_b( main_0_1_address_b ),
	.wren_a( main_0_1_write_enable_a ),
	.wren_b( main_0_1_write_enable_b ),
	.data_a( main_0_1_in_a ),
	.data_b( main_0_1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_1_out_a ),
	.q_b( main_0_1_out_b)
);
defparam main_0_1.width_a = 32;
defparam main_0_1.width_b = 32;
defparam main_0_1.widthad_a = 4;
defparam main_0_1.widthad_b = 4;
defparam main_0_1.width_be_a = 1;
defparam main_0_1.width_be_b = 1;
defparam main_0_1.numwords_a = 15;
defparam main_0_1.numwords_b = 15;
defparam main_0_1.latency = 1;

//   %2 = alloca [15 x i32], align 4
ram_dual_port main_0_2 (
	.clk( clk ),
	.address_a( main_0_2_address_a ),
	.address_b( main_0_2_address_b ),
	.wren_a( main_0_2_write_enable_a ),
	.wren_b( main_0_2_write_enable_b ),
	.data_a( main_0_2_in_a ),
	.data_b( main_0_2_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_2_out_a ),
	.q_b( main_0_2_out_b)
);
defparam main_0_2.width_a = 32;
defparam main_0_2.width_b = 32;
defparam main_0_2.widthad_a = 4;
defparam main_0_2.widthad_b = 4;
defparam main_0_2.width_be_a = 1;
defparam main_0_2.width_be_b = 1;
defparam main_0_2.numwords_a = 15;
defparam main_0_2.numwords_b = 15;
defparam main_0_2.latency = 1;

//   %3 = alloca [14 x i32], align 4
ram_dual_port main_0_3 (
	.clk( clk ),
	.address_a( main_0_3_address_a ),
	.address_b( main_0_3_address_b ),
	.wren_a( main_0_3_write_enable_a ),
	.wren_b( main_0_3_write_enable_b ),
	.data_a( main_0_3_in_a ),
	.data_b( main_0_3_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_3_out_a ),
	.q_b( main_0_3_out_b)
);
defparam main_0_3.width_a = 32;
defparam main_0_3.width_b = 32;
defparam main_0_3.widthad_a = 4;
defparam main_0_3.widthad_b = 4;
defparam main_0_3.width_be_a = 1;
defparam main_0_3.width_be_b = 1;
defparam main_0_3.numwords_a = 14;
defparam main_0_3.numwords_b = 14;
defparam main_0_3.latency = 1;

//   %4 = alloca [14 x i32], align 4
ram_dual_port main_0_4 (
	.clk( clk ),
	.address_a( main_0_4_address_a ),
	.address_b( main_0_4_address_b ),
	.wren_a( main_0_4_write_enable_a ),
	.wren_b( main_0_4_write_enable_b ),
	.data_a( main_0_4_in_a ),
	.data_b( main_0_4_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_4_out_a ),
	.q_b( main_0_4_out_b)
);
defparam main_0_4.width_a = 32;
defparam main_0_4.width_b = 32;
defparam main_0_4.widthad_a = 4;
defparam main_0_4.widthad_b = 4;
defparam main_0_4.width_be_a = 1;
defparam main_0_4.width_be_b = 1;
defparam main_0_4.numwords_a = 14;
defparam main_0_4.numwords_b = 14;
defparam main_0_4.latency = 1;

//   %5 = alloca [16 x i32], align 4
ram_dual_port main_0_5 (
	.clk( clk ),
	.address_a( main_0_5_address_a ),
	.address_b( main_0_5_address_b ),
	.wren_a( main_0_5_write_enable_a ),
	.wren_b( main_0_5_write_enable_b ),
	.data_a( main_0_5_in_a ),
	.data_b( main_0_5_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_5_out_a ),
	.q_b( main_0_5_out_b)
);
defparam main_0_5.width_a = 32;
defparam main_0_5.width_b = 32;
defparam main_0_5.widthad_a = 4;
defparam main_0_5.widthad_b = 4;
defparam main_0_5.width_be_a = 1;
defparam main_0_5.width_be_b = 1;
defparam main_0_5.numwords_a = 16;
defparam main_0_5.numwords_b = 16;
defparam main_0_5.latency = 1;

//   %6 = alloca [28 x i32], align 4
ram_dual_port main_0_6 (
	.clk( clk ),
	.address_a( main_0_6_address_a ),
	.address_b( main_0_6_address_b ),
	.wren_a( main_0_6_write_enable_a ),
	.wren_b( main_0_6_write_enable_b ),
	.data_a( main_0_6_in_a ),
	.data_b( main_0_6_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_6_out_a ),
	.q_b( main_0_6_out_b)
);
defparam main_0_6.width_a = 32;
defparam main_0_6.width_b = 32;
defparam main_0_6.widthad_a = 5;
defparam main_0_6.widthad_b = 5;
defparam main_0_6.width_be_a = 1;
defparam main_0_6.width_be_b = 1;
defparam main_0_6.numwords_a = 28;
defparam main_0_6.numwords_b = 28;
defparam main_0_6.latency = 1;

//   %7 = alloca [28 x i32], align 4
ram_dual_port main_0_7 (
	.clk( clk ),
	.address_a( main_0_7_address_a ),
	.address_b( main_0_7_address_b ),
	.wren_a( main_0_7_write_enable_a ),
	.wren_b( main_0_7_write_enable_b ),
	.data_a( main_0_7_in_a ),
	.data_b( main_0_7_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_7_out_a ),
	.q_b( main_0_7_out_b)
);
defparam main_0_7.width_a = 32;
defparam main_0_7.width_b = 32;
defparam main_0_7.widthad_a = 5;
defparam main_0_7.widthad_b = 5;
defparam main_0_7.width_be_a = 1;
defparam main_0_7.width_be_b = 1;
defparam main_0_7.numwords_a = 28;
defparam main_0_7.numwords_b = 28;
defparam main_0_7.latency = 1;


/* Unsynthesizable Statements */
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %98 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str6, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader22_4))
begin
$write("\n");
end
/* main: %.preheader22*/
/*   %107 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str6, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader22_4))
begin
$write("\n");
end
/* main: %.preheader22*/
/*   %116 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str6, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader22_4))
begin
$write("\n");
end
/* main: %.preheader22*/
/*   %125 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str6, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader22_4))
begin
$write("\n");
end
/* main: %.preheader22*/
/*   %126 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @.str7, i32 0, i32 0), i32 %sum.0) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader22_4))
begin
$write("\nEvaluation = %d\n", $signed(main__backedge_sum_0_reg));
// to fix quartus warning
if (reset == 1'b0 && ^(main__backedge_sum_0_reg) === 1'bX) finish <= 0;
end
/* main: %.preheader22*/
/*   %91 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str5, i32 0, i32 0), i32 %90) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader22_5))
begin
$write("%d ", $signed(main__preheader22_90));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader22_90) === 1'bX) finish <= 0;
end
/* main: %.preheader22*/
/*   %93 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str5, i32 0, i32 0), i32 %92) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader22_5))
begin
$write("%d ", $signed(main__preheader22_92));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader22_92) === 1'bX) finish <= 0;
end
/* main: %.preheader22*/
/*   %95 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str5, i32 0, i32 0), i32 %94) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader22_6))
begin
$write("%d ", $signed(main__preheader22_94));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader22_94) === 1'bX) finish <= 0;
end
/* main: %.preheader22*/
/*   %97 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str5, i32 0, i32 0), i32 %96) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader22_6))
begin
$write("%d ", $signed(main__preheader22_96));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader22_96) === 1'bX) finish <= 0;
end
/* main: %.preheader22*/
/*   %100 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str5, i32 0, i32 0), i32 %99) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader22_7))
begin
$write("%d ", $signed(main__preheader22_99));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader22_99) === 1'bX) finish <= 0;
end
/* main: %.preheader22*/
/*   %102 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str5, i32 0, i32 0), i32 %101) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader22_7))
begin
$write("%d ", $signed(main__preheader22_101));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader22_101) === 1'bX) finish <= 0;
end
/* main: %.preheader22*/
/*   %104 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str5, i32 0, i32 0), i32 %103) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader22_8))
begin
$write("%d ", $signed(main__preheader22_103));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader22_103) === 1'bX) finish <= 0;
end
/* main: %.preheader22*/
/*   %106 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str5, i32 0, i32 0), i32 %105) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader22_8))
begin
$write("%d ", $signed(main__preheader22_105));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader22_105) === 1'bX) finish <= 0;
end
/* main: %.preheader22*/
/*   %109 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str5, i32 0, i32 0), i32 %108) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader22_9))
begin
$write("%d ", $signed(main__preheader22_108));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader22_108) === 1'bX) finish <= 0;
end
/* main: %.preheader22*/
/*   %111 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str5, i32 0, i32 0), i32 %110) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader22_9))
begin
$write("%d ", $signed(main__preheader22_110));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader22_110) === 1'bX) finish <= 0;
end
/* main: %.preheader22*/
/*   %113 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str5, i32 0, i32 0), i32 %112) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader22_10))
begin
$write("%d ", $signed(main__preheader22_112));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader22_112) === 1'bX) finish <= 0;
end
/* main: %.preheader22*/
/*   %115 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str5, i32 0, i32 0), i32 %114) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader22_10))
begin
$write("%d ", $signed(main__preheader22_114));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader22_114) === 1'bX) finish <= 0;
end
/* main: %.preheader22*/
/*   %118 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str5, i32 0, i32 0), i32 %117) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader22_11))
begin
$write("%d ", $signed(main__preheader22_117));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader22_117) === 1'bX) finish <= 0;
end
/* main: %.preheader22*/
/*   %120 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str5, i32 0, i32 0), i32 %119) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader22_11))
begin
$write("%d ", $signed(main__preheader22_119));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader22_119) === 1'bX) finish <= 0;
end
/* main: %.preheader22*/
/*   %122 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str5, i32 0, i32 0), i32 %121) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader22_12))
begin
$write("%d ", $signed(main__preheader22_121));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader22_121) === 1'bX) finish <= 0;
end
/* main: %.preheader22*/
/*   %124 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str5, i32 0, i32 0), i32 %123) nounwind*/
if ((cur_state == LEGUP_F_main_BB__preheader22_12))
begin
$write("%d ", $signed(main__preheader22_123));
// to fix quartus warning
if (reset == 1'b0 && ^(main__preheader22_123) === 1'bX) finish <= 0;
end
/* main: %133*/
/*   %134 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB_133_39))
begin
$write("s1\n");
end
/* main: %148*/
/*   %149 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB_148_43))
begin
$write("s2\n");
end
/* main: %176*/
/*   %177 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB_176_52))
begin
$write("No solution\n");
end
/* main: %180*/
/*   %181 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str3, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB_180_54))
begin
$write("s3\n");
end
/* main: %206*/
/*   %207 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB_206_63))
begin
$write("No solution\n");
end
/* main: %212*/
/*   %213 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB_212_66))
begin
$write("s4\n");
end
end
always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_2;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__backedge_2;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg == 32'd5)))
begin
cur_state <= LEGUP_F_main_BB__preheader22_4;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader22_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg == 32'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_13;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg == 32'd1)))
begin
cur_state <= LEGUP_F_main_BB_133_39;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_133_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg == 32'd2)))
begin
cur_state <= LEGUP_F_main_BB_148_43;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_148_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg == 32'd3)))
begin
cur_state <= LEGUP_F_main_BB_180_54;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_180_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg == 32'd4)))
begin
cur_state <= LEGUP_F_main_BB_212_66;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_212_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_2;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader22_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader22_4;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader22_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader22_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader22_5;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader22_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader22_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader22_5;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader22_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader22_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader22_6;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader22_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader22_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader22_6;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader22_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader22_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader22_7;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader22_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader22_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader22_7;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader22_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader22_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader22_8;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader22_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader22_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader22_8;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader22_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader22_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader22_9;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader22_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader22_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader22_9;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader22_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader22_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader22_10;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader22_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader22_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader22_10;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader22_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader22_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader22_11;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader22_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader22_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader22_11;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader22_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader22_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader22_12;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader22_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader22_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader22_12;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader22_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader22_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_241_73;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_241_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_13;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_14;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_14;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_15;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_15;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_16;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_16;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_17;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_17;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_18;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_18;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_19;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_19;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_20;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_20;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_21;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_21;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_22;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_22;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_23;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_23;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_24;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_24;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_25;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_25;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_26;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_26;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_27;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader24_27;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader24_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader24_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_127_28;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_127_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_127_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_127_28;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_127_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_127_28) & (memory_controller_waitrequest == 1'd0)) & (main_127_129 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_31;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_127_28) & (memory_controller_waitrequest == 1'd0)) & (main_127_129 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_130_29;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_130_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_130_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_130_29;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_130_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_130_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_130_30;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_130_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_130_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_130_30;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_130_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_130_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_127_28;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_127_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_31;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_32;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_32;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_33;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_33;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_34;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_34;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_35;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_35;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_36;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_36;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_37;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_37;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_38;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_38;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_legup_memset_4_exit_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_133_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_133_39;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_133_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_133_39) & (memory_controller_waitrequest == 1'd0)) & (main_133_135 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_133_39) & (memory_controller_waitrequest == 1'd0)) & (main_133_135 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_136_40;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_136_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_136_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_136_40;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_136_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_136_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_136_41;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_136_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_136_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_136_41;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_136_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_136_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_136_42;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_136_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_136_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_136_42;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_136_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_136_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_148_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_148_43;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_148_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_148_43) & (memory_controller_waitrequest == 1'd0)) & (main_148_150 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_151_44;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_151_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_148_43) & (memory_controller_waitrequest == 1'd0)) & (main_148_150 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_151_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_151_44;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_151_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_151_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_151_45;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_151_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_151_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_151_45;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_151_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_151_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_151_46;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_151_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_151_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_151_46;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_151_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_151_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_151_47;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_151_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_151_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_151_47;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_151_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_151_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_151_48;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_151_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_151_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_151_48;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_151_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_151_48) & (memory_controller_waitrequest == 1'd0)) & (main_151_or_cond15 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_173_49;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_173_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_151_48) & (memory_controller_waitrequest == 1'd0)) & (main_151_or_cond15 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_174_51;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_174_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_173_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_173_49;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_173_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_173_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_173_50;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_173_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_173_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_173_50;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_173_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_173_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_178_53;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_178_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_174_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_174_51;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_174_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_174_51) & (memory_controller_waitrequest == 1'd0)) & (main_174_175 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_176_52;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_176_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_174_51) & (memory_controller_waitrequest == 1'd0)) & (main_174_175 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_178_53;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_178_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_176_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_176_52;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_176_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_176_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_241_73;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_241_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_178_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_178_53;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_178_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_178_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_180_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_180_54;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_180_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_180_54) & (memory_controller_waitrequest == 1'd0)) & (main_180_182 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_185_56;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_185_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_180_54) & (memory_controller_waitrequest == 1'd0)) & (main_180_182 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_183_55;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_183_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_183_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_183_55;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_183_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_183_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_185_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_185_56;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_185_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_185_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_185_57;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_185_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_185_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_185_57;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_185_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_185_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_185_58;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_185_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_185_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_185_58;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_185_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_185_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_185_59;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_185_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_185_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_185_59;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_185_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_185_59) & (memory_controller_waitrequest == 1'd0)) & (main_185_or_cond19 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_200_60;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_200_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_185_59) & (memory_controller_waitrequest == 1'd0)) & (main_185_or_cond19 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_204_62;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_204_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_200_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_200_60;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_200_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_200_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_200_61;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_200_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_200_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_200_61;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_200_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_200_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_204_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_204_62;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_204_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_204_62) & (memory_controller_waitrequest == 1'd0)) & (main_204_205 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_206_63;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_206_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_204_62) & (memory_controller_waitrequest == 1'd0)) & (main_204_205 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_208_64;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_208_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_206_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_206_63;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_206_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_206_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_241_73;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_241_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_208_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_208_64;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_208_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_208_64) & (memory_controller_waitrequest == 1'd0)) & (main_180_182_reg == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_208_64) & (memory_controller_waitrequest == 1'd0)) & (main_180_182_reg == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_211_65;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_211_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_211_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_211_65;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_211_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_211_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_212_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_212_66;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_212_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_212_66) & (memory_controller_waitrequest == 1'd0)) & (main_212_214 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_212_66) & (memory_controller_waitrequest == 1'd0)) & (main_212_214 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_67;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_67;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_68;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_68;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_69;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_69;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_215_70;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_215_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_215_70;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_215_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_215_70) & (memory_controller_waitrequest == 1'd0)) & (main_215_235 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_236_71;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_236_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_215_70) & (memory_controller_waitrequest == 1'd0)) & (main_215_235 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_239_72;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_239_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_236_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_236_71;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_236_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_236_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_239_72;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_239_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_239_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_239_72;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_239_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_239_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__backedge_backedge_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__backedge_backedge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_241_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_241_73;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_241_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_241_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 7'd0;
if (reset == 1'b0 && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %.sub8 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 0*/
if (reset) begin main_0__sub8 = 0; end
begin
main_0__sub8 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %.sub8 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0__sub8_reg <= main_0__sub8;
if (reset == 1'b0 && ^(main_0__sub8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0__sub8_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %.sub9 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 0*/
if (reset) begin main_0__sub9 = 0; end
begin
main_0__sub9 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %.sub9 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0__sub9_reg <= main_0__sub9;
if (reset == 1'b0 && ^(main_0__sub9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0__sub9_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %.sub12 = getelementptr inbounds [16 x i32]* %5, i32 0, i32 0*/
if (reset) begin main_0__sub12 = 0; end
begin
main_0__sub12 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %.sub12 = getelementptr inbounds [16 x i32]* %5, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0__sub12_reg <= main_0__sub12;
if (reset == 1'b0 && ^(main_0__sub12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0__sub12_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %.sub13 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 0*/
if (reset) begin main_0__sub13 = 0; end
begin
main_0__sub13 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %.sub13 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0__sub13_reg <= main_0__sub13;
if (reset == 1'b0 && ^(main_0__sub13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0__sub13_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %.sub14 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 0*/
if (reset) begin main_0__sub14 = 0; end
begin
main_0__sub14 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %.sub14 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0__sub14_reg <= main_0__sub14;
if (reset == 1'b0 && ^(main_0__sub14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0__sub14_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %8 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 1*/
if (reset) begin main_0_8 = 0; end
begin
main_0_8 = (1'd0 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %8 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_8_reg <= main_0_8;
if (reset == 1'b0 && ^(main_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_8_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %9 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 1*/
if (reset) begin main_0_9 = 0; end
begin
main_0_9 = (1'd0 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %9 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_9_reg <= main_0_9;
if (reset == 1'b0 && ^(main_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_9_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %10 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 2*/
if (reset) begin main_0_10 = 0; end
begin
main_0_10 = (1'd0 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %10 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_10_reg <= main_0_10;
if (reset == 1'b0 && ^(main_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_10_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %11 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 2*/
if (reset) begin main_0_11 = 0; end
begin
main_0_11 = (1'd0 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %11 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_11_reg <= main_0_11;
if (reset == 1'b0 && ^(main_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_11_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %12 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 3*/
if (reset) begin main_0_12 = 0; end
begin
main_0_12 = (1'd0 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %12 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_12_reg <= main_0_12;
if (reset == 1'b0 && ^(main_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_12_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %13 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 3*/
if (reset) begin main_0_13 = 0; end
begin
main_0_13 = (1'd0 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %13 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_13_reg <= main_0_13;
if (reset == 1'b0 && ^(main_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_13_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %14 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 4*/
if (reset) begin main_0_14 = 0; end
begin
main_0_14 = (1'd0 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %14 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_14_reg <= main_0_14;
if (reset == 1'b0 && ^(main_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_14_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %15 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 4*/
if (reset) begin main_0_15 = 0; end
begin
main_0_15 = (1'd0 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %15 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_15_reg <= main_0_15;
if (reset == 1'b0 && ^(main_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_15_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %16 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 5*/
if (reset) begin main_0_16 = 0; end
begin
main_0_16 = (1'd0 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %16 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 5*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_16_reg <= main_0_16;
if (reset == 1'b0 && ^(main_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_16_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %17 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 5*/
if (reset) begin main_0_17 = 0; end
begin
main_0_17 = (1'd0 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %17 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 5*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_17_reg <= main_0_17;
if (reset == 1'b0 && ^(main_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_17_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %18 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 6*/
if (reset) begin main_0_18 = 0; end
begin
main_0_18 = (1'd0 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %18 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 6*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_18_reg <= main_0_18;
if (reset == 1'b0 && ^(main_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_18_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %19 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 6*/
if (reset) begin main_0_19 = 0; end
begin
main_0_19 = (1'd0 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %19 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 6*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_19_reg <= main_0_19;
if (reset == 1'b0 && ^(main_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_19_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %20 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 7*/
if (reset) begin main_0_20 = 0; end
begin
main_0_20 = (1'd0 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %20 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 7*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_20_reg <= main_0_20;
if (reset == 1'b0 && ^(main_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_20_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %21 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 7*/
if (reset) begin main_0_21 = 0; end
begin
main_0_21 = (1'd0 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %21 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 7*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_21_reg <= main_0_21;
if (reset == 1'b0 && ^(main_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_21_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %22 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 8*/
if (reset) begin main_0_22 = 0; end
begin
main_0_22 = (1'd0 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %22 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 8*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_22_reg <= main_0_22;
if (reset == 1'b0 && ^(main_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_22_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %23 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 8*/
if (reset) begin main_0_23 = 0; end
begin
main_0_23 = (1'd0 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %23 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 8*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_23_reg <= main_0_23;
if (reset == 1'b0 && ^(main_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_23_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %24 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 9*/
if (reset) begin main_0_24 = 0; end
begin
main_0_24 = (1'd0 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %24 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 9*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_24_reg <= main_0_24;
if (reset == 1'b0 && ^(main_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_24_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %25 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 9*/
if (reset) begin main_0_25 = 0; end
begin
main_0_25 = (1'd0 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %25 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 9*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_25_reg <= main_0_25;
if (reset == 1'b0 && ^(main_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_25_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %26 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 10*/
if (reset) begin main_0_26 = 0; end
begin
main_0_26 = (1'd0 + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %26 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 10*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_26_reg <= main_0_26;
if (reset == 1'b0 && ^(main_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_26_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %27 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 10*/
if (reset) begin main_0_27 = 0; end
begin
main_0_27 = (1'd0 + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %27 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 10*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_27_reg <= main_0_27;
if (reset == 1'b0 && ^(main_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_27_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %28 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 11*/
if (reset) begin main_0_28 = 0; end
begin
main_0_28 = (1'd0 + (4 * 32'd11));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %28 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 11*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_28_reg <= main_0_28;
if (reset == 1'b0 && ^(main_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_28_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %29 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 11*/
if (reset) begin main_0_29 = 0; end
begin
main_0_29 = (1'd0 + (4 * 32'd11));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %29 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 11*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_29_reg <= main_0_29;
if (reset == 1'b0 && ^(main_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_29_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %30 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 12*/
if (reset) begin main_0_30 = 0; end
begin
main_0_30 = (1'd0 + (4 * 32'd12));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %30 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 12*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_30_reg <= main_0_30;
if (reset == 1'b0 && ^(main_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_30_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %31 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 12*/
if (reset) begin main_0_31 = 0; end
begin
main_0_31 = (1'd0 + (4 * 32'd12));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %31 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 12*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_31_reg <= main_0_31;
if (reset == 1'b0 && ^(main_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_31_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %32 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 13*/
if (reset) begin main_0_32 = 0; end
begin
main_0_32 = (1'd0 + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %32 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 13*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_32_reg <= main_0_32;
if (reset == 1'b0 && ^(main_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_32_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %33 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 13*/
if (reset) begin main_0_33 = 0; end
begin
main_0_33 = (1'd0 + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %33 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 13*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_33_reg <= main_0_33;
if (reset == 1'b0 && ^(main_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_33_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %34 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 14*/
if (reset) begin main_0_34 = 0; end
begin
main_0_34 = (1'd0 + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %34 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 14*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_34_reg <= main_0_34;
if (reset == 1'b0 && ^(main_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_34_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %35 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 14*/
if (reset) begin main_0_35 = 0; end
begin
main_0_35 = (1'd0 + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %35 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 14*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_35_reg <= main_0_35;
if (reset == 1'b0 && ^(main_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_35_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %36 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 1*/
if (reset) begin main_0_36 = 0; end
begin
main_0_36 = (1'd0 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %36 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_36_reg <= main_0_36;
if (reset == 1'b0 && ^(main_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_36_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %37 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 1*/
if (reset) begin main_0_37 = 0; end
begin
main_0_37 = (1'd0 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %37 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_37_reg <= main_0_37;
if (reset == 1'b0 && ^(main_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_37_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %38 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 2*/
if (reset) begin main_0_38 = 0; end
begin
main_0_38 = (1'd0 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %38 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_38_reg <= main_0_38;
if (reset == 1'b0 && ^(main_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_38_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %39 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 2*/
if (reset) begin main_0_39 = 0; end
begin
main_0_39 = (1'd0 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %39 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_39_reg <= main_0_39;
if (reset == 1'b0 && ^(main_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_39_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %40 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 3*/
if (reset) begin main_0_40 = 0; end
begin
main_0_40 = (1'd0 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %40 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_40_reg <= main_0_40;
if (reset == 1'b0 && ^(main_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_40_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %41 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 3*/
if (reset) begin main_0_41 = 0; end
begin
main_0_41 = (1'd0 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %41 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_41_reg <= main_0_41;
if (reset == 1'b0 && ^(main_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_41_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %42 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 4*/
if (reset) begin main_0_42 = 0; end
begin
main_0_42 = (1'd0 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %42 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_42_reg <= main_0_42;
if (reset == 1'b0 && ^(main_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_42_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %43 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 4*/
if (reset) begin main_0_43 = 0; end
begin
main_0_43 = (1'd0 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %43 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_43_reg <= main_0_43;
if (reset == 1'b0 && ^(main_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_43_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %44 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 5*/
if (reset) begin main_0_44 = 0; end
begin
main_0_44 = (1'd0 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %44 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 5*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_44_reg <= main_0_44;
if (reset == 1'b0 && ^(main_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_44_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %45 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 5*/
if (reset) begin main_0_45 = 0; end
begin
main_0_45 = (1'd0 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %45 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 5*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_45_reg <= main_0_45;
if (reset == 1'b0 && ^(main_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_45_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %46 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 6*/
if (reset) begin main_0_46 = 0; end
begin
main_0_46 = (1'd0 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %46 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 6*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_46_reg <= main_0_46;
if (reset == 1'b0 && ^(main_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_46_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %47 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 6*/
if (reset) begin main_0_47 = 0; end
begin
main_0_47 = (1'd0 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %47 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 6*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_47_reg <= main_0_47;
if (reset == 1'b0 && ^(main_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_47_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %48 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 7*/
if (reset) begin main_0_48 = 0; end
begin
main_0_48 = (1'd0 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %48 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 7*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_48_reg <= main_0_48;
if (reset == 1'b0 && ^(main_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_48_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %49 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 7*/
if (reset) begin main_0_49 = 0; end
begin
main_0_49 = (1'd0 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %49 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 7*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_49_reg <= main_0_49;
if (reset == 1'b0 && ^(main_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_49_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %50 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 8*/
if (reset) begin main_0_50 = 0; end
begin
main_0_50 = (1'd0 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %50 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 8*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_50_reg <= main_0_50;
if (reset == 1'b0 && ^(main_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_50_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %51 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 8*/
if (reset) begin main_0_51 = 0; end
begin
main_0_51 = (1'd0 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %51 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 8*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_51_reg <= main_0_51;
if (reset == 1'b0 && ^(main_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_51_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %52 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 9*/
if (reset) begin main_0_52 = 0; end
begin
main_0_52 = (1'd0 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %52 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 9*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_52_reg <= main_0_52;
if (reset == 1'b0 && ^(main_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_52_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %53 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 9*/
if (reset) begin main_0_53 = 0; end
begin
main_0_53 = (1'd0 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %53 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 9*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_53_reg <= main_0_53;
if (reset == 1'b0 && ^(main_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_53_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %54 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 10*/
if (reset) begin main_0_54 = 0; end
begin
main_0_54 = (1'd0 + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %54 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 10*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_54_reg <= main_0_54;
if (reset == 1'b0 && ^(main_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_54_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %55 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 10*/
if (reset) begin main_0_55 = 0; end
begin
main_0_55 = (1'd0 + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %55 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 10*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_55_reg <= main_0_55;
if (reset == 1'b0 && ^(main_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_55_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %56 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 11*/
if (reset) begin main_0_56 = 0; end
begin
main_0_56 = (1'd0 + (4 * 32'd11));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %56 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 11*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_56_reg <= main_0_56;
if (reset == 1'b0 && ^(main_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_56_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %57 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 11*/
if (reset) begin main_0_57 = 0; end
begin
main_0_57 = (1'd0 + (4 * 32'd11));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %57 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 11*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_57_reg <= main_0_57;
if (reset == 1'b0 && ^(main_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_57_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %58 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 12*/
if (reset) begin main_0_58 = 0; end
begin
main_0_58 = (1'd0 + (4 * 32'd12));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %58 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 12*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_58_reg <= main_0_58;
if (reset == 1'b0 && ^(main_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_58_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %59 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 12*/
if (reset) begin main_0_59 = 0; end
begin
main_0_59 = (1'd0 + (4 * 32'd12));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %59 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 12*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_59_reg <= main_0_59;
if (reset == 1'b0 && ^(main_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_59_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %60 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 13*/
if (reset) begin main_0_60 = 0; end
begin
main_0_60 = (1'd0 + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %60 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 13*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_60_reg <= main_0_60;
if (reset == 1'b0 && ^(main_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_60_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %61 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 13*/
if (reset) begin main_0_61 = 0; end
begin
main_0_61 = (1'd0 + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %61 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 13*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_61_reg <= main_0_61;
if (reset == 1'b0 && ^(main_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_61_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %62 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 14*/
if (reset) begin main_0_62 = 0; end
begin
main_0_62 = (1'd0 + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %62 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 14*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_62_reg <= main_0_62;
if (reset == 1'b0 && ^(main_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_62_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %63 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 14*/
if (reset) begin main_0_63 = 0; end
begin
main_0_63 = (1'd0 + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %63 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 14*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_63_reg <= main_0_63;
if (reset == 1'b0 && ^(main_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_63_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %64 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 15*/
if (reset) begin main_0_64 = 0; end
begin
main_0_64 = (1'd0 + (4 * 32'd15));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %64 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 15*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_64_reg <= main_0_64;
if (reset == 1'b0 && ^(main_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_64_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %65 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 15*/
if (reset) begin main_0_65 = 0; end
begin
main_0_65 = (1'd0 + (4 * 32'd15));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %65 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 15*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_65_reg <= main_0_65;
if (reset == 1'b0 && ^(main_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_65_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %66 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 16*/
if (reset) begin main_0_66 = 0; end
begin
main_0_66 = (1'd0 + (4 * 32'd16));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %66 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 16*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_66_reg <= main_0_66;
if (reset == 1'b0 && ^(main_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_66_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %67 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 16*/
if (reset) begin main_0_67 = 0; end
begin
main_0_67 = (1'd0 + (4 * 32'd16));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %67 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 16*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_67_reg <= main_0_67;
if (reset == 1'b0 && ^(main_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_67_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %68 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 17*/
if (reset) begin main_0_68 = 0; end
begin
main_0_68 = (1'd0 + (4 * 32'd17));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %68 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 17*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_68_reg <= main_0_68;
if (reset == 1'b0 && ^(main_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_68_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %69 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 17*/
if (reset) begin main_0_69 = 0; end
begin
main_0_69 = (1'd0 + (4 * 32'd17));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %69 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 17*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_69_reg <= main_0_69;
if (reset == 1'b0 && ^(main_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_69_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %70 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 18*/
if (reset) begin main_0_70 = 0; end
begin
main_0_70 = (1'd0 + (4 * 32'd18));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %70 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 18*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_70_reg <= main_0_70;
if (reset == 1'b0 && ^(main_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_70_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %71 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 18*/
if (reset) begin main_0_71 = 0; end
begin
main_0_71 = (1'd0 + (4 * 32'd18));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %71 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 18*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_71_reg <= main_0_71;
if (reset == 1'b0 && ^(main_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_71_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %72 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 19*/
if (reset) begin main_0_72 = 0; end
begin
main_0_72 = (1'd0 + (4 * 32'd19));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %72 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 19*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_72_reg <= main_0_72;
if (reset == 1'b0 && ^(main_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_72_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %73 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 19*/
if (reset) begin main_0_73 = 0; end
begin
main_0_73 = (1'd0 + (4 * 32'd19));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %73 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 19*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_73_reg <= main_0_73;
if (reset == 1'b0 && ^(main_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_73_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %74 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 20*/
if (reset) begin main_0_74 = 0; end
begin
main_0_74 = (1'd0 + (4 * 32'd20));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %74 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 20*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_74_reg <= main_0_74;
if (reset == 1'b0 && ^(main_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_74_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %75 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 20*/
if (reset) begin main_0_75 = 0; end
begin
main_0_75 = (1'd0 + (4 * 32'd20));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %75 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 20*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_75_reg <= main_0_75;
if (reset == 1'b0 && ^(main_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_75_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %76 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 21*/
if (reset) begin main_0_76 = 0; end
begin
main_0_76 = (1'd0 + (4 * 32'd21));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %76 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 21*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_76_reg <= main_0_76;
if (reset == 1'b0 && ^(main_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_76_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %77 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 21*/
if (reset) begin main_0_77 = 0; end
begin
main_0_77 = (1'd0 + (4 * 32'd21));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %77 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 21*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_77_reg <= main_0_77;
if (reset == 1'b0 && ^(main_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_77_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %78 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 22*/
if (reset) begin main_0_78 = 0; end
begin
main_0_78 = (1'd0 + (4 * 32'd22));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %78 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 22*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_78_reg <= main_0_78;
if (reset == 1'b0 && ^(main_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_78_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %79 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 22*/
if (reset) begin main_0_79 = 0; end
begin
main_0_79 = (1'd0 + (4 * 32'd22));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %79 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 22*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_79_reg <= main_0_79;
if (reset == 1'b0 && ^(main_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_79_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %80 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 23*/
if (reset) begin main_0_80 = 0; end
begin
main_0_80 = (1'd0 + (4 * 32'd23));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %80 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 23*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_80_reg <= main_0_80;
if (reset == 1'b0 && ^(main_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_80_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %81 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 23*/
if (reset) begin main_0_81 = 0; end
begin
main_0_81 = (1'd0 + (4 * 32'd23));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %81 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 23*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_81_reg <= main_0_81;
if (reset == 1'b0 && ^(main_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_81_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %82 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 24*/
if (reset) begin main_0_82 = 0; end
begin
main_0_82 = (1'd0 + (4 * 32'd24));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %82 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 24*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_82_reg <= main_0_82;
if (reset == 1'b0 && ^(main_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_82_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %83 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 24*/
if (reset) begin main_0_83 = 0; end
begin
main_0_83 = (1'd0 + (4 * 32'd24));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %83 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 24*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_83_reg <= main_0_83;
if (reset == 1'b0 && ^(main_0_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_83_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %84 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 25*/
if (reset) begin main_0_84 = 0; end
begin
main_0_84 = (1'd0 + (4 * 32'd25));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %84 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 25*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_84_reg <= main_0_84;
if (reset == 1'b0 && ^(main_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_84_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %85 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 25*/
if (reset) begin main_0_85 = 0; end
begin
main_0_85 = (1'd0 + (4 * 32'd25));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %85 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 25*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_85_reg <= main_0_85;
if (reset == 1'b0 && ^(main_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_85_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %86 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 26*/
if (reset) begin main_0_86 = 0; end
begin
main_0_86 = (1'd0 + (4 * 32'd26));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %86 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 26*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_86_reg <= main_0_86;
if (reset == 1'b0 && ^(main_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_86_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %87 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 26*/
if (reset) begin main_0_87 = 0; end
begin
main_0_87 = (1'd0 + (4 * 32'd26));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %87 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 26*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_87_reg <= main_0_87;
if (reset == 1'b0 && ^(main_0_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_87_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %88 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 27*/
if (reset) begin main_0_88 = 0; end
begin
main_0_88 = (1'd0 + (4 * 32'd27));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %88 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 27*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_88_reg <= main_0_88;
if (reset == 1'b0 && ^(main_0_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_88_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %89 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 27*/
if (reset) begin main_0_89 = 0; end
begin
main_0_89 = (1'd0 + (4 * 32'd27));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %89 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 27*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_89_reg <= main_0_89;
if (reset == 1'b0 && ^(main_0_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_89_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep55 = getelementptr [14 x i32]* %3, i32 0, i32 0*/
if (reset) begin main_0_scevgep55 = 0; end
begin
main_0_scevgep55 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep55 = getelementptr [14 x i32]* %3, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep55_reg <= main_0_scevgep55;
if (reset == 1'b0 && ^(main_0_scevgep55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep55_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep56 = getelementptr [14 x i32]* %4, i32 0, i32 0*/
if (reset) begin main_0_scevgep56 = 0; end
begin
main_0_scevgep56 = 1'd0;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep56 = getelementptr [14 x i32]* %4, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep56_reg <= main_0_scevgep56;
if (reset == 1'b0 && ^(main_0_scevgep56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep56_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep55.1 = getelementptr [14 x i32]* %3, i32 0, i32 1*/
if (reset) begin main_0_scevgep55_1 = 0; end
begin
main_0_scevgep55_1 = (1'd0 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep55.1 = getelementptr [14 x i32]* %3, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep55_1_reg <= main_0_scevgep55_1;
if (reset == 1'b0 && ^(main_0_scevgep55_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep55_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep56.1 = getelementptr [14 x i32]* %4, i32 0, i32 1*/
if (reset) begin main_0_scevgep56_1 = 0; end
begin
main_0_scevgep56_1 = (1'd0 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep56.1 = getelementptr [14 x i32]* %4, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep56_1_reg <= main_0_scevgep56_1;
if (reset == 1'b0 && ^(main_0_scevgep56_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep56_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep55.2 = getelementptr [14 x i32]* %3, i32 0, i32 2*/
if (reset) begin main_0_scevgep55_2 = 0; end
begin
main_0_scevgep55_2 = (1'd0 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep55.2 = getelementptr [14 x i32]* %3, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep55_2_reg <= main_0_scevgep55_2;
if (reset == 1'b0 && ^(main_0_scevgep55_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep55_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep56.2 = getelementptr [14 x i32]* %4, i32 0, i32 2*/
if (reset) begin main_0_scevgep56_2 = 0; end
begin
main_0_scevgep56_2 = (1'd0 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep56.2 = getelementptr [14 x i32]* %4, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep56_2_reg <= main_0_scevgep56_2;
if (reset == 1'b0 && ^(main_0_scevgep56_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep56_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep55.3 = getelementptr [14 x i32]* %3, i32 0, i32 3*/
if (reset) begin main_0_scevgep55_3 = 0; end
begin
main_0_scevgep55_3 = (1'd0 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep55.3 = getelementptr [14 x i32]* %3, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep55_3_reg <= main_0_scevgep55_3;
if (reset == 1'b0 && ^(main_0_scevgep55_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep55_3_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep56.3 = getelementptr [14 x i32]* %4, i32 0, i32 3*/
if (reset) begin main_0_scevgep56_3 = 0; end
begin
main_0_scevgep56_3 = (1'd0 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep56.3 = getelementptr [14 x i32]* %4, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep56_3_reg <= main_0_scevgep56_3;
if (reset == 1'b0 && ^(main_0_scevgep56_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep56_3_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep55.4 = getelementptr [14 x i32]* %3, i32 0, i32 4*/
if (reset) begin main_0_scevgep55_4 = 0; end
begin
main_0_scevgep55_4 = (1'd0 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep55.4 = getelementptr [14 x i32]* %3, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep55_4_reg <= main_0_scevgep55_4;
if (reset == 1'b0 && ^(main_0_scevgep55_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep55_4_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep56.4 = getelementptr [14 x i32]* %4, i32 0, i32 4*/
if (reset) begin main_0_scevgep56_4 = 0; end
begin
main_0_scevgep56_4 = (1'd0 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep56.4 = getelementptr [14 x i32]* %4, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep56_4_reg <= main_0_scevgep56_4;
if (reset == 1'b0 && ^(main_0_scevgep56_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep56_4_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep55.5 = getelementptr [14 x i32]* %3, i32 0, i32 5*/
if (reset) begin main_0_scevgep55_5 = 0; end
begin
main_0_scevgep55_5 = (1'd0 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep55.5 = getelementptr [14 x i32]* %3, i32 0, i32 5*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep55_5_reg <= main_0_scevgep55_5;
if (reset == 1'b0 && ^(main_0_scevgep55_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep55_5_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep56.5 = getelementptr [14 x i32]* %4, i32 0, i32 5*/
if (reset) begin main_0_scevgep56_5 = 0; end
begin
main_0_scevgep56_5 = (1'd0 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep56.5 = getelementptr [14 x i32]* %4, i32 0, i32 5*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep56_5_reg <= main_0_scevgep56_5;
if (reset == 1'b0 && ^(main_0_scevgep56_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep56_5_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep55.6 = getelementptr [14 x i32]* %3, i32 0, i32 6*/
if (reset) begin main_0_scevgep55_6 = 0; end
begin
main_0_scevgep55_6 = (1'd0 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep55.6 = getelementptr [14 x i32]* %3, i32 0, i32 6*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep55_6_reg <= main_0_scevgep55_6;
if (reset == 1'b0 && ^(main_0_scevgep55_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep55_6_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep56.6 = getelementptr [14 x i32]* %4, i32 0, i32 6*/
if (reset) begin main_0_scevgep56_6 = 0; end
begin
main_0_scevgep56_6 = (1'd0 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep56.6 = getelementptr [14 x i32]* %4, i32 0, i32 6*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep56_6_reg <= main_0_scevgep56_6;
if (reset == 1'b0 && ^(main_0_scevgep56_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep56_6_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep55.7 = getelementptr [14 x i32]* %3, i32 0, i32 7*/
if (reset) begin main_0_scevgep55_7 = 0; end
begin
main_0_scevgep55_7 = (1'd0 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep55.7 = getelementptr [14 x i32]* %3, i32 0, i32 7*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep55_7_reg <= main_0_scevgep55_7;
if (reset == 1'b0 && ^(main_0_scevgep55_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep55_7_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep56.7 = getelementptr [14 x i32]* %4, i32 0, i32 7*/
if (reset) begin main_0_scevgep56_7 = 0; end
begin
main_0_scevgep56_7 = (1'd0 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep56.7 = getelementptr [14 x i32]* %4, i32 0, i32 7*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep56_7_reg <= main_0_scevgep56_7;
if (reset == 1'b0 && ^(main_0_scevgep56_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep56_7_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep55.8 = getelementptr [14 x i32]* %3, i32 0, i32 8*/
if (reset) begin main_0_scevgep55_8 = 0; end
begin
main_0_scevgep55_8 = (1'd0 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep55.8 = getelementptr [14 x i32]* %3, i32 0, i32 8*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep55_8_reg <= main_0_scevgep55_8;
if (reset == 1'b0 && ^(main_0_scevgep55_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep55_8_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep56.8 = getelementptr [14 x i32]* %4, i32 0, i32 8*/
if (reset) begin main_0_scevgep56_8 = 0; end
begin
main_0_scevgep56_8 = (1'd0 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep56.8 = getelementptr [14 x i32]* %4, i32 0, i32 8*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep56_8_reg <= main_0_scevgep56_8;
if (reset == 1'b0 && ^(main_0_scevgep56_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep56_8_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep55.9 = getelementptr [14 x i32]* %3, i32 0, i32 9*/
if (reset) begin main_0_scevgep55_9 = 0; end
begin
main_0_scevgep55_9 = (1'd0 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep55.9 = getelementptr [14 x i32]* %3, i32 0, i32 9*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep55_9_reg <= main_0_scevgep55_9;
if (reset == 1'b0 && ^(main_0_scevgep55_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep55_9_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep56.9 = getelementptr [14 x i32]* %4, i32 0, i32 9*/
if (reset) begin main_0_scevgep56_9 = 0; end
begin
main_0_scevgep56_9 = (1'd0 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep56.9 = getelementptr [14 x i32]* %4, i32 0, i32 9*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep56_9_reg <= main_0_scevgep56_9;
if (reset == 1'b0 && ^(main_0_scevgep56_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep56_9_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep55.10 = getelementptr [14 x i32]* %3, i32 0, i32 10*/
if (reset) begin main_0_scevgep55_10 = 0; end
begin
main_0_scevgep55_10 = (1'd0 + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep55.10 = getelementptr [14 x i32]* %3, i32 0, i32 10*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep55_10_reg <= main_0_scevgep55_10;
if (reset == 1'b0 && ^(main_0_scevgep55_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep55_10_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep56.10 = getelementptr [14 x i32]* %4, i32 0, i32 10*/
if (reset) begin main_0_scevgep56_10 = 0; end
begin
main_0_scevgep56_10 = (1'd0 + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep56.10 = getelementptr [14 x i32]* %4, i32 0, i32 10*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep56_10_reg <= main_0_scevgep56_10;
if (reset == 1'b0 && ^(main_0_scevgep56_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep56_10_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep55.11 = getelementptr [14 x i32]* %3, i32 0, i32 11*/
if (reset) begin main_0_scevgep55_11 = 0; end
begin
main_0_scevgep55_11 = (1'd0 + (4 * 32'd11));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep55.11 = getelementptr [14 x i32]* %3, i32 0, i32 11*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep55_11_reg <= main_0_scevgep55_11;
if (reset == 1'b0 && ^(main_0_scevgep55_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep55_11_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep56.11 = getelementptr [14 x i32]* %4, i32 0, i32 11*/
if (reset) begin main_0_scevgep56_11 = 0; end
begin
main_0_scevgep56_11 = (1'd0 + (4 * 32'd11));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep56.11 = getelementptr [14 x i32]* %4, i32 0, i32 11*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep56_11_reg <= main_0_scevgep56_11;
if (reset == 1'b0 && ^(main_0_scevgep56_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep56_11_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep55.12 = getelementptr [14 x i32]* %3, i32 0, i32 12*/
if (reset) begin main_0_scevgep55_12 = 0; end
begin
main_0_scevgep55_12 = (1'd0 + (4 * 32'd12));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep55.12 = getelementptr [14 x i32]* %3, i32 0, i32 12*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep55_12_reg <= main_0_scevgep55_12;
if (reset == 1'b0 && ^(main_0_scevgep55_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep55_12_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep56.12 = getelementptr [14 x i32]* %4, i32 0, i32 12*/
if (reset) begin main_0_scevgep56_12 = 0; end
begin
main_0_scevgep56_12 = (1'd0 + (4 * 32'd12));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep56.12 = getelementptr [14 x i32]* %4, i32 0, i32 12*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep56_12_reg <= main_0_scevgep56_12;
if (reset == 1'b0 && ^(main_0_scevgep56_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep56_12_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep55.13 = getelementptr [14 x i32]* %3, i32 0, i32 13*/
if (reset) begin main_0_scevgep55_13 = 0; end
begin
main_0_scevgep55_13 = (1'd0 + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep55.13 = getelementptr [14 x i32]* %3, i32 0, i32 13*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep55_13_reg <= main_0_scevgep55_13;
if (reset == 1'b0 && ^(main_0_scevgep55_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep55_13_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %scevgep56.13 = getelementptr [14 x i32]* %4, i32 0, i32 13*/
if (reset) begin main_0_scevgep56_13 = 0; end
begin
main_0_scevgep56_13 = (1'd0 + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %scevgep56.13 = getelementptr [14 x i32]* %4, i32 0, i32 13*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_scevgep56_13_reg <= main_0_scevgep56_13;
if (reset == 1'b0 && ^(main_0_scevgep56_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_scevgep56_13_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %b.0 = phi i32 [ undef, %0 ], [ %b.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_b_0 = 0;
end
/* main: %.backedge*/
/*   %b.0 = phi i32 [ undef, %0 ], [ %b.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_b_0 = main__backedge_backedge_b_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %b.0 = phi i32 [ undef, %0 ], [ %b.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_b_0_reg <= main__backedge_b_0;
if (reset == 1'b0 && ^(main__backedge_b_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_b_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %b.0 = phi i32 [ undef, %0 ], [ %b.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_b_0_reg <= main__backedge_b_0;
if (reset == 1'b0 && ^(main__backedge_b_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_b_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %a.0 = phi i32 [ undef, %0 ], [ %a.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_a_0 = 0;
end
/* main: %.backedge*/
/*   %a.0 = phi i32 [ undef, %0 ], [ %a.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_a_0 = main__backedge_backedge_a_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %a.0 = phi i32 [ undef, %0 ], [ %a.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_a_0_reg <= main__backedge_a_0;
if (reset == 1'b0 && ^(main__backedge_a_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_a_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %a.0 = phi i32 [ undef, %0 ], [ %a.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_a_0_reg <= main__backedge_a_0;
if (reset == 1'b0 && ^(main__backedge_a_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_a_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %pos_b_X.0 = phi i32 [ undef, %0 ], [ %pos_b_X.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_b_X_0 = 0;
end
/* main: %.backedge*/
/*   %pos_b_X.0 = phi i32 [ undef, %0 ], [ %pos_b_X.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_pos_b_X_0 = main__backedge_backedge_pos_b_X_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %pos_b_X.0 = phi i32 [ undef, %0 ], [ %pos_b_X.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_b_X_0_reg <= main__backedge_pos_b_X_0;
if (reset == 1'b0 && ^(main__backedge_pos_b_X_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_pos_b_X_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %pos_b_X.0 = phi i32 [ undef, %0 ], [ %pos_b_X.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_b_X_0_reg <= main__backedge_pos_b_X_0;
if (reset == 1'b0 && ^(main__backedge_pos_b_X_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_pos_b_X_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %pos_a_Y.0 = phi i32 [ undef, %0 ], [ %pos_a_Y.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_a_Y_0 = 0;
end
/* main: %.backedge*/
/*   %pos_a_Y.0 = phi i32 [ undef, %0 ], [ %pos_a_Y.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_pos_a_Y_0 = main__backedge_backedge_pos_a_Y_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %pos_a_Y.0 = phi i32 [ undef, %0 ], [ %pos_a_Y.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_a_Y_0_reg <= main__backedge_pos_a_Y_0;
if (reset == 1'b0 && ^(main__backedge_pos_a_Y_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_pos_a_Y_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %pos_a_Y.0 = phi i32 [ undef, %0 ], [ %pos_a_Y.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_a_Y_0_reg <= main__backedge_pos_a_Y_0;
if (reset == 1'b0 && ^(main__backedge_pos_a_Y_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_pos_a_Y_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %pos_a_X.0 = phi i32 [ undef, %0 ], [ %pos_a_X.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_a_X_0 = 0;
end
/* main: %.backedge*/
/*   %pos_a_X.0 = phi i32 [ undef, %0 ], [ %pos_a_X.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_pos_a_X_0 = main__backedge_backedge_pos_a_X_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %pos_a_X.0 = phi i32 [ undef, %0 ], [ %pos_a_X.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_a_X_0_reg <= main__backedge_pos_a_X_0;
if (reset == 1'b0 && ^(main__backedge_pos_a_X_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_pos_a_X_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %pos_a_X.0 = phi i32 [ undef, %0 ], [ %pos_a_X.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_pos_a_X_0_reg <= main__backedge_pos_a_X_0;
if (reset == 1'b0 && ^(main__backedge_pos_a_X_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_pos_a_X_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %j.0 = phi i32 [ undef, %0 ], [ %j.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_j_0 = 0;
end
/* main: %.backedge*/
/*   %j.0 = phi i32 [ undef, %0 ], [ %j.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_j_0 = main__backedge_backedge_j_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %j.0 = phi i32 [ undef, %0 ], [ %j.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_j_0_reg <= main__backedge_j_0;
if (reset == 1'b0 && ^(main__backedge_j_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_j_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %j.0 = phi i32 [ undef, %0 ], [ %j.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_j_0_reg <= main__backedge_j_0;
if (reset == 1'b0 && ^(main__backedge_j_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_j_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %i.0 = phi i32 [ undef, %0 ], [ %i.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_i_0 = 0;
end
/* main: %.backedge*/
/*   %i.0 = phi i32 [ undef, %0 ], [ %i.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_i_0 = main__backedge_backedge_i_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %i.0 = phi i32 [ undef, %0 ], [ %i.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_i_0_reg <= main__backedge_i_0;
if (reset == 1'b0 && ^(main__backedge_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %i.0 = phi i32 [ undef, %0 ], [ %i.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_i_0_reg <= main__backedge_i_0;
if (reset == 1'b0 && ^(main__backedge_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %state.0 = phi i32 [ 0, %0 ], [ %state.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_state_0 = 32'd0;
end
/* main: %.backedge*/
/*   %state.0 = phi i32 [ 0, %0 ], [ %state.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_state_0 = main__backedge_backedge_state_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %state.0 = phi i32 [ 0, %0 ], [ %state.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_state_0_reg <= main__backedge_state_0;
if (reset == 1'b0 && ^(main__backedge_state_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_state_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %state.0 = phi i32 [ 0, %0 ], [ %state.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_state_0_reg <= main__backedge_state_0;
if (reset == 1'b0 && ^(main__backedge_state_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_state_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge*/
/*   %sum.0 = phi i32 [ 0, %0 ], [ %sum.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_sum_0 = 32'd0;
end
/* main: %.backedge*/
/*   %sum.0 = phi i32 [ 0, %0 ], [ %sum.0.be, %.backedge.backedge ]*/
else /* if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_sum_0 = main__backedge_backedge_sum_0_be_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge*/
/*   %sum.0 = phi i32 [ 0, %0 ], [ %sum.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_sum_0_reg <= main__backedge_sum_0;
if (reset == 1'b0 && ^(main__backedge_sum_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_sum_0_reg"); $finish; end
end
/* main: %.backedge*/
/*   %sum.0 = phi i32 [ 0, %0 ], [ %sum.0.be, %.backedge.backedge ]*/
if (((cur_state == LEGUP_F_main_BB__backedge_backedge_3) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_sum_0_reg <= main__backedge_sum_0;
if (reset == 1'b0 && ^(main__backedge_sum_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_sum_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %219, %239 ], [ %b.0, %183 ], [ %b.0, %200 ], [ %b.0, %211 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %133 ], [ %140, %136 ], [ %b.0, %148 ], [ %b.0, %178 ], [ %b.0, %208 ], [ %b.0, %212 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %219, %239 ], [ %b.0, %183 ], [ %b.0, %200 ], [ %b.0, %211 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %133 ], [ %140, %136 ], [ %b.0, %148 ], [ %b.0, %178 ], [ %b.0, %208 ], [ %b.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_38) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %219, %239 ], [ %b.0, %183 ], [ %b.0, %200 ], [ %b.0, %211 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %133 ], [ %140, %136 ], [ %b.0, %148 ], [ %b.0, %178 ], [ %b.0, %208 ], [ %b.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_133_39) & (memory_controller_waitrequest == 1'd0)) & (main_133_135 == 1'd1)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %219, %239 ], [ %b.0, %183 ], [ %b.0, %200 ], [ %b.0, %211 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %133 ], [ %140, %136 ], [ %b.0, %148 ], [ %b.0, %178 ], [ %b.0, %208 ], [ %b.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_136_42) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be = main_136_140_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %219, %239 ], [ %b.0, %183 ], [ %b.0, %200 ], [ %b.0, %211 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %133 ], [ %140, %136 ], [ %b.0, %148 ], [ %b.0, %178 ], [ %b.0, %208 ], [ %b.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_148_43) & (memory_controller_waitrequest == 1'd0)) & (main_148_150 == 1'd0)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %219, %239 ], [ %b.0, %183 ], [ %b.0, %200 ], [ %b.0, %211 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %133 ], [ %140, %136 ], [ %b.0, %148 ], [ %b.0, %178 ], [ %b.0, %208 ], [ %b.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_178_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %219, %239 ], [ %b.0, %183 ], [ %b.0, %200 ], [ %b.0, %211 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %133 ], [ %140, %136 ], [ %b.0, %148 ], [ %b.0, %178 ], [ %b.0, %208 ], [ %b.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_183_55) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %219, %239 ], [ %b.0, %183 ], [ %b.0, %200 ], [ %b.0, %211 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %133 ], [ %140, %136 ], [ %b.0, %148 ], [ %b.0, %178 ], [ %b.0, %208 ], [ %b.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_200_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %219, %239 ], [ %b.0, %183 ], [ %b.0, %200 ], [ %b.0, %211 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %133 ], [ %140, %136 ], [ %b.0, %148 ], [ %b.0, %178 ], [ %b.0, %208 ], [ %b.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_208_64) & (memory_controller_waitrequest == 1'd0)) & (main_180_182_reg == 1'd1)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %219, %239 ], [ %b.0, %183 ], [ %b.0, %200 ], [ %b.0, %211 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %133 ], [ %140, %136 ], [ %b.0, %148 ], [ %b.0, %178 ], [ %b.0, %208 ], [ %b.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_211_65) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %219, %239 ], [ %b.0, %183 ], [ %b.0, %200 ], [ %b.0, %211 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %133 ], [ %140, %136 ], [ %b.0, %148 ], [ %b.0, %178 ], [ %b.0, %208 ], [ %b.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_212_66) & (memory_controller_waitrequest == 1'd0)) & (main_212_214 == 1'd1)))
begin
main__backedge_backedge_b_0_be = main__backedge_b_0_reg;
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %219, %239 ], [ %b.0, %183 ], [ %b.0, %200 ], [ %b.0, %211 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %133 ], [ %140, %136 ], [ %b.0, %148 ], [ %b.0, %178 ], [ %b.0, %208 ], [ %b.0, %212 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_239_72) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_b_0_be = main_215_219_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %219, %239 ], [ %b.0, %183 ], [ %b.0, %200 ], [ %b.0, %211 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %133 ], [ %140, %136 ], [ %b.0, %148 ], [ %b.0, %178 ], [ %b.0, %208 ], [ %b.0, %212 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %219, %239 ], [ %b.0, %183 ], [ %b.0, %200 ], [ %b.0, %211 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %133 ], [ %140, %136 ], [ %b.0, %148 ], [ %b.0, %178 ], [ %b.0, %208 ], [ %b.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_38) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %219, %239 ], [ %b.0, %183 ], [ %b.0, %200 ], [ %b.0, %211 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %133 ], [ %140, %136 ], [ %b.0, %148 ], [ %b.0, %178 ], [ %b.0, %208 ], [ %b.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_133_39) & (memory_controller_waitrequest == 1'd0)) & (main_133_135 == 1'd1)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %219, %239 ], [ %b.0, %183 ], [ %b.0, %200 ], [ %b.0, %211 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %133 ], [ %140, %136 ], [ %b.0, %148 ], [ %b.0, %178 ], [ %b.0, %208 ], [ %b.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_136_42) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %219, %239 ], [ %b.0, %183 ], [ %b.0, %200 ], [ %b.0, %211 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %133 ], [ %140, %136 ], [ %b.0, %148 ], [ %b.0, %178 ], [ %b.0, %208 ], [ %b.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_148_43) & (memory_controller_waitrequest == 1'd0)) & (main_148_150 == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %219, %239 ], [ %b.0, %183 ], [ %b.0, %200 ], [ %b.0, %211 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %133 ], [ %140, %136 ], [ %b.0, %148 ], [ %b.0, %178 ], [ %b.0, %208 ], [ %b.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_178_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %219, %239 ], [ %b.0, %183 ], [ %b.0, %200 ], [ %b.0, %211 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %133 ], [ %140, %136 ], [ %b.0, %148 ], [ %b.0, %178 ], [ %b.0, %208 ], [ %b.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_183_55) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %219, %239 ], [ %b.0, %183 ], [ %b.0, %200 ], [ %b.0, %211 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %133 ], [ %140, %136 ], [ %b.0, %148 ], [ %b.0, %178 ], [ %b.0, %208 ], [ %b.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_200_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %219, %239 ], [ %b.0, %183 ], [ %b.0, %200 ], [ %b.0, %211 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %133 ], [ %140, %136 ], [ %b.0, %148 ], [ %b.0, %178 ], [ %b.0, %208 ], [ %b.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_208_64) & (memory_controller_waitrequest == 1'd0)) & (main_180_182_reg == 1'd1)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %219, %239 ], [ %b.0, %183 ], [ %b.0, %200 ], [ %b.0, %211 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %133 ], [ %140, %136 ], [ %b.0, %148 ], [ %b.0, %178 ], [ %b.0, %208 ], [ %b.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_211_65) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %219, %239 ], [ %b.0, %183 ], [ %b.0, %200 ], [ %b.0, %211 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %133 ], [ %140, %136 ], [ %b.0, %148 ], [ %b.0, %178 ], [ %b.0, %208 ], [ %b.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_212_66) & (memory_controller_waitrequest == 1'd0)) & (main_212_214 == 1'd1)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %b.0.be = phi i32 [ %219, %239 ], [ %b.0, %183 ], [ %b.0, %200 ], [ %b.0, %211 ], [ %b.0, %legup_memset_4.exit ], [ %b.0, %.backedge ], [ %b.0, %133 ], [ %140, %136 ], [ %b.0, %148 ], [ %b.0, %178 ], [ %b.0, %208 ], [ %b.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_239_72) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_b_0_be_reg <= main__backedge_backedge_b_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_b_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_b_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %217, %239 ], [ %a.0, %183 ], [ %a.0, %200 ], [ %a.0, %211 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %133 ], [ %138, %136 ], [ %a.0, %148 ], [ %a.0, %178 ], [ %a.0, %208 ], [ %a.0, %212 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %217, %239 ], [ %a.0, %183 ], [ %a.0, %200 ], [ %a.0, %211 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %133 ], [ %138, %136 ], [ %a.0, %148 ], [ %a.0, %178 ], [ %a.0, %208 ], [ %a.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_38) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %217, %239 ], [ %a.0, %183 ], [ %a.0, %200 ], [ %a.0, %211 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %133 ], [ %138, %136 ], [ %a.0, %148 ], [ %a.0, %178 ], [ %a.0, %208 ], [ %a.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_133_39) & (memory_controller_waitrequest == 1'd0)) & (main_133_135 == 1'd1)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %217, %239 ], [ %a.0, %183 ], [ %a.0, %200 ], [ %a.0, %211 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %133 ], [ %138, %136 ], [ %a.0, %148 ], [ %a.0, %178 ], [ %a.0, %208 ], [ %a.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_136_42) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be = main_136_138_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %217, %239 ], [ %a.0, %183 ], [ %a.0, %200 ], [ %a.0, %211 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %133 ], [ %138, %136 ], [ %a.0, %148 ], [ %a.0, %178 ], [ %a.0, %208 ], [ %a.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_148_43) & (memory_controller_waitrequest == 1'd0)) & (main_148_150 == 1'd0)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %217, %239 ], [ %a.0, %183 ], [ %a.0, %200 ], [ %a.0, %211 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %133 ], [ %138, %136 ], [ %a.0, %148 ], [ %a.0, %178 ], [ %a.0, %208 ], [ %a.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_178_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %217, %239 ], [ %a.0, %183 ], [ %a.0, %200 ], [ %a.0, %211 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %133 ], [ %138, %136 ], [ %a.0, %148 ], [ %a.0, %178 ], [ %a.0, %208 ], [ %a.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_183_55) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %217, %239 ], [ %a.0, %183 ], [ %a.0, %200 ], [ %a.0, %211 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %133 ], [ %138, %136 ], [ %a.0, %148 ], [ %a.0, %178 ], [ %a.0, %208 ], [ %a.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_200_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %217, %239 ], [ %a.0, %183 ], [ %a.0, %200 ], [ %a.0, %211 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %133 ], [ %138, %136 ], [ %a.0, %148 ], [ %a.0, %178 ], [ %a.0, %208 ], [ %a.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_208_64) & (memory_controller_waitrequest == 1'd0)) & (main_180_182_reg == 1'd1)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %217, %239 ], [ %a.0, %183 ], [ %a.0, %200 ], [ %a.0, %211 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %133 ], [ %138, %136 ], [ %a.0, %148 ], [ %a.0, %178 ], [ %a.0, %208 ], [ %a.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_211_65) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %217, %239 ], [ %a.0, %183 ], [ %a.0, %200 ], [ %a.0, %211 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %133 ], [ %138, %136 ], [ %a.0, %148 ], [ %a.0, %178 ], [ %a.0, %208 ], [ %a.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_212_66) & (memory_controller_waitrequest == 1'd0)) & (main_212_214 == 1'd1)))
begin
main__backedge_backedge_a_0_be = main__backedge_a_0_reg;
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %217, %239 ], [ %a.0, %183 ], [ %a.0, %200 ], [ %a.0, %211 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %133 ], [ %138, %136 ], [ %a.0, %148 ], [ %a.0, %178 ], [ %a.0, %208 ], [ %a.0, %212 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_239_72) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_a_0_be = main_215_217_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %217, %239 ], [ %a.0, %183 ], [ %a.0, %200 ], [ %a.0, %211 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %133 ], [ %138, %136 ], [ %a.0, %148 ], [ %a.0, %178 ], [ %a.0, %208 ], [ %a.0, %212 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %217, %239 ], [ %a.0, %183 ], [ %a.0, %200 ], [ %a.0, %211 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %133 ], [ %138, %136 ], [ %a.0, %148 ], [ %a.0, %178 ], [ %a.0, %208 ], [ %a.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_38) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %217, %239 ], [ %a.0, %183 ], [ %a.0, %200 ], [ %a.0, %211 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %133 ], [ %138, %136 ], [ %a.0, %148 ], [ %a.0, %178 ], [ %a.0, %208 ], [ %a.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_133_39) & (memory_controller_waitrequest == 1'd0)) & (main_133_135 == 1'd1)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %217, %239 ], [ %a.0, %183 ], [ %a.0, %200 ], [ %a.0, %211 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %133 ], [ %138, %136 ], [ %a.0, %148 ], [ %a.0, %178 ], [ %a.0, %208 ], [ %a.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_136_42) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %217, %239 ], [ %a.0, %183 ], [ %a.0, %200 ], [ %a.0, %211 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %133 ], [ %138, %136 ], [ %a.0, %148 ], [ %a.0, %178 ], [ %a.0, %208 ], [ %a.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_148_43) & (memory_controller_waitrequest == 1'd0)) & (main_148_150 == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %217, %239 ], [ %a.0, %183 ], [ %a.0, %200 ], [ %a.0, %211 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %133 ], [ %138, %136 ], [ %a.0, %148 ], [ %a.0, %178 ], [ %a.0, %208 ], [ %a.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_178_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %217, %239 ], [ %a.0, %183 ], [ %a.0, %200 ], [ %a.0, %211 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %133 ], [ %138, %136 ], [ %a.0, %148 ], [ %a.0, %178 ], [ %a.0, %208 ], [ %a.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_183_55) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %217, %239 ], [ %a.0, %183 ], [ %a.0, %200 ], [ %a.0, %211 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %133 ], [ %138, %136 ], [ %a.0, %148 ], [ %a.0, %178 ], [ %a.0, %208 ], [ %a.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_200_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %217, %239 ], [ %a.0, %183 ], [ %a.0, %200 ], [ %a.0, %211 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %133 ], [ %138, %136 ], [ %a.0, %148 ], [ %a.0, %178 ], [ %a.0, %208 ], [ %a.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_208_64) & (memory_controller_waitrequest == 1'd0)) & (main_180_182_reg == 1'd1)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %217, %239 ], [ %a.0, %183 ], [ %a.0, %200 ], [ %a.0, %211 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %133 ], [ %138, %136 ], [ %a.0, %148 ], [ %a.0, %178 ], [ %a.0, %208 ], [ %a.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_211_65) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %217, %239 ], [ %a.0, %183 ], [ %a.0, %200 ], [ %a.0, %211 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %133 ], [ %138, %136 ], [ %a.0, %148 ], [ %a.0, %178 ], [ %a.0, %208 ], [ %a.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_212_66) & (memory_controller_waitrequest == 1'd0)) & (main_212_214 == 1'd1)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %a.0.be = phi i32 [ %217, %239 ], [ %a.0, %183 ], [ %a.0, %200 ], [ %a.0, %211 ], [ 0, %legup_memset_4.exit ], [ %a.0, %.backedge ], [ %a.0, %133 ], [ %138, %136 ], [ %a.0, %148 ], [ %a.0, %178 ], [ %a.0, %208 ], [ %a.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_239_72) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_a_0_be_reg <= main__backedge_backedge_a_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_a_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_a_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %239 ], [ %pos_b_X.0, %183 ], [ %188, %200 ], [ %pos_b_X.0, %211 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %133 ], [ %146, %136 ], [ %pos_b_X.0, %148 ], [ %pos_b_X.0, %178 ], [ -1, %208 ], [ %pos_b_X.0, %212 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %239 ], [ %pos_b_X.0, %183 ], [ %188, %200 ], [ %pos_b_X.0, %211 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %133 ], [ %146, %136 ], [ %pos_b_X.0, %148 ], [ %pos_b_X.0, %178 ], [ -1, %208 ], [ %pos_b_X.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_38) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %239 ], [ %pos_b_X.0, %183 ], [ %188, %200 ], [ %pos_b_X.0, %211 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %133 ], [ %146, %136 ], [ %pos_b_X.0, %148 ], [ %pos_b_X.0, %178 ], [ -1, %208 ], [ %pos_b_X.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_133_39) & (memory_controller_waitrequest == 1'd0)) & (main_133_135 == 1'd1)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %239 ], [ %pos_b_X.0, %183 ], [ %188, %200 ], [ %pos_b_X.0, %211 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %133 ], [ %146, %136 ], [ %pos_b_X.0, %148 ], [ %pos_b_X.0, %178 ], [ -1, %208 ], [ %pos_b_X.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_136_42) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main_136_146;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %239 ], [ %pos_b_X.0, %183 ], [ %188, %200 ], [ %pos_b_X.0, %211 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %133 ], [ %146, %136 ], [ %pos_b_X.0, %148 ], [ %pos_b_X.0, %178 ], [ -1, %208 ], [ %pos_b_X.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_148_43) & (memory_controller_waitrequest == 1'd0)) & (main_148_150 == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %239 ], [ %pos_b_X.0, %183 ], [ %188, %200 ], [ %pos_b_X.0, %211 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %133 ], [ %146, %136 ], [ %pos_b_X.0, %148 ], [ %pos_b_X.0, %178 ], [ -1, %208 ], [ %pos_b_X.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_178_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %239 ], [ %pos_b_X.0, %183 ], [ %188, %200 ], [ %pos_b_X.0, %211 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %133 ], [ %146, %136 ], [ %pos_b_X.0, %148 ], [ %pos_b_X.0, %178 ], [ -1, %208 ], [ %pos_b_X.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_183_55) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %239 ], [ %pos_b_X.0, %183 ], [ %188, %200 ], [ %pos_b_X.0, %211 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %133 ], [ %146, %136 ], [ %pos_b_X.0, %148 ], [ %pos_b_X.0, %178 ], [ -1, %208 ], [ %pos_b_X.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_200_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main_185_188_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %239 ], [ %pos_b_X.0, %183 ], [ %188, %200 ], [ %pos_b_X.0, %211 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %133 ], [ %146, %136 ], [ %pos_b_X.0, %148 ], [ %pos_b_X.0, %178 ], [ -1, %208 ], [ %pos_b_X.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_208_64) & (memory_controller_waitrequest == 1'd0)) & (main_180_182_reg == 1'd1)))
begin
main__backedge_backedge_pos_b_X_0_be = -32'd1;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %239 ], [ %pos_b_X.0, %183 ], [ %188, %200 ], [ %pos_b_X.0, %211 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %133 ], [ %146, %136 ], [ %pos_b_X.0, %148 ], [ %pos_b_X.0, %178 ], [ -1, %208 ], [ %pos_b_X.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_211_65) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %239 ], [ %pos_b_X.0, %183 ], [ %188, %200 ], [ %pos_b_X.0, %211 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %133 ], [ %146, %136 ], [ %pos_b_X.0, %148 ], [ %pos_b_X.0, %178 ], [ -1, %208 ], [ %pos_b_X.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_212_66) & (memory_controller_waitrequest == 1'd0)) & (main_212_214 == 1'd1)))
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %239 ], [ %pos_b_X.0, %183 ], [ %188, %200 ], [ %pos_b_X.0, %211 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %133 ], [ %146, %136 ], [ %pos_b_X.0, %148 ], [ %pos_b_X.0, %178 ], [ -1, %208 ], [ %pos_b_X.0, %212 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_239_72) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_pos_b_X_0_be = main__backedge_pos_b_X_0_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %239 ], [ %pos_b_X.0, %183 ], [ %188, %200 ], [ %pos_b_X.0, %211 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %133 ], [ %146, %136 ], [ %pos_b_X.0, %148 ], [ %pos_b_X.0, %178 ], [ -1, %208 ], [ %pos_b_X.0, %212 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %239 ], [ %pos_b_X.0, %183 ], [ %188, %200 ], [ %pos_b_X.0, %211 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %133 ], [ %146, %136 ], [ %pos_b_X.0, %148 ], [ %pos_b_X.0, %178 ], [ -1, %208 ], [ %pos_b_X.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_38) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %239 ], [ %pos_b_X.0, %183 ], [ %188, %200 ], [ %pos_b_X.0, %211 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %133 ], [ %146, %136 ], [ %pos_b_X.0, %148 ], [ %pos_b_X.0, %178 ], [ -1, %208 ], [ %pos_b_X.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_133_39) & (memory_controller_waitrequest == 1'd0)) & (main_133_135 == 1'd1)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %239 ], [ %pos_b_X.0, %183 ], [ %188, %200 ], [ %pos_b_X.0, %211 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %133 ], [ %146, %136 ], [ %pos_b_X.0, %148 ], [ %pos_b_X.0, %178 ], [ -1, %208 ], [ %pos_b_X.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_136_42) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %239 ], [ %pos_b_X.0, %183 ], [ %188, %200 ], [ %pos_b_X.0, %211 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %133 ], [ %146, %136 ], [ %pos_b_X.0, %148 ], [ %pos_b_X.0, %178 ], [ -1, %208 ], [ %pos_b_X.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_148_43) & (memory_controller_waitrequest == 1'd0)) & (main_148_150 == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %239 ], [ %pos_b_X.0, %183 ], [ %188, %200 ], [ %pos_b_X.0, %211 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %133 ], [ %146, %136 ], [ %pos_b_X.0, %148 ], [ %pos_b_X.0, %178 ], [ -1, %208 ], [ %pos_b_X.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_178_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %239 ], [ %pos_b_X.0, %183 ], [ %188, %200 ], [ %pos_b_X.0, %211 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %133 ], [ %146, %136 ], [ %pos_b_X.0, %148 ], [ %pos_b_X.0, %178 ], [ -1, %208 ], [ %pos_b_X.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_183_55) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %239 ], [ %pos_b_X.0, %183 ], [ %188, %200 ], [ %pos_b_X.0, %211 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %133 ], [ %146, %136 ], [ %pos_b_X.0, %148 ], [ %pos_b_X.0, %178 ], [ -1, %208 ], [ %pos_b_X.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_200_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %239 ], [ %pos_b_X.0, %183 ], [ %188, %200 ], [ %pos_b_X.0, %211 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %133 ], [ %146, %136 ], [ %pos_b_X.0, %148 ], [ %pos_b_X.0, %178 ], [ -1, %208 ], [ %pos_b_X.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_208_64) & (memory_controller_waitrequest == 1'd0)) & (main_180_182_reg == 1'd1)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %239 ], [ %pos_b_X.0, %183 ], [ %188, %200 ], [ %pos_b_X.0, %211 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %133 ], [ %146, %136 ], [ %pos_b_X.0, %148 ], [ %pos_b_X.0, %178 ], [ -1, %208 ], [ %pos_b_X.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_211_65) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %239 ], [ %pos_b_X.0, %183 ], [ %188, %200 ], [ %pos_b_X.0, %211 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %133 ], [ %146, %136 ], [ %pos_b_X.0, %148 ], [ %pos_b_X.0, %178 ], [ -1, %208 ], [ %pos_b_X.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_212_66) & (memory_controller_waitrequest == 1'd0)) & (main_212_214 == 1'd1)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_b_X.0.be = phi i32 [ %pos_b_X.0, %239 ], [ %pos_b_X.0, %183 ], [ %188, %200 ], [ %pos_b_X.0, %211 ], [ %pos_b_X.0, %legup_memset_4.exit ], [ %pos_b_X.0, %.backedge ], [ %pos_b_X.0, %133 ], [ %146, %136 ], [ %pos_b_X.0, %148 ], [ %pos_b_X.0, %178 ], [ -1, %208 ], [ %pos_b_X.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_239_72) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_b_X_0_be_reg <= main__backedge_backedge_pos_b_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_b_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_b_X_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %239 ], [ %pos_a_Y.0, %183 ], [ %pos_a_Y.0, %200 ], [ %pos_a_Y.0, %211 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %133 ], [ %144, %136 ], [ %pos_a_Y.0, %148 ], [ %pos_a_Y.1, %178 ], [ %pos_a_Y.0, %208 ], [ %pos_a_Y.0, %212 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %239 ], [ %pos_a_Y.0, %183 ], [ %pos_a_Y.0, %200 ], [ %pos_a_Y.0, %211 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %133 ], [ %144, %136 ], [ %pos_a_Y.0, %148 ], [ %pos_a_Y.1, %178 ], [ %pos_a_Y.0, %208 ], [ %pos_a_Y.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_38) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %239 ], [ %pos_a_Y.0, %183 ], [ %pos_a_Y.0, %200 ], [ %pos_a_Y.0, %211 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %133 ], [ %144, %136 ], [ %pos_a_Y.0, %148 ], [ %pos_a_Y.1, %178 ], [ %pos_a_Y.0, %208 ], [ %pos_a_Y.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_133_39) & (memory_controller_waitrequest == 1'd0)) & (main_133_135 == 1'd1)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %239 ], [ %pos_a_Y.0, %183 ], [ %pos_a_Y.0, %200 ], [ %pos_a_Y.0, %211 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %133 ], [ %144, %136 ], [ %pos_a_Y.0, %148 ], [ %pos_a_Y.1, %178 ], [ %pos_a_Y.0, %208 ], [ %pos_a_Y.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_136_42) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main_136_144;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %239 ], [ %pos_a_Y.0, %183 ], [ %pos_a_Y.0, %200 ], [ %pos_a_Y.0, %211 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %133 ], [ %144, %136 ], [ %pos_a_Y.0, %148 ], [ %pos_a_Y.1, %178 ], [ %pos_a_Y.0, %208 ], [ %pos_a_Y.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_148_43) & (memory_controller_waitrequest == 1'd0)) & (main_148_150 == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %239 ], [ %pos_a_Y.0, %183 ], [ %pos_a_Y.0, %200 ], [ %pos_a_Y.0, %211 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %133 ], [ %144, %136 ], [ %pos_a_Y.0, %148 ], [ %pos_a_Y.1, %178 ], [ %pos_a_Y.0, %208 ], [ %pos_a_Y.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_178_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main_178_pos_a_Y_1_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %239 ], [ %pos_a_Y.0, %183 ], [ %pos_a_Y.0, %200 ], [ %pos_a_Y.0, %211 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %133 ], [ %144, %136 ], [ %pos_a_Y.0, %148 ], [ %pos_a_Y.1, %178 ], [ %pos_a_Y.0, %208 ], [ %pos_a_Y.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_183_55) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %239 ], [ %pos_a_Y.0, %183 ], [ %pos_a_Y.0, %200 ], [ %pos_a_Y.0, %211 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %133 ], [ %144, %136 ], [ %pos_a_Y.0, %148 ], [ %pos_a_Y.1, %178 ], [ %pos_a_Y.0, %208 ], [ %pos_a_Y.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_200_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %239 ], [ %pos_a_Y.0, %183 ], [ %pos_a_Y.0, %200 ], [ %pos_a_Y.0, %211 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %133 ], [ %144, %136 ], [ %pos_a_Y.0, %148 ], [ %pos_a_Y.1, %178 ], [ %pos_a_Y.0, %208 ], [ %pos_a_Y.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_208_64) & (memory_controller_waitrequest == 1'd0)) & (main_180_182_reg == 1'd1)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %239 ], [ %pos_a_Y.0, %183 ], [ %pos_a_Y.0, %200 ], [ %pos_a_Y.0, %211 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %133 ], [ %144, %136 ], [ %pos_a_Y.0, %148 ], [ %pos_a_Y.1, %178 ], [ %pos_a_Y.0, %208 ], [ %pos_a_Y.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_211_65) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %239 ], [ %pos_a_Y.0, %183 ], [ %pos_a_Y.0, %200 ], [ %pos_a_Y.0, %211 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %133 ], [ %144, %136 ], [ %pos_a_Y.0, %148 ], [ %pos_a_Y.1, %178 ], [ %pos_a_Y.0, %208 ], [ %pos_a_Y.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_212_66) & (memory_controller_waitrequest == 1'd0)) & (main_212_214 == 1'd1)))
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %239 ], [ %pos_a_Y.0, %183 ], [ %pos_a_Y.0, %200 ], [ %pos_a_Y.0, %211 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %133 ], [ %144, %136 ], [ %pos_a_Y.0, %148 ], [ %pos_a_Y.1, %178 ], [ %pos_a_Y.0, %208 ], [ %pos_a_Y.0, %212 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_239_72) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_pos_a_Y_0_be = main__backedge_pos_a_Y_0_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %239 ], [ %pos_a_Y.0, %183 ], [ %pos_a_Y.0, %200 ], [ %pos_a_Y.0, %211 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %133 ], [ %144, %136 ], [ %pos_a_Y.0, %148 ], [ %pos_a_Y.1, %178 ], [ %pos_a_Y.0, %208 ], [ %pos_a_Y.0, %212 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %239 ], [ %pos_a_Y.0, %183 ], [ %pos_a_Y.0, %200 ], [ %pos_a_Y.0, %211 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %133 ], [ %144, %136 ], [ %pos_a_Y.0, %148 ], [ %pos_a_Y.1, %178 ], [ %pos_a_Y.0, %208 ], [ %pos_a_Y.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_38) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %239 ], [ %pos_a_Y.0, %183 ], [ %pos_a_Y.0, %200 ], [ %pos_a_Y.0, %211 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %133 ], [ %144, %136 ], [ %pos_a_Y.0, %148 ], [ %pos_a_Y.1, %178 ], [ %pos_a_Y.0, %208 ], [ %pos_a_Y.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_133_39) & (memory_controller_waitrequest == 1'd0)) & (main_133_135 == 1'd1)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %239 ], [ %pos_a_Y.0, %183 ], [ %pos_a_Y.0, %200 ], [ %pos_a_Y.0, %211 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %133 ], [ %144, %136 ], [ %pos_a_Y.0, %148 ], [ %pos_a_Y.1, %178 ], [ %pos_a_Y.0, %208 ], [ %pos_a_Y.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_136_42) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %239 ], [ %pos_a_Y.0, %183 ], [ %pos_a_Y.0, %200 ], [ %pos_a_Y.0, %211 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %133 ], [ %144, %136 ], [ %pos_a_Y.0, %148 ], [ %pos_a_Y.1, %178 ], [ %pos_a_Y.0, %208 ], [ %pos_a_Y.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_148_43) & (memory_controller_waitrequest == 1'd0)) & (main_148_150 == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %239 ], [ %pos_a_Y.0, %183 ], [ %pos_a_Y.0, %200 ], [ %pos_a_Y.0, %211 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %133 ], [ %144, %136 ], [ %pos_a_Y.0, %148 ], [ %pos_a_Y.1, %178 ], [ %pos_a_Y.0, %208 ], [ %pos_a_Y.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_178_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %239 ], [ %pos_a_Y.0, %183 ], [ %pos_a_Y.0, %200 ], [ %pos_a_Y.0, %211 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %133 ], [ %144, %136 ], [ %pos_a_Y.0, %148 ], [ %pos_a_Y.1, %178 ], [ %pos_a_Y.0, %208 ], [ %pos_a_Y.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_183_55) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %239 ], [ %pos_a_Y.0, %183 ], [ %pos_a_Y.0, %200 ], [ %pos_a_Y.0, %211 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %133 ], [ %144, %136 ], [ %pos_a_Y.0, %148 ], [ %pos_a_Y.1, %178 ], [ %pos_a_Y.0, %208 ], [ %pos_a_Y.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_200_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %239 ], [ %pos_a_Y.0, %183 ], [ %pos_a_Y.0, %200 ], [ %pos_a_Y.0, %211 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %133 ], [ %144, %136 ], [ %pos_a_Y.0, %148 ], [ %pos_a_Y.1, %178 ], [ %pos_a_Y.0, %208 ], [ %pos_a_Y.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_208_64) & (memory_controller_waitrequest == 1'd0)) & (main_180_182_reg == 1'd1)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %239 ], [ %pos_a_Y.0, %183 ], [ %pos_a_Y.0, %200 ], [ %pos_a_Y.0, %211 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %133 ], [ %144, %136 ], [ %pos_a_Y.0, %148 ], [ %pos_a_Y.1, %178 ], [ %pos_a_Y.0, %208 ], [ %pos_a_Y.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_211_65) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %239 ], [ %pos_a_Y.0, %183 ], [ %pos_a_Y.0, %200 ], [ %pos_a_Y.0, %211 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %133 ], [ %144, %136 ], [ %pos_a_Y.0, %148 ], [ %pos_a_Y.1, %178 ], [ %pos_a_Y.0, %208 ], [ %pos_a_Y.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_212_66) & (memory_controller_waitrequest == 1'd0)) & (main_212_214 == 1'd1)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_Y.0.be = phi i32 [ %pos_a_Y.0, %239 ], [ %pos_a_Y.0, %183 ], [ %pos_a_Y.0, %200 ], [ %pos_a_Y.0, %211 ], [ %pos_a_Y.0, %legup_memset_4.exit ], [ %pos_a_Y.0, %.backedge ], [ %pos_a_Y.0, %133 ], [ %144, %136 ], [ %pos_a_Y.0, %148 ], [ %pos_a_Y.1, %178 ], [ %pos_a_Y.0, %208 ], [ %pos_a_Y.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_239_72) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_Y_0_be_reg <= main__backedge_backedge_pos_a_Y_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_Y_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_Y_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %239 ], [ %pos_a_X.0, %183 ], [ %pos_a_X.0, %200 ], [ %pos_a_X.0, %211 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %133 ], [ %142, %136 ], [ %pos_a_X.0, %148 ], [ %pos_a_X.1, %178 ], [ %pos_a_X.0, %208 ], [ %pos_a_X.0, %212 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %239 ], [ %pos_a_X.0, %183 ], [ %pos_a_X.0, %200 ], [ %pos_a_X.0, %211 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %133 ], [ %142, %136 ], [ %pos_a_X.0, %148 ], [ %pos_a_X.1, %178 ], [ %pos_a_X.0, %208 ], [ %pos_a_X.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_38) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %239 ], [ %pos_a_X.0, %183 ], [ %pos_a_X.0, %200 ], [ %pos_a_X.0, %211 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %133 ], [ %142, %136 ], [ %pos_a_X.0, %148 ], [ %pos_a_X.1, %178 ], [ %pos_a_X.0, %208 ], [ %pos_a_X.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_133_39) & (memory_controller_waitrequest == 1'd0)) & (main_133_135 == 1'd1)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %239 ], [ %pos_a_X.0, %183 ], [ %pos_a_X.0, %200 ], [ %pos_a_X.0, %211 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %133 ], [ %142, %136 ], [ %pos_a_X.0, %148 ], [ %pos_a_X.1, %178 ], [ %pos_a_X.0, %208 ], [ %pos_a_X.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_136_42) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main_136_142;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %239 ], [ %pos_a_X.0, %183 ], [ %pos_a_X.0, %200 ], [ %pos_a_X.0, %211 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %133 ], [ %142, %136 ], [ %pos_a_X.0, %148 ], [ %pos_a_X.1, %178 ], [ %pos_a_X.0, %208 ], [ %pos_a_X.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_148_43) & (memory_controller_waitrequest == 1'd0)) & (main_148_150 == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %239 ], [ %pos_a_X.0, %183 ], [ %pos_a_X.0, %200 ], [ %pos_a_X.0, %211 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %133 ], [ %142, %136 ], [ %pos_a_X.0, %148 ], [ %pos_a_X.1, %178 ], [ %pos_a_X.0, %208 ], [ %pos_a_X.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_178_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main_178_pos_a_X_1_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %239 ], [ %pos_a_X.0, %183 ], [ %pos_a_X.0, %200 ], [ %pos_a_X.0, %211 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %133 ], [ %142, %136 ], [ %pos_a_X.0, %148 ], [ %pos_a_X.1, %178 ], [ %pos_a_X.0, %208 ], [ %pos_a_X.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_183_55) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %239 ], [ %pos_a_X.0, %183 ], [ %pos_a_X.0, %200 ], [ %pos_a_X.0, %211 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %133 ], [ %142, %136 ], [ %pos_a_X.0, %148 ], [ %pos_a_X.1, %178 ], [ %pos_a_X.0, %208 ], [ %pos_a_X.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_200_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %239 ], [ %pos_a_X.0, %183 ], [ %pos_a_X.0, %200 ], [ %pos_a_X.0, %211 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %133 ], [ %142, %136 ], [ %pos_a_X.0, %148 ], [ %pos_a_X.1, %178 ], [ %pos_a_X.0, %208 ], [ %pos_a_X.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_208_64) & (memory_controller_waitrequest == 1'd0)) & (main_180_182_reg == 1'd1)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %239 ], [ %pos_a_X.0, %183 ], [ %pos_a_X.0, %200 ], [ %pos_a_X.0, %211 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %133 ], [ %142, %136 ], [ %pos_a_X.0, %148 ], [ %pos_a_X.1, %178 ], [ %pos_a_X.0, %208 ], [ %pos_a_X.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_211_65) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %239 ], [ %pos_a_X.0, %183 ], [ %pos_a_X.0, %200 ], [ %pos_a_X.0, %211 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %133 ], [ %142, %136 ], [ %pos_a_X.0, %148 ], [ %pos_a_X.1, %178 ], [ %pos_a_X.0, %208 ], [ %pos_a_X.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_212_66) & (memory_controller_waitrequest == 1'd0)) & (main_212_214 == 1'd1)))
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %239 ], [ %pos_a_X.0, %183 ], [ %pos_a_X.0, %200 ], [ %pos_a_X.0, %211 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %133 ], [ %142, %136 ], [ %pos_a_X.0, %148 ], [ %pos_a_X.1, %178 ], [ %pos_a_X.0, %208 ], [ %pos_a_X.0, %212 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_239_72) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_pos_a_X_0_be = main__backedge_pos_a_X_0_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %239 ], [ %pos_a_X.0, %183 ], [ %pos_a_X.0, %200 ], [ %pos_a_X.0, %211 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %133 ], [ %142, %136 ], [ %pos_a_X.0, %148 ], [ %pos_a_X.1, %178 ], [ %pos_a_X.0, %208 ], [ %pos_a_X.0, %212 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %239 ], [ %pos_a_X.0, %183 ], [ %pos_a_X.0, %200 ], [ %pos_a_X.0, %211 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %133 ], [ %142, %136 ], [ %pos_a_X.0, %148 ], [ %pos_a_X.1, %178 ], [ %pos_a_X.0, %208 ], [ %pos_a_X.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_38) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %239 ], [ %pos_a_X.0, %183 ], [ %pos_a_X.0, %200 ], [ %pos_a_X.0, %211 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %133 ], [ %142, %136 ], [ %pos_a_X.0, %148 ], [ %pos_a_X.1, %178 ], [ %pos_a_X.0, %208 ], [ %pos_a_X.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_133_39) & (memory_controller_waitrequest == 1'd0)) & (main_133_135 == 1'd1)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %239 ], [ %pos_a_X.0, %183 ], [ %pos_a_X.0, %200 ], [ %pos_a_X.0, %211 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %133 ], [ %142, %136 ], [ %pos_a_X.0, %148 ], [ %pos_a_X.1, %178 ], [ %pos_a_X.0, %208 ], [ %pos_a_X.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_136_42) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %239 ], [ %pos_a_X.0, %183 ], [ %pos_a_X.0, %200 ], [ %pos_a_X.0, %211 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %133 ], [ %142, %136 ], [ %pos_a_X.0, %148 ], [ %pos_a_X.1, %178 ], [ %pos_a_X.0, %208 ], [ %pos_a_X.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_148_43) & (memory_controller_waitrequest == 1'd0)) & (main_148_150 == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %239 ], [ %pos_a_X.0, %183 ], [ %pos_a_X.0, %200 ], [ %pos_a_X.0, %211 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %133 ], [ %142, %136 ], [ %pos_a_X.0, %148 ], [ %pos_a_X.1, %178 ], [ %pos_a_X.0, %208 ], [ %pos_a_X.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_178_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %239 ], [ %pos_a_X.0, %183 ], [ %pos_a_X.0, %200 ], [ %pos_a_X.0, %211 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %133 ], [ %142, %136 ], [ %pos_a_X.0, %148 ], [ %pos_a_X.1, %178 ], [ %pos_a_X.0, %208 ], [ %pos_a_X.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_183_55) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %239 ], [ %pos_a_X.0, %183 ], [ %pos_a_X.0, %200 ], [ %pos_a_X.0, %211 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %133 ], [ %142, %136 ], [ %pos_a_X.0, %148 ], [ %pos_a_X.1, %178 ], [ %pos_a_X.0, %208 ], [ %pos_a_X.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_200_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %239 ], [ %pos_a_X.0, %183 ], [ %pos_a_X.0, %200 ], [ %pos_a_X.0, %211 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %133 ], [ %142, %136 ], [ %pos_a_X.0, %148 ], [ %pos_a_X.1, %178 ], [ %pos_a_X.0, %208 ], [ %pos_a_X.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_208_64) & (memory_controller_waitrequest == 1'd0)) & (main_180_182_reg == 1'd1)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %239 ], [ %pos_a_X.0, %183 ], [ %pos_a_X.0, %200 ], [ %pos_a_X.0, %211 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %133 ], [ %142, %136 ], [ %pos_a_X.0, %148 ], [ %pos_a_X.1, %178 ], [ %pos_a_X.0, %208 ], [ %pos_a_X.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_211_65) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %239 ], [ %pos_a_X.0, %183 ], [ %pos_a_X.0, %200 ], [ %pos_a_X.0, %211 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %133 ], [ %142, %136 ], [ %pos_a_X.0, %148 ], [ %pos_a_X.1, %178 ], [ %pos_a_X.0, %208 ], [ %pos_a_X.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_212_66) & (memory_controller_waitrequest == 1'd0)) & (main_212_214 == 1'd1)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %pos_a_X.0.be = phi i32 [ %pos_a_X.0, %239 ], [ %pos_a_X.0, %183 ], [ %pos_a_X.0, %200 ], [ %pos_a_X.0, %211 ], [ %pos_a_X.0, %legup_memset_4.exit ], [ %pos_a_X.0, %.backedge ], [ %pos_a_X.0, %133 ], [ %142, %136 ], [ %pos_a_X.0, %148 ], [ %pos_a_X.1, %178 ], [ %pos_a_X.0, %208 ], [ %pos_a_X.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_239_72) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_pos_a_X_0_be_reg <= main__backedge_backedge_pos_a_X_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_pos_a_X_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_pos_a_X_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %239 ], [ 0, %183 ], [ 0, %200 ], [ 0, %211 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %133 ], [ %j.0, %136 ], [ 0, %148 ], [ %.16, %178 ], [ %192, %208 ], [ %j.0, %212 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_j_0_be = main__backedge_j_0_reg;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %239 ], [ 0, %183 ], [ 0, %200 ], [ 0, %211 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %133 ], [ %j.0, %136 ], [ 0, %148 ], [ %.16, %178 ], [ %192, %208 ], [ %j.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_38) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %239 ], [ 0, %183 ], [ 0, %200 ], [ 0, %211 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %133 ], [ %j.0, %136 ], [ 0, %148 ], [ %.16, %178 ], [ %192, %208 ], [ %j.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_133_39) & (memory_controller_waitrequest == 1'd0)) & (main_133_135 == 1'd1)))
begin
main__backedge_backedge_j_0_be = main__backedge_j_0_reg;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %239 ], [ 0, %183 ], [ 0, %200 ], [ 0, %211 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %133 ], [ %j.0, %136 ], [ 0, %148 ], [ %.16, %178 ], [ %192, %208 ], [ %j.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_136_42) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be = main__backedge_j_0_reg;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %239 ], [ 0, %183 ], [ 0, %200 ], [ 0, %211 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %133 ], [ %j.0, %136 ], [ 0, %148 ], [ %.16, %178 ], [ %192, %208 ], [ %j.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_148_43) & (memory_controller_waitrequest == 1'd0)) & (main_148_150 == 1'd0)))
begin
main__backedge_backedge_j_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %239 ], [ 0, %183 ], [ 0, %200 ], [ 0, %211 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %133 ], [ %j.0, %136 ], [ 0, %148 ], [ %.16, %178 ], [ %192, %208 ], [ %j.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_178_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be = main_178__16;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %239 ], [ 0, %183 ], [ 0, %200 ], [ 0, %211 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %133 ], [ %j.0, %136 ], [ 0, %148 ], [ %.16, %178 ], [ %192, %208 ], [ %j.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_183_55) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %239 ], [ 0, %183 ], [ 0, %200 ], [ 0, %211 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %133 ], [ %j.0, %136 ], [ 0, %148 ], [ %.16, %178 ], [ %192, %208 ], [ %j.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_200_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %239 ], [ 0, %183 ], [ 0, %200 ], [ 0, %211 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %133 ], [ %j.0, %136 ], [ 0, %148 ], [ %.16, %178 ], [ %192, %208 ], [ %j.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_208_64) & (memory_controller_waitrequest == 1'd0)) & (main_180_182_reg == 1'd1)))
begin
main__backedge_backedge_j_0_be = main_185_192_reg;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %239 ], [ 0, %183 ], [ 0, %200 ], [ 0, %211 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %133 ], [ %j.0, %136 ], [ 0, %148 ], [ %.16, %178 ], [ %192, %208 ], [ %j.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_211_65) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %239 ], [ 0, %183 ], [ 0, %200 ], [ 0, %211 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %133 ], [ %j.0, %136 ], [ 0, %148 ], [ %.16, %178 ], [ %192, %208 ], [ %j.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_212_66) & (memory_controller_waitrequest == 1'd0)) & (main_212_214 == 1'd1)))
begin
main__backedge_backedge_j_0_be = main__backedge_j_0_reg;
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %239 ], [ 0, %183 ], [ 0, %200 ], [ 0, %211 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %133 ], [ %j.0, %136 ], [ 0, %148 ], [ %.16, %178 ], [ %192, %208 ], [ %j.0, %212 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_239_72) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_j_0_be = main__backedge_j_0_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %239 ], [ 0, %183 ], [ 0, %200 ], [ 0, %211 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %133 ], [ %j.0, %136 ], [ 0, %148 ], [ %.16, %178 ], [ %192, %208 ], [ %j.0, %212 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %239 ], [ 0, %183 ], [ 0, %200 ], [ 0, %211 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %133 ], [ %j.0, %136 ], [ 0, %148 ], [ %.16, %178 ], [ %192, %208 ], [ %j.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_38) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %239 ], [ 0, %183 ], [ 0, %200 ], [ 0, %211 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %133 ], [ %j.0, %136 ], [ 0, %148 ], [ %.16, %178 ], [ %192, %208 ], [ %j.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_133_39) & (memory_controller_waitrequest == 1'd0)) & (main_133_135 == 1'd1)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %239 ], [ 0, %183 ], [ 0, %200 ], [ 0, %211 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %133 ], [ %j.0, %136 ], [ 0, %148 ], [ %.16, %178 ], [ %192, %208 ], [ %j.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_136_42) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %239 ], [ 0, %183 ], [ 0, %200 ], [ 0, %211 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %133 ], [ %j.0, %136 ], [ 0, %148 ], [ %.16, %178 ], [ %192, %208 ], [ %j.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_148_43) & (memory_controller_waitrequest == 1'd0)) & (main_148_150 == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %239 ], [ 0, %183 ], [ 0, %200 ], [ 0, %211 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %133 ], [ %j.0, %136 ], [ 0, %148 ], [ %.16, %178 ], [ %192, %208 ], [ %j.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_178_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %239 ], [ 0, %183 ], [ 0, %200 ], [ 0, %211 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %133 ], [ %j.0, %136 ], [ 0, %148 ], [ %.16, %178 ], [ %192, %208 ], [ %j.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_183_55) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %239 ], [ 0, %183 ], [ 0, %200 ], [ 0, %211 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %133 ], [ %j.0, %136 ], [ 0, %148 ], [ %.16, %178 ], [ %192, %208 ], [ %j.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_200_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %239 ], [ 0, %183 ], [ 0, %200 ], [ 0, %211 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %133 ], [ %j.0, %136 ], [ 0, %148 ], [ %.16, %178 ], [ %192, %208 ], [ %j.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_208_64) & (memory_controller_waitrequest == 1'd0)) & (main_180_182_reg == 1'd1)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %239 ], [ 0, %183 ], [ 0, %200 ], [ 0, %211 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %133 ], [ %j.0, %136 ], [ 0, %148 ], [ %.16, %178 ], [ %192, %208 ], [ %j.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_211_65) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %239 ], [ 0, %183 ], [ 0, %200 ], [ 0, %211 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %133 ], [ %j.0, %136 ], [ 0, %148 ], [ %.16, %178 ], [ %192, %208 ], [ %j.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_212_66) & (memory_controller_waitrequest == 1'd0)) & (main_212_214 == 1'd1)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %j.0.be = phi i32 [ %j.0, %239 ], [ 0, %183 ], [ 0, %200 ], [ 0, %211 ], [ 0, %legup_memset_4.exit ], [ %j.0, %.backedge ], [ %j.0, %133 ], [ %j.0, %136 ], [ 0, %148 ], [ %.16, %178 ], [ %192, %208 ], [ %j.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_239_72) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_j_0_be_reg <= main__backedge_backedge_j_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_j_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_j_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %240, %239 ], [ %184, %183 ], [ %203, %200 ], [ %i.0., %211 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %133 ], [ %i.0, %136 ], [ %i.0, %148 ], [ %i.0, %178 ], [ %i.0., %208 ], [ 15, %212 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_i_0_be = main__backedge_i_0_reg;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %240, %239 ], [ %184, %183 ], [ %203, %200 ], [ %i.0., %211 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %133 ], [ %i.0, %136 ], [ %i.0, %148 ], [ %i.0, %178 ], [ %i.0., %208 ], [ 15, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_38) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %240, %239 ], [ %184, %183 ], [ %203, %200 ], [ %i.0., %211 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %133 ], [ %i.0, %136 ], [ %i.0, %148 ], [ %i.0, %178 ], [ %i.0., %208 ], [ 15, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_133_39) & (memory_controller_waitrequest == 1'd0)) & (main_133_135 == 1'd1)))
begin
main__backedge_backedge_i_0_be = 32'd0;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %240, %239 ], [ %184, %183 ], [ %203, %200 ], [ %i.0., %211 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %133 ], [ %i.0, %136 ], [ %i.0, %148 ], [ %i.0, %178 ], [ %i.0., %208 ], [ 15, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_136_42) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be = main__backedge_i_0_reg;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %240, %239 ], [ %184, %183 ], [ %203, %200 ], [ %i.0., %211 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %133 ], [ %i.0, %136 ], [ %i.0, %148 ], [ %i.0, %178 ], [ %i.0., %208 ], [ 15, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_148_43) & (memory_controller_waitrequest == 1'd0)) & (main_148_150 == 1'd0)))
begin
main__backedge_backedge_i_0_be = main__backedge_i_0_reg;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %240, %239 ], [ %184, %183 ], [ %203, %200 ], [ %i.0., %211 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %133 ], [ %i.0, %136 ], [ %i.0, %148 ], [ %i.0, %178 ], [ %i.0., %208 ], [ 15, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_178_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be = main__backedge_i_0_reg;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %240, %239 ], [ %184, %183 ], [ %203, %200 ], [ %i.0., %211 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %133 ], [ %i.0, %136 ], [ %i.0, %148 ], [ %i.0, %178 ], [ %i.0., %208 ], [ 15, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_183_55) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be = main_183_184;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %240, %239 ], [ %184, %183 ], [ %203, %200 ], [ %i.0., %211 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %133 ], [ %i.0, %136 ], [ %i.0, %148 ], [ %i.0, %178 ], [ %i.0., %208 ], [ 15, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_200_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be = main_200_203_reg;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %240, %239 ], [ %184, %183 ], [ %203, %200 ], [ %i.0., %211 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %133 ], [ %i.0, %136 ], [ %i.0, %148 ], [ %i.0, %178 ], [ %i.0., %208 ], [ 15, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_208_64) & (memory_controller_waitrequest == 1'd0)) & (main_180_182_reg == 1'd1)))
begin
main__backedge_backedge_i_0_be = main_208_i_0_;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %240, %239 ], [ %184, %183 ], [ %203, %200 ], [ %i.0., %211 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %133 ], [ %i.0, %136 ], [ %i.0, %148 ], [ %i.0, %178 ], [ %i.0., %208 ], [ 15, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_211_65) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be = main_208_i_0__reg;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %240, %239 ], [ %184, %183 ], [ %203, %200 ], [ %i.0., %211 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %133 ], [ %i.0, %136 ], [ %i.0, %148 ], [ %i.0, %178 ], [ %i.0., %208 ], [ 15, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_212_66) & (memory_controller_waitrequest == 1'd0)) & (main_212_214 == 1'd1)))
begin
main__backedge_backedge_i_0_be = 32'd15;
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %240, %239 ], [ %184, %183 ], [ %203, %200 ], [ %i.0., %211 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %133 ], [ %i.0, %136 ], [ %i.0, %148 ], [ %i.0, %178 ], [ %i.0., %208 ], [ 15, %212 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_239_72) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_i_0_be = main_239_240;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %240, %239 ], [ %184, %183 ], [ %203, %200 ], [ %i.0., %211 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %133 ], [ %i.0, %136 ], [ %i.0, %148 ], [ %i.0, %178 ], [ %i.0., %208 ], [ 15, %212 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %240, %239 ], [ %184, %183 ], [ %203, %200 ], [ %i.0., %211 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %133 ], [ %i.0, %136 ], [ %i.0, %148 ], [ %i.0, %178 ], [ %i.0., %208 ], [ 15, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_38) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %240, %239 ], [ %184, %183 ], [ %203, %200 ], [ %i.0., %211 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %133 ], [ %i.0, %136 ], [ %i.0, %148 ], [ %i.0, %178 ], [ %i.0., %208 ], [ 15, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_133_39) & (memory_controller_waitrequest == 1'd0)) & (main_133_135 == 1'd1)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %240, %239 ], [ %184, %183 ], [ %203, %200 ], [ %i.0., %211 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %133 ], [ %i.0, %136 ], [ %i.0, %148 ], [ %i.0, %178 ], [ %i.0., %208 ], [ 15, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_136_42) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %240, %239 ], [ %184, %183 ], [ %203, %200 ], [ %i.0., %211 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %133 ], [ %i.0, %136 ], [ %i.0, %148 ], [ %i.0, %178 ], [ %i.0., %208 ], [ 15, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_148_43) & (memory_controller_waitrequest == 1'd0)) & (main_148_150 == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %240, %239 ], [ %184, %183 ], [ %203, %200 ], [ %i.0., %211 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %133 ], [ %i.0, %136 ], [ %i.0, %148 ], [ %i.0, %178 ], [ %i.0., %208 ], [ 15, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_178_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %240, %239 ], [ %184, %183 ], [ %203, %200 ], [ %i.0., %211 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %133 ], [ %i.0, %136 ], [ %i.0, %148 ], [ %i.0, %178 ], [ %i.0., %208 ], [ 15, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_183_55) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %240, %239 ], [ %184, %183 ], [ %203, %200 ], [ %i.0., %211 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %133 ], [ %i.0, %136 ], [ %i.0, %148 ], [ %i.0, %178 ], [ %i.0., %208 ], [ 15, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_200_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %240, %239 ], [ %184, %183 ], [ %203, %200 ], [ %i.0., %211 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %133 ], [ %i.0, %136 ], [ %i.0, %148 ], [ %i.0, %178 ], [ %i.0., %208 ], [ 15, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_208_64) & (memory_controller_waitrequest == 1'd0)) & (main_180_182_reg == 1'd1)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %240, %239 ], [ %184, %183 ], [ %203, %200 ], [ %i.0., %211 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %133 ], [ %i.0, %136 ], [ %i.0, %148 ], [ %i.0, %178 ], [ %i.0., %208 ], [ 15, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_211_65) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %240, %239 ], [ %184, %183 ], [ %203, %200 ], [ %i.0., %211 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %133 ], [ %i.0, %136 ], [ %i.0, %148 ], [ %i.0, %178 ], [ %i.0., %208 ], [ 15, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_212_66) & (memory_controller_waitrequest == 1'd0)) & (main_212_214 == 1'd1)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %i.0.be = phi i32 [ %240, %239 ], [ %184, %183 ], [ %203, %200 ], [ %i.0., %211 ], [ 0, %legup_memset_4.exit ], [ %i.0, %.backedge ], [ 0, %133 ], [ %i.0, %136 ], [ %i.0, %148 ], [ %i.0, %178 ], [ %i.0., %208 ], [ 15, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_239_72) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_i_0_be_reg <= main__backedge_backedge_i_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_i_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_i_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %239 ], [ 1, %183 ], [ 1, %200 ], [ 1, %211 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %133 ], [ %., %136 ], [ 3, %148 ], [ %.17, %178 ], [ 3, %208 ], [ 5, %212 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_state_0_be = main__backedge_state_0_reg;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %239 ], [ 1, %183 ], [ 1, %200 ], [ 1, %211 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %133 ], [ %., %136 ], [ 3, %148 ], [ %.17, %178 ], [ 3, %208 ], [ 5, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_38) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be = 32'd1;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %239 ], [ 1, %183 ], [ 1, %200 ], [ 1, %211 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %133 ], [ %., %136 ], [ 3, %148 ], [ %.17, %178 ], [ 3, %208 ], [ 5, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_133_39) & (memory_controller_waitrequest == 1'd0)) & (main_133_135 == 1'd1)))
begin
main__backedge_backedge_state_0_be = 32'd4;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %239 ], [ 1, %183 ], [ 1, %200 ], [ 1, %211 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %133 ], [ %., %136 ], [ 3, %148 ], [ %.17, %178 ], [ 3, %208 ], [ 5, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_136_42) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be = main_136___reg;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %239 ], [ 1, %183 ], [ 1, %200 ], [ 1, %211 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %133 ], [ %., %136 ], [ 3, %148 ], [ %.17, %178 ], [ 3, %208 ], [ 5, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_148_43) & (memory_controller_waitrequest == 1'd0)) & (main_148_150 == 1'd0)))
begin
main__backedge_backedge_state_0_be = 32'd3;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %239 ], [ 1, %183 ], [ 1, %200 ], [ 1, %211 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %133 ], [ %., %136 ], [ 3, %148 ], [ %.17, %178 ], [ 3, %208 ], [ 5, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_178_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be = main_178__17;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %239 ], [ 1, %183 ], [ 1, %200 ], [ 1, %211 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %133 ], [ %., %136 ], [ 3, %148 ], [ %.17, %178 ], [ 3, %208 ], [ 5, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_183_55) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be = 32'd1;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %239 ], [ 1, %183 ], [ 1, %200 ], [ 1, %211 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %133 ], [ %., %136 ], [ 3, %148 ], [ %.17, %178 ], [ 3, %208 ], [ 5, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_200_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be = 32'd1;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %239 ], [ 1, %183 ], [ 1, %200 ], [ 1, %211 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %133 ], [ %., %136 ], [ 3, %148 ], [ %.17, %178 ], [ 3, %208 ], [ 5, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_208_64) & (memory_controller_waitrequest == 1'd0)) & (main_180_182_reg == 1'd1)))
begin
main__backedge_backedge_state_0_be = 32'd3;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %239 ], [ 1, %183 ], [ 1, %200 ], [ 1, %211 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %133 ], [ %., %136 ], [ 3, %148 ], [ %.17, %178 ], [ 3, %208 ], [ 5, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_211_65) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be = 32'd1;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %239 ], [ 1, %183 ], [ 1, %200 ], [ 1, %211 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %133 ], [ %., %136 ], [ 3, %148 ], [ %.17, %178 ], [ 3, %208 ], [ 5, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_212_66) & (memory_controller_waitrequest == 1'd0)) & (main_212_214 == 1'd1)))
begin
main__backedge_backedge_state_0_be = 32'd5;
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %239 ], [ 1, %183 ], [ 1, %200 ], [ 1, %211 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %133 ], [ %., %136 ], [ 3, %148 ], [ %.17, %178 ], [ 3, %208 ], [ 5, %212 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_239_72) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_state_0_be = main__backedge_state_0_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %239 ], [ 1, %183 ], [ 1, %200 ], [ 1, %211 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %133 ], [ %., %136 ], [ 3, %148 ], [ %.17, %178 ], [ 3, %208 ], [ 5, %212 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %239 ], [ 1, %183 ], [ 1, %200 ], [ 1, %211 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %133 ], [ %., %136 ], [ 3, %148 ], [ %.17, %178 ], [ 3, %208 ], [ 5, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_38) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %239 ], [ 1, %183 ], [ 1, %200 ], [ 1, %211 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %133 ], [ %., %136 ], [ 3, %148 ], [ %.17, %178 ], [ 3, %208 ], [ 5, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_133_39) & (memory_controller_waitrequest == 1'd0)) & (main_133_135 == 1'd1)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %239 ], [ 1, %183 ], [ 1, %200 ], [ 1, %211 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %133 ], [ %., %136 ], [ 3, %148 ], [ %.17, %178 ], [ 3, %208 ], [ 5, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_136_42) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %239 ], [ 1, %183 ], [ 1, %200 ], [ 1, %211 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %133 ], [ %., %136 ], [ 3, %148 ], [ %.17, %178 ], [ 3, %208 ], [ 5, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_148_43) & (memory_controller_waitrequest == 1'd0)) & (main_148_150 == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %239 ], [ 1, %183 ], [ 1, %200 ], [ 1, %211 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %133 ], [ %., %136 ], [ 3, %148 ], [ %.17, %178 ], [ 3, %208 ], [ 5, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_178_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %239 ], [ 1, %183 ], [ 1, %200 ], [ 1, %211 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %133 ], [ %., %136 ], [ 3, %148 ], [ %.17, %178 ], [ 3, %208 ], [ 5, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_183_55) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %239 ], [ 1, %183 ], [ 1, %200 ], [ 1, %211 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %133 ], [ %., %136 ], [ 3, %148 ], [ %.17, %178 ], [ 3, %208 ], [ 5, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_200_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %239 ], [ 1, %183 ], [ 1, %200 ], [ 1, %211 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %133 ], [ %., %136 ], [ 3, %148 ], [ %.17, %178 ], [ 3, %208 ], [ 5, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_208_64) & (memory_controller_waitrequest == 1'd0)) & (main_180_182_reg == 1'd1)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %239 ], [ 1, %183 ], [ 1, %200 ], [ 1, %211 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %133 ], [ %., %136 ], [ 3, %148 ], [ %.17, %178 ], [ 3, %208 ], [ 5, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_211_65) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %239 ], [ 1, %183 ], [ 1, %200 ], [ 1, %211 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %133 ], [ %., %136 ], [ 3, %148 ], [ %.17, %178 ], [ 3, %208 ], [ 5, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_212_66) & (memory_controller_waitrequest == 1'd0)) & (main_212_214 == 1'd1)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %state.0.be = phi i32 [ %state.0, %239 ], [ 1, %183 ], [ 1, %200 ], [ 1, %211 ], [ 1, %legup_memset_4.exit ], [ %state.0, %.backedge ], [ 4, %133 ], [ %., %136 ], [ 3, %148 ], [ %.17, %178 ], [ 3, %208 ], [ 5, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_239_72) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_state_0_be_reg <= main__backedge_backedge_state_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_state_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_state_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %sum.1, %239 ], [ %sum.0, %183 ], [ %sum.0, %200 ], [ %sum.0, %211 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %133 ], [ %sum.0, %136 ], [ %sum.0, %148 ], [ %sum.0, %178 ], [ %sum.0, %208 ], [ %sum.0, %212 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %sum.1, %239 ], [ %sum.0, %183 ], [ %sum.0, %200 ], [ %sum.0, %211 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %133 ], [ %sum.0, %136 ], [ %sum.0, %148 ], [ %sum.0, %178 ], [ %sum.0, %208 ], [ %sum.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_38) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %sum.1, %239 ], [ %sum.0, %183 ], [ %sum.0, %200 ], [ %sum.0, %211 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %133 ], [ %sum.0, %136 ], [ %sum.0, %148 ], [ %sum.0, %178 ], [ %sum.0, %208 ], [ %sum.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_133_39) & (memory_controller_waitrequest == 1'd0)) & (main_133_135 == 1'd1)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %sum.1, %239 ], [ %sum.0, %183 ], [ %sum.0, %200 ], [ %sum.0, %211 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %133 ], [ %sum.0, %136 ], [ %sum.0, %148 ], [ %sum.0, %178 ], [ %sum.0, %208 ], [ %sum.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_136_42) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %sum.1, %239 ], [ %sum.0, %183 ], [ %sum.0, %200 ], [ %sum.0, %211 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %133 ], [ %sum.0, %136 ], [ %sum.0, %148 ], [ %sum.0, %178 ], [ %sum.0, %208 ], [ %sum.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_148_43) & (memory_controller_waitrequest == 1'd0)) & (main_148_150 == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %sum.1, %239 ], [ %sum.0, %183 ], [ %sum.0, %200 ], [ %sum.0, %211 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %133 ], [ %sum.0, %136 ], [ %sum.0, %148 ], [ %sum.0, %178 ], [ %sum.0, %208 ], [ %sum.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_178_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %sum.1, %239 ], [ %sum.0, %183 ], [ %sum.0, %200 ], [ %sum.0, %211 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %133 ], [ %sum.0, %136 ], [ %sum.0, %148 ], [ %sum.0, %178 ], [ %sum.0, %208 ], [ %sum.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_183_55) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %sum.1, %239 ], [ %sum.0, %183 ], [ %sum.0, %200 ], [ %sum.0, %211 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %133 ], [ %sum.0, %136 ], [ %sum.0, %148 ], [ %sum.0, %178 ], [ %sum.0, %208 ], [ %sum.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_200_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %sum.1, %239 ], [ %sum.0, %183 ], [ %sum.0, %200 ], [ %sum.0, %211 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %133 ], [ %sum.0, %136 ], [ %sum.0, %148 ], [ %sum.0, %178 ], [ %sum.0, %208 ], [ %sum.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_208_64) & (memory_controller_waitrequest == 1'd0)) & (main_180_182_reg == 1'd1)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %sum.1, %239 ], [ %sum.0, %183 ], [ %sum.0, %200 ], [ %sum.0, %211 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %133 ], [ %sum.0, %136 ], [ %sum.0, %148 ], [ %sum.0, %178 ], [ %sum.0, %208 ], [ %sum.0, %212 ]*/
else if (((cur_state == LEGUP_F_main_BB_211_65) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %sum.1, %239 ], [ %sum.0, %183 ], [ %sum.0, %200 ], [ %sum.0, %211 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %133 ], [ %sum.0, %136 ], [ %sum.0, %148 ], [ %sum.0, %178 ], [ %sum.0, %208 ], [ %sum.0, %212 ]*/
else if ((((cur_state == LEGUP_F_main_BB_212_66) & (memory_controller_waitrequest == 1'd0)) & (main_212_214 == 1'd1)))
begin
main__backedge_backedge_sum_0_be = main__backedge_sum_0_reg;
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %sum.1, %239 ], [ %sum.0, %183 ], [ %sum.0, %200 ], [ %sum.0, %211 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %133 ], [ %sum.0, %136 ], [ %sum.0, %148 ], [ %sum.0, %178 ], [ %sum.0, %208 ], [ %sum.0, %212 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_239_72) & (memory_controller_waitrequest == 1'd0))) */
begin
main__backedge_backedge_sum_0_be = main_239_sum_1_reg;
end
end
always @(posedge clk) begin
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %sum.1, %239 ], [ %sum.0, %183 ], [ %sum.0, %200 ], [ %sum.0, %211 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %133 ], [ %sum.0, %136 ], [ %sum.0, %148 ], [ %sum.0, %178 ], [ %sum.0, %208 ], [ %sum.0, %212 ]*/
if (((((((((cur_state == LEGUP_F_main_BB__backedge_2) & (memory_controller_waitrequest == 1'd0)) & (main__backedge_state_0_reg != 32'd5)) & (main__backedge_state_0_reg != 32'd0)) & (main__backedge_state_0_reg != 32'd1)) & (main__backedge_state_0_reg != 32'd2)) & (main__backedge_state_0_reg != 32'd3)) & (main__backedge_state_0_reg != 32'd4)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %sum.1, %239 ], [ %sum.0, %183 ], [ %sum.0, %200 ], [ %sum.0, %211 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %133 ], [ %sum.0, %136 ], [ %sum.0, %148 ], [ %sum.0, %178 ], [ %sum.0, %208 ], [ %sum.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_38) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %sum.1, %239 ], [ %sum.0, %183 ], [ %sum.0, %200 ], [ %sum.0, %211 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %133 ], [ %sum.0, %136 ], [ %sum.0, %148 ], [ %sum.0, %178 ], [ %sum.0, %208 ], [ %sum.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_133_39) & (memory_controller_waitrequest == 1'd0)) & (main_133_135 == 1'd1)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %sum.1, %239 ], [ %sum.0, %183 ], [ %sum.0, %200 ], [ %sum.0, %211 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %133 ], [ %sum.0, %136 ], [ %sum.0, %148 ], [ %sum.0, %178 ], [ %sum.0, %208 ], [ %sum.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_136_42) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %sum.1, %239 ], [ %sum.0, %183 ], [ %sum.0, %200 ], [ %sum.0, %211 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %133 ], [ %sum.0, %136 ], [ %sum.0, %148 ], [ %sum.0, %178 ], [ %sum.0, %208 ], [ %sum.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_148_43) & (memory_controller_waitrequest == 1'd0)) & (main_148_150 == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %sum.1, %239 ], [ %sum.0, %183 ], [ %sum.0, %200 ], [ %sum.0, %211 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %133 ], [ %sum.0, %136 ], [ %sum.0, %148 ], [ %sum.0, %178 ], [ %sum.0, %208 ], [ %sum.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_178_53) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %sum.1, %239 ], [ %sum.0, %183 ], [ %sum.0, %200 ], [ %sum.0, %211 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %133 ], [ %sum.0, %136 ], [ %sum.0, %148 ], [ %sum.0, %178 ], [ %sum.0, %208 ], [ %sum.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_183_55) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %sum.1, %239 ], [ %sum.0, %183 ], [ %sum.0, %200 ], [ %sum.0, %211 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %133 ], [ %sum.0, %136 ], [ %sum.0, %148 ], [ %sum.0, %178 ], [ %sum.0, %208 ], [ %sum.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_200_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %sum.1, %239 ], [ %sum.0, %183 ], [ %sum.0, %200 ], [ %sum.0, %211 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %133 ], [ %sum.0, %136 ], [ %sum.0, %148 ], [ %sum.0, %178 ], [ %sum.0, %208 ], [ %sum.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_208_64) & (memory_controller_waitrequest == 1'd0)) & (main_180_182_reg == 1'd1)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %sum.1, %239 ], [ %sum.0, %183 ], [ %sum.0, %200 ], [ %sum.0, %211 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %133 ], [ %sum.0, %136 ], [ %sum.0, %148 ], [ %sum.0, %178 ], [ %sum.0, %208 ], [ %sum.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_211_65) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %sum.1, %239 ], [ %sum.0, %183 ], [ %sum.0, %200 ], [ %sum.0, %211 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %133 ], [ %sum.0, %136 ], [ %sum.0, %148 ], [ %sum.0, %178 ], [ %sum.0, %208 ], [ %sum.0, %212 ]*/
if ((((cur_state == LEGUP_F_main_BB_212_66) & (memory_controller_waitrequest == 1'd0)) & (main_212_214 == 1'd1)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
/* main: %.backedge.backedge*/
/*   %sum.0.be = phi i32 [ %sum.1, %239 ], [ %sum.0, %183 ], [ %sum.0, %200 ], [ %sum.0, %211 ], [ %sum.0, %legup_memset_4.exit ], [ %sum.0, %.backedge ], [ %sum.0, %133 ], [ %sum.0, %136 ], [ %sum.0, %148 ], [ %sum.0, %178 ], [ %sum.0, %208 ], [ %sum.0, %212 ]*/
if (((cur_state == LEGUP_F_main_BB_239_72) & (memory_controller_waitrequest == 1'd0)))
begin
main__backedge_backedge_sum_0_be_reg <= main__backedge_backedge_sum_0_be;
if (reset == 1'b0 && ^(main__backedge_backedge_sum_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_backedge_sum_0_be_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %scevgep.1 = getelementptr [16 x i32]* %5, i32 0, i32 1*/
if (reset) begin main__preheader22_scevgep_1 = 0; end
begin
main__preheader22_scevgep_1 = (1'd0 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %scevgep.1 = getelementptr [16 x i32]* %5, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB__preheader22_4))
begin
main__preheader22_scevgep_1_reg <= main__preheader22_scevgep_1;
if (reset == 1'b0 && ^(main__preheader22_scevgep_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_scevgep_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %scevgep.2 = getelementptr [16 x i32]* %5, i32 0, i32 2*/
if (reset) begin main__preheader22_scevgep_2 = 0; end
begin
main__preheader22_scevgep_2 = (1'd0 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %scevgep.2 = getelementptr [16 x i32]* %5, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB__preheader22_4))
begin
main__preheader22_scevgep_2_reg <= main__preheader22_scevgep_2;
if (reset == 1'b0 && ^(main__preheader22_scevgep_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_scevgep_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %scevgep.3 = getelementptr [16 x i32]* %5, i32 0, i32 3*/
if (reset) begin main__preheader22_scevgep_3 = 0; end
begin
main__preheader22_scevgep_3 = (1'd0 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %scevgep.3 = getelementptr [16 x i32]* %5, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB__preheader22_4))
begin
main__preheader22_scevgep_3_reg <= main__preheader22_scevgep_3;
if (reset == 1'b0 && ^(main__preheader22_scevgep_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_scevgep_3_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %90 = load i32* %.sub12, align 4, !tbaa !0*/
begin
main__preheader22_90 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %90 = load i32* %.sub12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_5))
begin
main__preheader22_90_reg <= main__preheader22_90;
if (reset == 1'b0 && ^(main__preheader22_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_90_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %92 = load i32* %scevgep.1, align 4, !tbaa !0*/
begin
main__preheader22_92 = main_0_5_out_b;
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %92 = load i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_5))
begin
main__preheader22_92_reg <= main__preheader22_92;
if (reset == 1'b0 && ^(main__preheader22_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_92_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %94 = load i32* %scevgep.2, align 4, !tbaa !0*/
begin
main__preheader22_94 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %94 = load i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_6))
begin
main__preheader22_94_reg <= main__preheader22_94;
if (reset == 1'b0 && ^(main__preheader22_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_94_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %96 = load i32* %scevgep.3, align 4, !tbaa !0*/
begin
main__preheader22_96 = main_0_5_out_b;
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %96 = load i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_6))
begin
main__preheader22_96_reg <= main__preheader22_96;
if (reset == 1'b0 && ^(main__preheader22_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_96_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %scevgep.1.1 = getelementptr [16 x i32]* %5, i32 0, i32 5*/
if (reset) begin main__preheader22_scevgep_1_1 = 0; end
begin
main__preheader22_scevgep_1_1 = (1'd0 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %scevgep.1.1 = getelementptr [16 x i32]* %5, i32 0, i32 5*/
if ((cur_state == LEGUP_F_main_BB__preheader22_4))
begin
main__preheader22_scevgep_1_1_reg <= main__preheader22_scevgep_1_1;
if (reset == 1'b0 && ^(main__preheader22_scevgep_1_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_scevgep_1_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %scevgep.2.1 = getelementptr [16 x i32]* %5, i32 0, i32 6*/
if (reset) begin main__preheader22_scevgep_2_1 = 0; end
begin
main__preheader22_scevgep_2_1 = (1'd0 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %scevgep.2.1 = getelementptr [16 x i32]* %5, i32 0, i32 6*/
if ((cur_state == LEGUP_F_main_BB__preheader22_4))
begin
main__preheader22_scevgep_2_1_reg <= main__preheader22_scevgep_2_1;
if (reset == 1'b0 && ^(main__preheader22_scevgep_2_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_scevgep_2_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %scevgep.3.1 = getelementptr [16 x i32]* %5, i32 0, i32 7*/
if (reset) begin main__preheader22_scevgep_3_1 = 0; end
begin
main__preheader22_scevgep_3_1 = (1'd0 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %scevgep.3.1 = getelementptr [16 x i32]* %5, i32 0, i32 7*/
if ((cur_state == LEGUP_F_main_BB__preheader22_4))
begin
main__preheader22_scevgep_3_1_reg <= main__preheader22_scevgep_3_1;
if (reset == 1'b0 && ^(main__preheader22_scevgep_3_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_scevgep_3_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %scevgep.139 = getelementptr [16 x i32]* %5, i32 0, i32 4*/
if (reset) begin main__preheader22_scevgep_139 = 0; end
begin
main__preheader22_scevgep_139 = (1'd0 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %scevgep.139 = getelementptr [16 x i32]* %5, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB__preheader22_4))
begin
main__preheader22_scevgep_139_reg <= main__preheader22_scevgep_139;
if (reset == 1'b0 && ^(main__preheader22_scevgep_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_scevgep_139_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %99 = load i32* %scevgep.139, align 4, !tbaa !0*/
begin
main__preheader22_99 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %99 = load i32* %scevgep.139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_7))
begin
main__preheader22_99_reg <= main__preheader22_99;
if (reset == 1'b0 && ^(main__preheader22_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_99_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %101 = load i32* %scevgep.1.1, align 4, !tbaa !0*/
begin
main__preheader22_101 = main_0_5_out_b;
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %101 = load i32* %scevgep.1.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_7))
begin
main__preheader22_101_reg <= main__preheader22_101;
if (reset == 1'b0 && ^(main__preheader22_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_101_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %103 = load i32* %scevgep.2.1, align 4, !tbaa !0*/
begin
main__preheader22_103 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %103 = load i32* %scevgep.2.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_8))
begin
main__preheader22_103_reg <= main__preheader22_103;
if (reset == 1'b0 && ^(main__preheader22_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_103_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %105 = load i32* %scevgep.3.1, align 4, !tbaa !0*/
begin
main__preheader22_105 = main_0_5_out_b;
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %105 = load i32* %scevgep.3.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_8))
begin
main__preheader22_105_reg <= main__preheader22_105;
if (reset == 1'b0 && ^(main__preheader22_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_105_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %scevgep.1.2 = getelementptr [16 x i32]* %5, i32 0, i32 9*/
if (reset) begin main__preheader22_scevgep_1_2 = 0; end
begin
main__preheader22_scevgep_1_2 = (1'd0 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %scevgep.1.2 = getelementptr [16 x i32]* %5, i32 0, i32 9*/
if ((cur_state == LEGUP_F_main_BB__preheader22_4))
begin
main__preheader22_scevgep_1_2_reg <= main__preheader22_scevgep_1_2;
if (reset == 1'b0 && ^(main__preheader22_scevgep_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_scevgep_1_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %scevgep.2.2 = getelementptr [16 x i32]* %5, i32 0, i32 10*/
if (reset) begin main__preheader22_scevgep_2_2 = 0; end
begin
main__preheader22_scevgep_2_2 = (1'd0 + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %scevgep.2.2 = getelementptr [16 x i32]* %5, i32 0, i32 10*/
if ((cur_state == LEGUP_F_main_BB__preheader22_4))
begin
main__preheader22_scevgep_2_2_reg <= main__preheader22_scevgep_2_2;
if (reset == 1'b0 && ^(main__preheader22_scevgep_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_scevgep_2_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %scevgep.3.2 = getelementptr [16 x i32]* %5, i32 0, i32 11*/
if (reset) begin main__preheader22_scevgep_3_2 = 0; end
begin
main__preheader22_scevgep_3_2 = (1'd0 + (4 * 32'd11));
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %scevgep.3.2 = getelementptr [16 x i32]* %5, i32 0, i32 11*/
if ((cur_state == LEGUP_F_main_BB__preheader22_4))
begin
main__preheader22_scevgep_3_2_reg <= main__preheader22_scevgep_3_2;
if (reset == 1'b0 && ^(main__preheader22_scevgep_3_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_scevgep_3_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %scevgep.240 = getelementptr [16 x i32]* %5, i32 0, i32 8*/
if (reset) begin main__preheader22_scevgep_240 = 0; end
begin
main__preheader22_scevgep_240 = (1'd0 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %scevgep.240 = getelementptr [16 x i32]* %5, i32 0, i32 8*/
if ((cur_state == LEGUP_F_main_BB__preheader22_4))
begin
main__preheader22_scevgep_240_reg <= main__preheader22_scevgep_240;
if (reset == 1'b0 && ^(main__preheader22_scevgep_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_scevgep_240_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %108 = load i32* %scevgep.240, align 4, !tbaa !0*/
begin
main__preheader22_108 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %108 = load i32* %scevgep.240, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_9))
begin
main__preheader22_108_reg <= main__preheader22_108;
if (reset == 1'b0 && ^(main__preheader22_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_108_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %110 = load i32* %scevgep.1.2, align 4, !tbaa !0*/
begin
main__preheader22_110 = main_0_5_out_b;
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %110 = load i32* %scevgep.1.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_9))
begin
main__preheader22_110_reg <= main__preheader22_110;
if (reset == 1'b0 && ^(main__preheader22_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_110_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %112 = load i32* %scevgep.2.2, align 4, !tbaa !0*/
begin
main__preheader22_112 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %112 = load i32* %scevgep.2.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_10))
begin
main__preheader22_112_reg <= main__preheader22_112;
if (reset == 1'b0 && ^(main__preheader22_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_112_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %114 = load i32* %scevgep.3.2, align 4, !tbaa !0*/
begin
main__preheader22_114 = main_0_5_out_b;
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %114 = load i32* %scevgep.3.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_10))
begin
main__preheader22_114_reg <= main__preheader22_114;
if (reset == 1'b0 && ^(main__preheader22_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_114_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %scevgep.1.3 = getelementptr [16 x i32]* %5, i32 0, i32 13*/
if (reset) begin main__preheader22_scevgep_1_3 = 0; end
begin
main__preheader22_scevgep_1_3 = (1'd0 + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %scevgep.1.3 = getelementptr [16 x i32]* %5, i32 0, i32 13*/
if ((cur_state == LEGUP_F_main_BB__preheader22_4))
begin
main__preheader22_scevgep_1_3_reg <= main__preheader22_scevgep_1_3;
if (reset == 1'b0 && ^(main__preheader22_scevgep_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_scevgep_1_3_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %scevgep.2.3 = getelementptr [16 x i32]* %5, i32 0, i32 14*/
if (reset) begin main__preheader22_scevgep_2_3 = 0; end
begin
main__preheader22_scevgep_2_3 = (1'd0 + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %scevgep.2.3 = getelementptr [16 x i32]* %5, i32 0, i32 14*/
if ((cur_state == LEGUP_F_main_BB__preheader22_4))
begin
main__preheader22_scevgep_2_3_reg <= main__preheader22_scevgep_2_3;
if (reset == 1'b0 && ^(main__preheader22_scevgep_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_scevgep_2_3_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %scevgep.3.3 = getelementptr [16 x i32]* %5, i32 0, i32 15*/
if (reset) begin main__preheader22_scevgep_3_3 = 0; end
begin
main__preheader22_scevgep_3_3 = (1'd0 + (4 * 32'd15));
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %scevgep.3.3 = getelementptr [16 x i32]* %5, i32 0, i32 15*/
if ((cur_state == LEGUP_F_main_BB__preheader22_4))
begin
main__preheader22_scevgep_3_3_reg <= main__preheader22_scevgep_3_3;
if (reset == 1'b0 && ^(main__preheader22_scevgep_3_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_scevgep_3_3_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %scevgep.341 = getelementptr [16 x i32]* %5, i32 0, i32 12*/
if (reset) begin main__preheader22_scevgep_341 = 0; end
begin
main__preheader22_scevgep_341 = (1'd0 + (4 * 32'd12));
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %scevgep.341 = getelementptr [16 x i32]* %5, i32 0, i32 12*/
if ((cur_state == LEGUP_F_main_BB__preheader22_4))
begin
main__preheader22_scevgep_341_reg <= main__preheader22_scevgep_341;
if (reset == 1'b0 && ^(main__preheader22_scevgep_341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_scevgep_341_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %117 = load i32* %scevgep.341, align 4, !tbaa !0*/
begin
main__preheader22_117 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %117 = load i32* %scevgep.341, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_11))
begin
main__preheader22_117_reg <= main__preheader22_117;
if (reset == 1'b0 && ^(main__preheader22_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_117_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %119 = load i32* %scevgep.1.3, align 4, !tbaa !0*/
begin
main__preheader22_119 = main_0_5_out_b;
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %119 = load i32* %scevgep.1.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_11))
begin
main__preheader22_119_reg <= main__preheader22_119;
if (reset == 1'b0 && ^(main__preheader22_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_119_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %121 = load i32* %scevgep.2.3, align 4, !tbaa !0*/
begin
main__preheader22_121 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %121 = load i32* %scevgep.2.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_12))
begin
main__preheader22_121_reg <= main__preheader22_121;
if (reset == 1'b0 && ^(main__preheader22_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_121_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader22*/
/*   %123 = load i32* %scevgep.3.3, align 4, !tbaa !0*/
begin
main__preheader22_123 = main_0_5_out_b;
end
end
always @(posedge clk) begin
/* main: %.preheader22*/
/*   %123 = load i32* %scevgep.3.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_12))
begin
main__preheader22_123_reg <= main__preheader22_123;
if (reset == 1'b0 && ^(main__preheader22_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader22_123_reg"); $finish; end
end
end
always @(*) begin
/* main: %127*/
/*   %s.i.0 = phi i32* [ %.sub12, %.preheader24 ], [ %132, %130 ]*/
if (((cur_state == LEGUP_F_main_BB__preheader24_27) & (memory_controller_waitrequest == 1'd0)))
begin
main_127_s_i_0 = main_0__sub12_reg;
end
/* main: %127*/
/*   %s.i.0 = phi i32* [ %.sub12, %.preheader24 ], [ %132, %130 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_130_30) & (memory_controller_waitrequest == 1'd0))) */
begin
main_127_s_i_0 = main_130_132_reg;
end
end
always @(posedge clk) begin
/* main: %127*/
/*   %s.i.0 = phi i32* [ %.sub12, %.preheader24 ], [ %132, %130 ]*/
if (((cur_state == LEGUP_F_main_BB__preheader24_27) & (memory_controller_waitrequest == 1'd0)))
begin
main_127_s_i_0_reg <= main_127_s_i_0;
if (reset == 1'b0 && ^(main_127_s_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127_s_i_0_reg"); $finish; end
end
/* main: %127*/
/*   %s.i.0 = phi i32* [ %.sub12, %.preheader24 ], [ %132, %130 ]*/
if (((cur_state == LEGUP_F_main_BB_130_30) & (memory_controller_waitrequest == 1'd0)))
begin
main_127_s_i_0_reg <= main_127_s_i_0;
if (reset == 1'b0 && ^(main_127_s_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127_s_i_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %127*/
/*   %128 = phi i32 [ 16, %.preheader24 ], [ %131, %130 ]*/
if (((cur_state == LEGUP_F_main_BB__preheader24_27) & (memory_controller_waitrequest == 1'd0)))
begin
main_127_128 = 32'd16;
end
/* main: %127*/
/*   %128 = phi i32 [ 16, %.preheader24 ], [ %131, %130 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_130_30) & (memory_controller_waitrequest == 1'd0))) */
begin
main_127_128 = main_130_131_reg;
end
end
always @(posedge clk) begin
/* main: %127*/
/*   %128 = phi i32 [ 16, %.preheader24 ], [ %131, %130 ]*/
if (((cur_state == LEGUP_F_main_BB__preheader24_27) & (memory_controller_waitrequest == 1'd0)))
begin
main_127_128_reg <= main_127_128;
if (reset == 1'b0 && ^(main_127_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127_128_reg"); $finish; end
end
/* main: %127*/
/*   %128 = phi i32 [ 16, %.preheader24 ], [ %131, %130 ]*/
if (((cur_state == LEGUP_F_main_BB_130_30) & (memory_controller_waitrequest == 1'd0)))
begin
main_127_128_reg <= main_127_128;
if (reset == 1'b0 && ^(main_127_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127_128_reg"); $finish; end
end
end
always @(*) begin
/* main: %127*/
/*   %129 = icmp eq i32 %128, 0*/
begin
main_127_129 = (main_127_128_reg == 32'd0);
end
end
always @(posedge clk) begin
/* main: %127*/
/*   %129 = icmp eq i32 %128, 0*/
if ((cur_state == LEGUP_F_main_BB_127_28))
begin
main_127_129_reg <= main_127_129;
if (reset == 1'b0 && ^(main_127_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127_129_reg"); $finish; end
end
end
always @(*) begin
/* main: %130*/
/*   %131 = add i32 %128, -1*/
begin
main_130_131 = (main_127_128_reg + -32'd1);
end
end
always @(posedge clk) begin
/* main: %130*/
/*   %131 = add i32 %128, -1*/
if ((cur_state == LEGUP_F_main_BB_130_29))
begin
main_130_131_reg <= main_130_131;
if (reset == 1'b0 && ^(main_130_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_130_131_reg"); $finish; end
end
end
always @(*) begin
/* main: %130*/
/*   %132 = getelementptr inbounds i32* %s.i.0, i32 1*/
begin
main_130_132 = (main_127_s_i_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %130*/
/*   %132 = getelementptr inbounds i32* %s.i.0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_130_29))
begin
main_130_132_reg <= main_130_132;
if (reset == 1'b0 && ^(main_130_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_130_132_reg"); $finish; end
end
end
always @(*) begin
/* main: %133*/
/*   %135 = icmp eq i32 %i.0, 15*/
begin
main_133_135 = (main__backedge_i_0_reg == 32'd15);
end
end
always @(posedge clk) begin
/* main: %133*/
/*   %135 = icmp eq i32 %i.0, 15*/
if ((cur_state == LEGUP_F_main_BB_133_39))
begin
main_133_135_reg <= main_133_135;
if (reset == 1'b0 && ^(main_133_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_133_135_reg"); $finish; end
end
end
always @(*) begin
/* main: %136*/
/*   %137 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 %i.0*/
begin
main_136_137 = (1'd0 + (4 * main__backedge_i_0_reg));
end
end
always @(posedge clk) begin
/* main: %136*/
/*   %137 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 %i.0*/
if ((cur_state == LEGUP_F_main_BB_136_40))
begin
main_136_137_reg <= main_136_137;
if (reset == 1'b0 && ^(main_136_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_137_reg"); $finish; end
end
end
always @(*) begin
/* main: %136*/
/*   %138 = load i32* %137, align 4, !tbaa !0*/
begin
main_136_138 = main_0_1_out_b;
end
end
always @(posedge clk) begin
/* main: %136*/
/*   %138 = load i32* %137, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_136_41))
begin
main_136_138_reg <= main_136_138;
if (reset == 1'b0 && ^(main_136_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_138_reg"); $finish; end
end
end
always @(*) begin
/* main: %136*/
/*   %139 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 %i.0*/
begin
main_136_139 = (1'd0 + (4 * main__backedge_i_0_reg));
end
end
always @(posedge clk) begin
/* main: %136*/
/*   %139 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 %i.0*/
if ((cur_state == LEGUP_F_main_BB_136_40))
begin
main_136_139_reg <= main_136_139;
if (reset == 1'b0 && ^(main_136_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_139_reg"); $finish; end
end
end
always @(*) begin
/* main: %136*/
/*   %140 = load i32* %139, align 4, !tbaa !0*/
begin
main_136_140 = main_0_2_out_b;
end
end
always @(posedge clk) begin
/* main: %136*/
/*   %140 = load i32* %139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_136_41))
begin
main_136_140_reg <= main_136_140;
if (reset == 1'b0 && ^(main_136_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_140_reg"); $finish; end
end
end
always @(*) begin
/* main: %136*/
/*   %141 = getelementptr inbounds [14 x i32]* %3, i32 0, i32 %138*/
begin
main_136_141 = (1'd0 + (4 * main_136_138));
end
end
always @(posedge clk) begin
/* main: %136*/
/*   %141 = getelementptr inbounds [14 x i32]* %3, i32 0, i32 %138*/
if ((cur_state == LEGUP_F_main_BB_136_41))
begin
main_136_141_reg <= main_136_141;
if (reset == 1'b0 && ^(main_136_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_141_reg"); $finish; end
end
end
always @(*) begin
/* main: %136*/
/*   %142 = load i32* %141, align 4, !tbaa !0*/
begin
main_136_142 = main_0_3_out_a;
end
end
always @(posedge clk) begin
/* main: %136*/
/*   %142 = load i32* %141, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_136_42))
begin
main_136_142_reg <= main_136_142;
if (reset == 1'b0 && ^(main_136_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_142_reg"); $finish; end
end
end
always @(*) begin
/* main: %136*/
/*   %143 = getelementptr inbounds [14 x i32]* %4, i32 0, i32 %138*/
begin
main_136_143 = (1'd0 + (4 * main_136_138));
end
end
always @(posedge clk) begin
/* main: %136*/
/*   %143 = getelementptr inbounds [14 x i32]* %4, i32 0, i32 %138*/
if ((cur_state == LEGUP_F_main_BB_136_41))
begin
main_136_143_reg <= main_136_143;
if (reset == 1'b0 && ^(main_136_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_143_reg"); $finish; end
end
end
always @(*) begin
/* main: %136*/
/*   %144 = load i32* %143, align 4, !tbaa !0*/
begin
main_136_144 = main_0_4_out_a;
end
end
always @(posedge clk) begin
/* main: %136*/
/*   %144 = load i32* %143, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_136_42))
begin
main_136_144_reg <= main_136_144;
if (reset == 1'b0 && ^(main_136_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_144_reg"); $finish; end
end
end
always @(*) begin
/* main: %136*/
/*   %145 = getelementptr inbounds [14 x i32]* %3, i32 0, i32 %140*/
begin
main_136_145 = (1'd0 + (4 * main_136_140));
end
end
always @(posedge clk) begin
/* main: %136*/
/*   %145 = getelementptr inbounds [14 x i32]* %3, i32 0, i32 %140*/
if ((cur_state == LEGUP_F_main_BB_136_41))
begin
main_136_145_reg <= main_136_145;
if (reset == 1'b0 && ^(main_136_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_145_reg"); $finish; end
end
end
always @(*) begin
/* main: %136*/
/*   %146 = load i32* %145, align 4, !tbaa !0*/
begin
main_136_146 = main_0_3_out_b;
end
end
always @(posedge clk) begin
/* main: %136*/
/*   %146 = load i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_136_42))
begin
main_136_146_reg <= main_136_146;
if (reset == 1'b0 && ^(main_136_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_146_reg"); $finish; end
end
end
always @(*) begin
/* main: %136*/
/*   %147 = icmp eq i32 %i.0, 0*/
begin
main_136_147 = (main__backedge_i_0_reg == 32'd0);
end
end
always @(posedge clk) begin
/* main: %136*/
/*   %147 = icmp eq i32 %i.0, 0*/
if ((cur_state == LEGUP_F_main_BB_136_40))
begin
main_136_147_reg <= main_136_147;
if (reset == 1'b0 && ^(main_136_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_147_reg"); $finish; end
end
end
always @(*) begin
/* main: %136*/
/*   %. = select i1 %147, i32 3, i32 2*/
begin
main_136__ = (main_136_147 ? 32'd3 : 32'd2);
end
end
always @(posedge clk) begin
/* main: %136*/
/*   %. = select i1 %147, i32 3, i32 2*/
if ((cur_state == LEGUP_F_main_BB_136_40))
begin
main_136___reg <= main_136__;
if (reset == 1'b0 && ^(main_136__) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136___reg"); $finish; end
end
end
always @(*) begin
/* main: %148*/
/*   %150 = icmp eq i32 %pos_a_X.0, -1*/
begin
main_148_150 = (main__backedge_pos_a_X_0_reg == -32'd1);
end
end
always @(posedge clk) begin
/* main: %148*/
/*   %150 = icmp eq i32 %pos_a_X.0, -1*/
if ((cur_state == LEGUP_F_main_BB_148_43))
begin
main_148_150_reg <= main_148_150;
if (reset == 1'b0 && ^(main_148_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_148_150_reg"); $finish; end
end
end
always @(*) begin
/* main: %151*/
/*   %152 = add nsw i32 %i.0, -1*/
begin
main_151_152 = (main__backedge_i_0_reg + -32'd1);
end
end
always @(posedge clk) begin
/* main: %151*/
/*   %152 = add nsw i32 %i.0, -1*/
if ((cur_state == LEGUP_F_main_BB_151_44))
begin
main_151_152_reg <= main_151_152;
if (reset == 1'b0 && ^(main_151_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_152_reg"); $finish; end
end
end
always @(*) begin
/* main: %151*/
/*   %153 = getelementptr inbounds [14 x i32]* %3, i32 0, i32 %152*/
begin
main_151_153 = (1'd0 + (4 * main_151_152_reg));
end
end
always @(posedge clk) begin
/* main: %151*/
/*   %153 = getelementptr inbounds [14 x i32]* %3, i32 0, i32 %152*/
if ((cur_state == LEGUP_F_main_BB_151_45))
begin
main_151_153_reg <= main_151_153;
if (reset == 1'b0 && ^(main_151_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_153_reg"); $finish; end
end
end
always @(*) begin
/* main: %151*/
/*   %154 = load i32* %153, align 4, !tbaa !0*/
begin
main_151_154 = main_0_3_out_a;
end
end
always @(posedge clk) begin
/* main: %151*/
/*   %154 = load i32* %153, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_151_46))
begin
main_151_154_reg <= main_151_154;
if (reset == 1'b0 && ^(main_151_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_154_reg"); $finish; end
end
end
always @(*) begin
/* main: %151*/
/*   %155 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 %j.0*/
begin
main_151_155 = (1'd0 + (4 * main__backedge_j_0_reg));
end
end
always @(posedge clk) begin
/* main: %151*/
/*   %155 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 %j.0*/
if ((cur_state == LEGUP_F_main_BB_151_44))
begin
main_151_155_reg <= main_151_155;
if (reset == 1'b0 && ^(main_151_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_155_reg"); $finish; end
end
end
always @(*) begin
/* main: %151*/
/*   %156 = load i32* %155, align 4, !tbaa !0*/
begin
main_151_156 = main_0_6_out_a;
end
end
always @(posedge clk) begin
/* main: %151*/
/*   %156 = load i32* %155, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_151_45))
begin
main_151_156_reg <= main_151_156;
if (reset == 1'b0 && ^(main_151_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_156_reg"); $finish; end
end
end
always @(*) begin
/* main: %151*/
/*   %157 = add nsw i32 %156, %154*/
begin
main_151_157 = (main_151_156_reg + main_151_154);
end
end
always @(posedge clk) begin
/* main: %151*/
/*   %157 = add nsw i32 %156, %154*/
if ((cur_state == LEGUP_F_main_BB_151_46))
begin
main_151_157_reg <= main_151_157;
if (reset == 1'b0 && ^(main_151_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_157_reg"); $finish; end
end
end
always @(*) begin
/* main: %151*/
/*   %158 = getelementptr inbounds [14 x i32]* %3, i32 0, i32 %a.0*/
begin
main_151_158 = (1'd0 + (4 * main__backedge_a_0_reg));
end
end
always @(posedge clk) begin
/* main: %151*/
/*   %158 = getelementptr inbounds [14 x i32]* %3, i32 0, i32 %a.0*/
if ((cur_state == LEGUP_F_main_BB_151_44))
begin
main_151_158_reg <= main_151_158;
if (reset == 1'b0 && ^(main_151_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_158_reg"); $finish; end
end
end
always @(*) begin
/* main: %151*/
/*   %159 = getelementptr inbounds [14 x i32]* %4, i32 0, i32 %152*/
begin
main_151_159 = (1'd0 + (4 * main_151_152_reg));
end
end
always @(posedge clk) begin
/* main: %151*/
/*   %159 = getelementptr inbounds [14 x i32]* %4, i32 0, i32 %152*/
if ((cur_state == LEGUP_F_main_BB_151_45))
begin
main_151_159_reg <= main_151_159;
if (reset == 1'b0 && ^(main_151_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_159_reg"); $finish; end
end
end
always @(*) begin
/* main: %151*/
/*   %160 = load i32* %159, align 4, !tbaa !0*/
begin
main_151_160 = main_0_4_out_b;
end
end
always @(posedge clk) begin
/* main: %151*/
/*   %160 = load i32* %159, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_151_46))
begin
main_151_160_reg <= main_151_160;
if (reset == 1'b0 && ^(main_151_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_160_reg"); $finish; end
end
end
always @(*) begin
/* main: %151*/
/*   %161 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 %j.0*/
begin
main_151_161 = (1'd0 + (4 * main__backedge_j_0_reg));
end
end
always @(posedge clk) begin
/* main: %151*/
/*   %161 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 %j.0*/
if ((cur_state == LEGUP_F_main_BB_151_44))
begin
main_151_161_reg <= main_151_161;
if (reset == 1'b0 && ^(main_151_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_161_reg"); $finish; end
end
end
always @(*) begin
/* main: %151*/
/*   %162 = load i32* %161, align 4, !tbaa !0*/
begin
main_151_162 = main_0_7_out_a;
end
end
always @(posedge clk) begin
/* main: %151*/
/*   %162 = load i32* %161, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_151_45))
begin
main_151_162_reg <= main_151_162;
if (reset == 1'b0 && ^(main_151_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_162_reg"); $finish; end
end
end
always @(*) begin
/* main: %151*/
/*   %163 = add nsw i32 %162, %160*/
begin
main_151_163 = (main_151_162_reg + main_151_160);
end
end
always @(posedge clk) begin
/* main: %151*/
/*   %163 = add nsw i32 %162, %160*/
if ((cur_state == LEGUP_F_main_BB_151_46))
begin
main_151_163_reg <= main_151_163;
if (reset == 1'b0 && ^(main_151_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_163_reg"); $finish; end
end
end
always @(*) begin
/* main: %151*/
/*   %164 = getelementptr inbounds [14 x i32]* %4, i32 0, i32 %a.0*/
begin
main_151_164 = (1'd0 + (4 * main__backedge_a_0_reg));
end
end
always @(posedge clk) begin
/* main: %151*/
/*   %164 = getelementptr inbounds [14 x i32]* %4, i32 0, i32 %a.0*/
if ((cur_state == LEGUP_F_main_BB_151_44))
begin
main_151_164_reg <= main_151_164;
if (reset == 1'b0 && ^(main_151_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_164_reg"); $finish; end
end
end
always @(*) begin
/* main: %151*/
/*   %165 = add nsw i32 %j.0, 1*/
begin
main_151_165 = (main__backedge_j_0_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %151*/
/*   %165 = add nsw i32 %j.0, 1*/
if ((cur_state == LEGUP_F_main_BB_151_44))
begin
main_151_165_reg <= main_151_165;
if (reset == 1'b0 && ^(main_151_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_165_reg"); $finish; end
end
end
always @(*) begin
/* main: %151*/
/*   %166 = shl i32 %157, 2*/
begin
main_151_166 = (main_151_157 <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* main: %151*/
/*   %166 = shl i32 %157, 2*/
if ((cur_state == LEGUP_F_main_BB_151_46))
begin
main_151_166_reg <= main_151_166;
if (reset == 1'b0 && ^(main_151_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_166_reg"); $finish; end
end
end
always @(*) begin
/* main: %151*/
/*   %167 = add nsw i32 %166, %163*/
begin
main_151_167 = (main_151_166 + main_151_163);
end
end
always @(posedge clk) begin
/* main: %151*/
/*   %167 = add nsw i32 %166, %163*/
if ((cur_state == LEGUP_F_main_BB_151_46))
begin
main_151_167_reg <= main_151_167;
if (reset == 1'b0 && ^(main_151_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_167_reg"); $finish; end
end
end
always @(*) begin
/* main: %151*/
/*   %168 = getelementptr inbounds [16 x i32]* %5, i32 0, i32 %167*/
begin
main_151_168 = (1'd0 + (4 * main_151_167_reg));
end
end
always @(posedge clk) begin
/* main: %151*/
/*   %168 = getelementptr inbounds [16 x i32]* %5, i32 0, i32 %167*/
if ((cur_state == LEGUP_F_main_BB_151_47))
begin
main_151_168_reg <= main_151_168;
if (reset == 1'b0 && ^(main_151_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_168_reg"); $finish; end
end
end
always @(*) begin
/* main: %151*/
/*   %169 = load i32* %168, align 4, !tbaa !0*/
begin
main_151_169 = main_0_5_out_b;
end
end
always @(posedge clk) begin
/* main: %151*/
/*   %169 = load i32* %168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_151_48))
begin
main_151_169_reg <= main_151_169;
if (reset == 1'b0 && ^(main_151_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_169_reg"); $finish; end
end
end
always @(*) begin
/* main: %151*/
/*   %170 = icmp eq i32 %169, -1*/
begin
main_151_170 = (main_151_169 == -32'd1);
end
end
always @(posedge clk) begin
/* main: %151*/
/*   %170 = icmp eq i32 %169, -1*/
if ((cur_state == LEGUP_F_main_BB_151_48))
begin
main_151_170_reg <= main_151_170;
if (reset == 1'b0 && ^(main_151_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_170_reg"); $finish; end
end
end
always @(*) begin
/* main: %151*/
/*   %171 = icmp ult i32 %157, 4*/
begin
main_151_171 = (main_151_157 < 32'd4);
end
end
always @(posedge clk) begin
/* main: %151*/
/*   %171 = icmp ult i32 %157, 4*/
if ((cur_state == LEGUP_F_main_BB_151_46))
begin
main_151_171_reg <= main_151_171;
if (reset == 1'b0 && ^(main_151_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_171_reg"); $finish; end
end
end
always @(*) begin
/* main: %151*/
/*   %or.cond = and i1 %170, %171*/
begin
main_151_or_cond = (main_151_170 & main_151_171_reg);
end
end
always @(posedge clk) begin
/* main: %151*/
/*   %or.cond = and i1 %170, %171*/
if ((cur_state == LEGUP_F_main_BB_151_48))
begin
main_151_or_cond_reg <= main_151_or_cond;
if (reset == 1'b0 && ^(main_151_or_cond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_or_cond_reg"); $finish; end
end
end
always @(*) begin
/* main: %151*/
/*   %172 = icmp ult i32 %163, 4*/
begin
main_151_172 = (main_151_163 < 32'd4);
end
end
always @(posedge clk) begin
/* main: %151*/
/*   %172 = icmp ult i32 %163, 4*/
if ((cur_state == LEGUP_F_main_BB_151_46))
begin
main_151_172_reg <= main_151_172;
if (reset == 1'b0 && ^(main_151_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_172_reg"); $finish; end
end
end
always @(*) begin
/* main: %151*/
/*   %or.cond15 = and i1 %or.cond, %172*/
begin
main_151_or_cond15 = (main_151_or_cond & main_151_172_reg);
end
end
always @(posedge clk) begin
/* main: %151*/
/*   %or.cond15 = and i1 %or.cond, %172*/
if ((cur_state == LEGUP_F_main_BB_151_48))
begin
main_151_or_cond15_reg <= main_151_or_cond15;
if (reset == 1'b0 && ^(main_151_or_cond15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_or_cond15_reg"); $finish; end
end
end
always @(*) begin
/* main: %174*/
/*   %175 = icmp sgt i32 %165, 28*/
begin
main_174_175 = ($signed(main_151_165_reg) > $signed(32'd28));
end
end
always @(posedge clk) begin
/* main: %174*/
/*   %175 = icmp sgt i32 %165, 28*/
if ((cur_state == LEGUP_F_main_BB_174_51))
begin
main_174_175_reg <= main_174_175;
if (reset == 1'b0 && ^(main_174_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_174_175_reg"); $finish; end
end
end
always @(*) begin
/* main: %178*/
/*   %pos_a_Y.1 = phi i32 [ %163, %173 ], [ %pos_a_Y.0, %174 ]*/
if (((cur_state == LEGUP_F_main_BB_173_50) & (memory_controller_waitrequest == 1'd0)))
begin
main_178_pos_a_Y_1 = main_151_163_reg;
end
/* main: %178*/
/*   %pos_a_Y.1 = phi i32 [ %163, %173 ], [ %pos_a_Y.0, %174 ]*/
else /* if ((((cur_state == LEGUP_F_main_BB_174_51) & (memory_controller_waitrequest == 1'd0)) & (main_174_175 == 1'd0))) */
begin
main_178_pos_a_Y_1 = main__backedge_pos_a_Y_0_reg;
end
end
always @(posedge clk) begin
/* main: %178*/
/*   %pos_a_Y.1 = phi i32 [ %163, %173 ], [ %pos_a_Y.0, %174 ]*/
if (((cur_state == LEGUP_F_main_BB_173_50) & (memory_controller_waitrequest == 1'd0)))
begin
main_178_pos_a_Y_1_reg <= main_178_pos_a_Y_1;
if (reset == 1'b0 && ^(main_178_pos_a_Y_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_178_pos_a_Y_1_reg"); $finish; end
end
/* main: %178*/
/*   %pos_a_Y.1 = phi i32 [ %163, %173 ], [ %pos_a_Y.0, %174 ]*/
if ((((cur_state == LEGUP_F_main_BB_174_51) & (memory_controller_waitrequest == 1'd0)) & (main_174_175 == 1'd0)))
begin
main_178_pos_a_Y_1_reg <= main_178_pos_a_Y_1;
if (reset == 1'b0 && ^(main_178_pos_a_Y_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_178_pos_a_Y_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %178*/
/*   %pos_a_X.1 = phi i32 [ %157, %173 ], [ %pos_a_X.0, %174 ]*/
if (((cur_state == LEGUP_F_main_BB_173_50) & (memory_controller_waitrequest == 1'd0)))
begin
main_178_pos_a_X_1 = main_151_157_reg;
end
/* main: %178*/
/*   %pos_a_X.1 = phi i32 [ %157, %173 ], [ %pos_a_X.0, %174 ]*/
else /* if ((((cur_state == LEGUP_F_main_BB_174_51) & (memory_controller_waitrequest == 1'd0)) & (main_174_175 == 1'd0))) */
begin
main_178_pos_a_X_1 = main__backedge_pos_a_X_0_reg;
end
end
always @(posedge clk) begin
/* main: %178*/
/*   %pos_a_X.1 = phi i32 [ %157, %173 ], [ %pos_a_X.0, %174 ]*/
if (((cur_state == LEGUP_F_main_BB_173_50) & (memory_controller_waitrequest == 1'd0)))
begin
main_178_pos_a_X_1_reg <= main_178_pos_a_X_1;
if (reset == 1'b0 && ^(main_178_pos_a_X_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_178_pos_a_X_1_reg"); $finish; end
end
/* main: %178*/
/*   %pos_a_X.1 = phi i32 [ %157, %173 ], [ %pos_a_X.0, %174 ]*/
if ((((cur_state == LEGUP_F_main_BB_174_51) & (memory_controller_waitrequest == 1'd0)) & (main_174_175 == 1'd0)))
begin
main_178_pos_a_X_1_reg <= main_178_pos_a_X_1;
if (reset == 1'b0 && ^(main_178_pos_a_X_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_178_pos_a_X_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %178*/
/*   %179 = icmp eq i32 %pos_a_X.1, -1*/
begin
main_178_179 = (main_178_pos_a_X_1_reg == -32'd1);
end
end
always @(posedge clk) begin
/* main: %178*/
/*   %179 = icmp eq i32 %pos_a_X.1, -1*/
if ((cur_state == LEGUP_F_main_BB_178_53))
begin
main_178_179_reg <= main_178_179;
if (reset == 1'b0 && ^(main_178_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_178_179_reg"); $finish; end
end
end
always @(*) begin
/* main: %178*/
/*   %.16 = select i1 %179, i32 %165, i32 0*/
begin
main_178__16 = (main_178_179 ? main_151_165_reg : 32'd0);
end
end
always @(posedge clk) begin
/* main: %178*/
/*   %.16 = select i1 %179, i32 %165, i32 0*/
if ((cur_state == LEGUP_F_main_BB_178_53))
begin
main_178__16_reg <= main_178__16;
if (reset == 1'b0 && ^(main_178__16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_178__16_reg"); $finish; end
end
end
always @(*) begin
/* main: %178*/
/*   %.17 = select i1 %179, i32 2, i32 3*/
begin
main_178__17 = (main_178_179 ? 32'd2 : 32'd3);
end
end
always @(posedge clk) begin
/* main: %178*/
/*   %.17 = select i1 %179, i32 2, i32 3*/
if ((cur_state == LEGUP_F_main_BB_178_53))
begin
main_178__17_reg <= main_178__17;
if (reset == 1'b0 && ^(main_178__17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_178__17_reg"); $finish; end
end
end
always @(*) begin
/* main: %180*/
/*   %182 = icmp eq i32 %pos_b_X.0, -1*/
begin
main_180_182 = (main__backedge_pos_b_X_0_reg == -32'd1);
end
end
always @(posedge clk) begin
/* main: %180*/
/*   %182 = icmp eq i32 %pos_b_X.0, -1*/
if ((cur_state == LEGUP_F_main_BB_180_54))
begin
main_180_182_reg <= main_180_182;
if (reset == 1'b0 && ^(main_180_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_180_182_reg"); $finish; end
end
end
always @(*) begin
/* main: %183*/
/*   %184 = add nsw i32 %i.0, 1*/
begin
main_183_184 = (main__backedge_i_0_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %183*/
/*   %184 = add nsw i32 %i.0, 1*/
if ((cur_state == LEGUP_F_main_BB_183_55))
begin
main_183_184_reg <= main_183_184;
if (reset == 1'b0 && ^(main_183_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_183_184_reg"); $finish; end
end
end
always @(*) begin
/* main: %185*/
/*   %186 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 %j.0*/
begin
main_185_186 = (1'd0 + (4 * main__backedge_j_0_reg));
end
end
always @(posedge clk) begin
/* main: %185*/
/*   %186 = getelementptr inbounds [28 x i32]* %6, i32 0, i32 %j.0*/
if ((cur_state == LEGUP_F_main_BB_185_56))
begin
main_185_186_reg <= main_185_186;
if (reset == 1'b0 && ^(main_185_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_186_reg"); $finish; end
end
end
always @(*) begin
/* main: %185*/
/*   %187 = load i32* %186, align 4, !tbaa !0*/
begin
main_185_187 = main_0_6_out_b;
end
end
always @(posedge clk) begin
/* main: %185*/
/*   %187 = load i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_185_57))
begin
main_185_187_reg <= main_185_187;
if (reset == 1'b0 && ^(main_185_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_187_reg"); $finish; end
end
end
always @(*) begin
/* main: %185*/
/*   %188 = add nsw i32 %187, %pos_a_X.0*/
begin
main_185_188 = (main_185_187 + main__backedge_pos_a_X_0_reg);
end
end
always @(posedge clk) begin
/* main: %185*/
/*   %188 = add nsw i32 %187, %pos_a_X.0*/
if ((cur_state == LEGUP_F_main_BB_185_57))
begin
main_185_188_reg <= main_185_188;
if (reset == 1'b0 && ^(main_185_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_188_reg"); $finish; end
end
end
always @(*) begin
/* main: %185*/
/*   %189 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 %j.0*/
begin
main_185_189 = (1'd0 + (4 * main__backedge_j_0_reg));
end
end
always @(posedge clk) begin
/* main: %185*/
/*   %189 = getelementptr inbounds [28 x i32]* %7, i32 0, i32 %j.0*/
if ((cur_state == LEGUP_F_main_BB_185_56))
begin
main_185_189_reg <= main_185_189;
if (reset == 1'b0 && ^(main_185_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_189_reg"); $finish; end
end
end
always @(*) begin
/* main: %185*/
/*   %190 = load i32* %189, align 4, !tbaa !0*/
begin
main_185_190 = main_0_7_out_b;
end
end
always @(posedge clk) begin
/* main: %185*/
/*   %190 = load i32* %189, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_185_57))
begin
main_185_190_reg <= main_185_190;
if (reset == 1'b0 && ^(main_185_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_190_reg"); $finish; end
end
end
always @(*) begin
/* main: %185*/
/*   %191 = add nsw i32 %190, %pos_a_Y.0*/
begin
main_185_191 = (main_185_190 + main__backedge_pos_a_Y_0_reg);
end
end
always @(posedge clk) begin
/* main: %185*/
/*   %191 = add nsw i32 %190, %pos_a_Y.0*/
if ((cur_state == LEGUP_F_main_BB_185_57))
begin
main_185_191_reg <= main_185_191;
if (reset == 1'b0 && ^(main_185_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_191_reg"); $finish; end
end
end
always @(*) begin
/* main: %185*/
/*   %192 = add nsw i32 %j.0, 1*/
begin
main_185_192 = (main__backedge_j_0_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %185*/
/*   %192 = add nsw i32 %j.0, 1*/
if ((cur_state == LEGUP_F_main_BB_185_56))
begin
main_185_192_reg <= main_185_192;
if (reset == 1'b0 && ^(main_185_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_192_reg"); $finish; end
end
end
always @(*) begin
/* main: %185*/
/*   %193 = shl i32 %188, 2*/
begin
main_185_193 = (main_185_188 <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* main: %185*/
/*   %193 = shl i32 %188, 2*/
if ((cur_state == LEGUP_F_main_BB_185_57))
begin
main_185_193_reg <= main_185_193;
if (reset == 1'b0 && ^(main_185_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_193_reg"); $finish; end
end
end
always @(*) begin
/* main: %185*/
/*   %194 = add nsw i32 %193, %191*/
begin
main_185_194 = (main_185_193 + main_185_191);
end
end
always @(posedge clk) begin
/* main: %185*/
/*   %194 = add nsw i32 %193, %191*/
if ((cur_state == LEGUP_F_main_BB_185_57))
begin
main_185_194_reg <= main_185_194;
if (reset == 1'b0 && ^(main_185_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_194_reg"); $finish; end
end
end
always @(*) begin
/* main: %185*/
/*   %195 = getelementptr inbounds [16 x i32]* %5, i32 0, i32 %194*/
begin
main_185_195 = (1'd0 + (4 * main_185_194_reg));
end
end
always @(posedge clk) begin
/* main: %185*/
/*   %195 = getelementptr inbounds [16 x i32]* %5, i32 0, i32 %194*/
if ((cur_state == LEGUP_F_main_BB_185_58))
begin
main_185_195_reg <= main_185_195;
if (reset == 1'b0 && ^(main_185_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_195_reg"); $finish; end
end
end
always @(*) begin
/* main: %185*/
/*   %196 = load i32* %195, align 4, !tbaa !0*/
begin
main_185_196 = main_0_5_out_a;
end
end
always @(posedge clk) begin
/* main: %185*/
/*   %196 = load i32* %195, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_185_59))
begin
main_185_196_reg <= main_185_196;
if (reset == 1'b0 && ^(main_185_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_196_reg"); $finish; end
end
end
always @(*) begin
/* main: %185*/
/*   %197 = icmp eq i32 %196, -1*/
begin
main_185_197 = (main_185_196 == -32'd1);
end
end
always @(posedge clk) begin
/* main: %185*/
/*   %197 = icmp eq i32 %196, -1*/
if ((cur_state == LEGUP_F_main_BB_185_59))
begin
main_185_197_reg <= main_185_197;
if (reset == 1'b0 && ^(main_185_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_197_reg"); $finish; end
end
end
always @(*) begin
/* main: %185*/
/*   %198 = icmp ult i32 %188, 4*/
begin
main_185_198 = (main_185_188 < 32'd4);
end
end
always @(posedge clk) begin
/* main: %185*/
/*   %198 = icmp ult i32 %188, 4*/
if ((cur_state == LEGUP_F_main_BB_185_57))
begin
main_185_198_reg <= main_185_198;
if (reset == 1'b0 && ^(main_185_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_198_reg"); $finish; end
end
end
always @(*) begin
/* main: %185*/
/*   %or.cond18 = and i1 %197, %198*/
begin
main_185_or_cond18 = (main_185_197 & main_185_198_reg);
end
end
always @(posedge clk) begin
/* main: %185*/
/*   %or.cond18 = and i1 %197, %198*/
if ((cur_state == LEGUP_F_main_BB_185_59))
begin
main_185_or_cond18_reg <= main_185_or_cond18;
if (reset == 1'b0 && ^(main_185_or_cond18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_or_cond18_reg"); $finish; end
end
end
always @(*) begin
/* main: %185*/
/*   %199 = icmp ult i32 %191, 4*/
begin
main_185_199 = (main_185_191 < 32'd4);
end
end
always @(posedge clk) begin
/* main: %185*/
/*   %199 = icmp ult i32 %191, 4*/
if ((cur_state == LEGUP_F_main_BB_185_57))
begin
main_185_199_reg <= main_185_199;
if (reset == 1'b0 && ^(main_185_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_199_reg"); $finish; end
end
end
always @(*) begin
/* main: %185*/
/*   %or.cond19 = and i1 %or.cond18, %199*/
begin
main_185_or_cond19 = (main_185_or_cond18 & main_185_199_reg);
end
end
always @(posedge clk) begin
/* main: %185*/
/*   %or.cond19 = and i1 %or.cond18, %199*/
if ((cur_state == LEGUP_F_main_BB_185_59))
begin
main_185_or_cond19_reg <= main_185_or_cond19;
if (reset == 1'b0 && ^(main_185_or_cond19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_or_cond19_reg"); $finish; end
end
end
always @(*) begin
/* main: %200*/
/*   %201 = getelementptr inbounds [14 x i32]* %3, i32 0, i32 %b.0*/
begin
main_200_201 = (1'd0 + (4 * main__backedge_b_0_reg));
end
end
always @(posedge clk) begin
/* main: %200*/
/*   %201 = getelementptr inbounds [14 x i32]* %3, i32 0, i32 %b.0*/
if ((cur_state == LEGUP_F_main_BB_200_60))
begin
main_200_201_reg <= main_200_201;
if (reset == 1'b0 && ^(main_200_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_201_reg"); $finish; end
end
end
always @(*) begin
/* main: %200*/
/*   %202 = getelementptr inbounds [14 x i32]* %4, i32 0, i32 %b.0*/
begin
main_200_202 = (1'd0 + (4 * main__backedge_b_0_reg));
end
end
always @(posedge clk) begin
/* main: %200*/
/*   %202 = getelementptr inbounds [14 x i32]* %4, i32 0, i32 %b.0*/
if ((cur_state == LEGUP_F_main_BB_200_60))
begin
main_200_202_reg <= main_200_202;
if (reset == 1'b0 && ^(main_200_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_202_reg"); $finish; end
end
end
always @(*) begin
/* main: %200*/
/*   %203 = add nsw i32 %i.0, 1*/
begin
main_200_203 = (main__backedge_i_0_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %200*/
/*   %203 = add nsw i32 %i.0, 1*/
if ((cur_state == LEGUP_F_main_BB_200_60))
begin
main_200_203_reg <= main_200_203;
if (reset == 1'b0 && ^(main_200_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_203_reg"); $finish; end
end
end
always @(*) begin
/* main: %204*/
/*   %205 = icmp sgt i32 %192, 28*/
begin
main_204_205 = ($signed(main_185_192_reg) > $signed(32'd28));
end
end
always @(posedge clk) begin
/* main: %204*/
/*   %205 = icmp sgt i32 %192, 28*/
if ((cur_state == LEGUP_F_main_BB_204_62))
begin
main_204_205_reg <= main_204_205;
if (reset == 1'b0 && ^(main_204_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_204_205_reg"); $finish; end
end
end
always @(*) begin
/* main: %208*/
/*   %209 = zext i1 %182 to i32*/
begin
main_208_209 = main_180_182_reg;
end
end
always @(posedge clk) begin
/* main: %208*/
/*   %209 = zext i1 %182 to i32*/
if ((cur_state == LEGUP_F_main_BB_208_64))
begin
main_208_209_reg <= main_208_209;
if (reset == 1'b0 && ^(main_208_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_208_209_reg"); $finish; end
end
end
always @(*) begin
/* main: %208*/
/*   %210 = xor i32 %209, 1*/
begin
main_208_210 = (main_208_209 ^ 32'd1);
end
end
always @(posedge clk) begin
/* main: %208*/
/*   %210 = xor i32 %209, 1*/
if ((cur_state == LEGUP_F_main_BB_208_64))
begin
main_208_210_reg <= main_208_210;
if (reset == 1'b0 && ^(main_208_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_208_210_reg"); $finish; end
end
end
always @(*) begin
/* main: %208*/
/*   %i.0. = add i32 %i.0, %210*/
begin
main_208_i_0_ = (main__backedge_i_0_reg + main_208_210);
end
end
always @(posedge clk) begin
/* main: %208*/
/*   %i.0. = add i32 %i.0, %210*/
if ((cur_state == LEGUP_F_main_BB_208_64))
begin
main_208_i_0__reg <= main_208_i_0_;
if (reset == 1'b0 && ^(main_208_i_0_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_208_i_0__reg"); $finish; end
end
end
always @(*) begin
/* main: %212*/
/*   %214 = icmp eq i32 %i.0, 15*/
begin
main_212_214 = (main__backedge_i_0_reg == 32'd15);
end
end
always @(posedge clk) begin
/* main: %212*/
/*   %214 = icmp eq i32 %i.0, 15*/
if ((cur_state == LEGUP_F_main_BB_212_66))
begin
main_212_214_reg <= main_212_214;
if (reset == 1'b0 && ^(main_212_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_212_214_reg"); $finish; end
end
end
always @(*) begin
/* main: %215*/
/*   %216 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 %i.0*/
begin
main_215_216 = (1'd0 + (4 * main__backedge_i_0_reg));
end
end
always @(posedge clk) begin
/* main: %215*/
/*   %216 = getelementptr inbounds [15 x i32]* %1, i32 0, i32 %i.0*/
if ((cur_state == LEGUP_F_main_BB_215_67))
begin
main_215_216_reg <= main_215_216;
if (reset == 1'b0 && ^(main_215_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_216_reg"); $finish; end
end
end
always @(*) begin
/* main: %215*/
/*   %217 = load i32* %216, align 4, !tbaa !0*/
begin
main_215_217 = main_0_1_out_a;
end
end
always @(posedge clk) begin
/* main: %215*/
/*   %217 = load i32* %216, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_68))
begin
main_215_217_reg <= main_215_217;
if (reset == 1'b0 && ^(main_215_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_217_reg"); $finish; end
end
end
always @(*) begin
/* main: %215*/
/*   %218 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 %i.0*/
begin
main_215_218 = (1'd0 + (4 * main__backedge_i_0_reg));
end
end
always @(posedge clk) begin
/* main: %215*/
/*   %218 = getelementptr inbounds [15 x i32]* %2, i32 0, i32 %i.0*/
if ((cur_state == LEGUP_F_main_BB_215_67))
begin
main_215_218_reg <= main_215_218;
if (reset == 1'b0 && ^(main_215_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_218_reg"); $finish; end
end
end
always @(*) begin
/* main: %215*/
/*   %219 = load i32* %218, align 4, !tbaa !0*/
begin
main_215_219 = main_0_2_out_a;
end
end
always @(posedge clk) begin
/* main: %215*/
/*   %219 = load i32* %218, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_68))
begin
main_215_219_reg <= main_215_219;
if (reset == 1'b0 && ^(main_215_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_219_reg"); $finish; end
end
end
always @(*) begin
/* main: %215*/
/*   %220 = getelementptr inbounds [14 x i32]* %3, i32 0, i32 %217*/
begin
main_215_220 = (1'd0 + (4 * main_215_217));
end
end
always @(posedge clk) begin
/* main: %215*/
/*   %220 = getelementptr inbounds [14 x i32]* %3, i32 0, i32 %217*/
if ((cur_state == LEGUP_F_main_BB_215_68))
begin
main_215_220_reg <= main_215_220;
if (reset == 1'b0 && ^(main_215_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_220_reg"); $finish; end
end
end
always @(*) begin
/* main: %215*/
/*   %221 = load i32* %220, align 4, !tbaa !0*/
begin
main_215_221 = main_0_3_out_a;
end
end
always @(posedge clk) begin
/* main: %215*/
/*   %221 = load i32* %220, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_69))
begin
main_215_221_reg <= main_215_221;
if (reset == 1'b0 && ^(main_215_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_221_reg"); $finish; end
end
end
always @(*) begin
/* main: %215*/
/*   %222 = getelementptr inbounds [14 x i32]* %3, i32 0, i32 %219*/
begin
main_215_222 = (1'd0 + (4 * main_215_219));
end
end
always @(posedge clk) begin
/* main: %215*/
/*   %222 = getelementptr inbounds [14 x i32]* %3, i32 0, i32 %219*/
if ((cur_state == LEGUP_F_main_BB_215_68))
begin
main_215_222_reg <= main_215_222;
if (reset == 1'b0 && ^(main_215_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_222_reg"); $finish; end
end
end
always @(*) begin
/* main: %215*/
/*   %223 = load i32* %222, align 4, !tbaa !0*/
begin
main_215_223 = main_0_3_out_b;
end
end
always @(posedge clk) begin
/* main: %215*/
/*   %223 = load i32* %222, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_69))
begin
main_215_223_reg <= main_215_223;
if (reset == 1'b0 && ^(main_215_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_223_reg"); $finish; end
end
end
always @(*) begin
/* main: %215*/
/*   %224 = sub nsw i32 %221, %223*/
begin
main_215_224 = (main_215_221 - main_215_223);
end
end
always @(posedge clk) begin
/* main: %215*/
/*   %224 = sub nsw i32 %221, %223*/
if ((cur_state == LEGUP_F_main_BB_215_69))
begin
main_215_224_reg <= main_215_224;
if (reset == 1'b0 && ^(main_215_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_224_reg"); $finish; end
end
end
always @(*) begin
/* main: %215*/
/*   %225 = sub i32 0, %224*/
begin
main_215_225 = (32'd0 - main_215_224);
end
end
always @(posedge clk) begin
/* main: %215*/
/*   %225 = sub i32 0, %224*/
if ((cur_state == LEGUP_F_main_BB_215_69))
begin
main_215_225_reg <= main_215_225;
if (reset == 1'b0 && ^(main_215_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_225_reg"); $finish; end
end
end
always @(*) begin
/* main: %215*/
/*   %226 = icmp slt i32 %224, 0*/
begin
main_215_226 = ($signed(main_215_224) < $signed(32'd0));
end
end
always @(posedge clk) begin
/* main: %215*/
/*   %226 = icmp slt i32 %224, 0*/
if ((cur_state == LEGUP_F_main_BB_215_69))
begin
main_215_226_reg <= main_215_226;
if (reset == 1'b0 && ^(main_215_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_226_reg"); $finish; end
end
end
always @(*) begin
/* main: %215*/
/*   %.20 = select i1 %226, i32 %225, i32 %224*/
begin
main_215__20 = (main_215_226 ? main_215_225 : main_215_224);
end
end
always @(posedge clk) begin
/* main: %215*/
/*   %.20 = select i1 %226, i32 %225, i32 %224*/
if ((cur_state == LEGUP_F_main_BB_215_69))
begin
main_215__20_reg <= main_215__20;
if (reset == 1'b0 && ^(main_215__20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215__20_reg"); $finish; end
end
end
always @(*) begin
/* main: %215*/
/*   %227 = getelementptr inbounds [14 x i32]* %4, i32 0, i32 %217*/
begin
main_215_227 = (1'd0 + (4 * main_215_217));
end
end
always @(posedge clk) begin
/* main: %215*/
/*   %227 = getelementptr inbounds [14 x i32]* %4, i32 0, i32 %217*/
if ((cur_state == LEGUP_F_main_BB_215_68))
begin
main_215_227_reg <= main_215_227;
if (reset == 1'b0 && ^(main_215_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_227_reg"); $finish; end
end
end
always @(*) begin
/* main: %215*/
/*   %228 = load i32* %227, align 4, !tbaa !0*/
begin
main_215_228 = main_0_4_out_a;
end
end
always @(posedge clk) begin
/* main: %215*/
/*   %228 = load i32* %227, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_69))
begin
main_215_228_reg <= main_215_228;
if (reset == 1'b0 && ^(main_215_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_228_reg"); $finish; end
end
end
always @(*) begin
/* main: %215*/
/*   %229 = getelementptr inbounds [14 x i32]* %4, i32 0, i32 %219*/
begin
main_215_229 = (1'd0 + (4 * main_215_219));
end
end
always @(posedge clk) begin
/* main: %215*/
/*   %229 = getelementptr inbounds [14 x i32]* %4, i32 0, i32 %219*/
if ((cur_state == LEGUP_F_main_BB_215_68))
begin
main_215_229_reg <= main_215_229;
if (reset == 1'b0 && ^(main_215_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_229_reg"); $finish; end
end
end
always @(*) begin
/* main: %215*/
/*   %230 = load i32* %229, align 4, !tbaa !0*/
begin
main_215_230 = main_0_4_out_b;
end
end
always @(posedge clk) begin
/* main: %215*/
/*   %230 = load i32* %229, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_69))
begin
main_215_230_reg <= main_215_230;
if (reset == 1'b0 && ^(main_215_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_230_reg"); $finish; end
end
end
always @(*) begin
/* main: %215*/
/*   %231 = sub nsw i32 %228, %230*/
begin
main_215_231 = (main_215_228 - main_215_230);
end
end
always @(posedge clk) begin
/* main: %215*/
/*   %231 = sub nsw i32 %228, %230*/
if ((cur_state == LEGUP_F_main_BB_215_69))
begin
main_215_231_reg <= main_215_231;
if (reset == 1'b0 && ^(main_215_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_231_reg"); $finish; end
end
end
always @(*) begin
/* main: %215*/
/*   %232 = icmp slt i32 %231, 0*/
begin
main_215_232 = ($signed(main_215_231) < $signed(32'd0));
end
end
always @(posedge clk) begin
/* main: %215*/
/*   %232 = icmp slt i32 %231, 0*/
if ((cur_state == LEGUP_F_main_BB_215_69))
begin
main_215_232_reg <= main_215_232;
if (reset == 1'b0 && ^(main_215_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_232_reg"); $finish; end
end
end
always @(*) begin
/* main: %215*/
/*   %233 = sub i32 0, %231*/
begin
main_215_233 = (32'd0 - main_215_231);
end
end
always @(posedge clk) begin
/* main: %215*/
/*   %233 = sub i32 0, %231*/
if ((cur_state == LEGUP_F_main_BB_215_69))
begin
main_215_233_reg <= main_215_233;
if (reset == 1'b0 && ^(main_215_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_233_reg"); $finish; end
end
end
always @(*) begin
/* main: %215*/
/*   %diff_pos_y.0 = select i1 %232, i32 %233, i32 %231*/
begin
main_215_diff_pos_y_0 = (main_215_232 ? main_215_233 : main_215_231);
end
end
always @(posedge clk) begin
/* main: %215*/
/*   %diff_pos_y.0 = select i1 %232, i32 %233, i32 %231*/
if ((cur_state == LEGUP_F_main_BB_215_69))
begin
main_215_diff_pos_y_0_reg <= main_215_diff_pos_y_0;
if (reset == 1'b0 && ^(main_215_diff_pos_y_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_diff_pos_y_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %215*/
/*   %234 = add nsw i32 %diff_pos_y.0, %.20*/
begin
main_215_234 = (main_215_diff_pos_y_0_reg + main_215__20_reg);
end
end
always @(posedge clk) begin
/* main: %215*/
/*   %234 = add nsw i32 %diff_pos_y.0, %.20*/
if ((cur_state == LEGUP_F_main_BB_215_70))
begin
main_215_234_reg <= main_215_234;
if (reset == 1'b0 && ^(main_215_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_234_reg"); $finish; end
end
end
always @(*) begin
/* main: %215*/
/*   %235 = icmp sgt i32 %234, 0*/
begin
main_215_235 = ($signed(main_215_234) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* main: %215*/
/*   %235 = icmp sgt i32 %234, 0*/
if ((cur_state == LEGUP_F_main_BB_215_70))
begin
main_215_235_reg <= main_215_235;
if (reset == 1'b0 && ^(main_215_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_235_reg"); $finish; end
end
end
always @(*) begin
/* main: %236*/
/*   %237 = add i32 %sum.0, -1*/
begin
main_236_237 = (main__backedge_sum_0_reg + -32'd1);
end
end
always @(posedge clk) begin
/* main: %236*/
/*   %237 = add i32 %sum.0, -1*/
if ((cur_state == LEGUP_F_main_BB_236_71))
begin
main_236_237_reg <= main_236_237;
if (reset == 1'b0 && ^(main_236_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_237_reg"); $finish; end
end
end
always @(*) begin
/* main: %236*/
/*   %238 = add i32 %237, %234*/
begin
main_236_238 = (main_236_237 + main_215_234_reg);
end
end
always @(posedge clk) begin
/* main: %236*/
/*   %238 = add i32 %237, %234*/
if ((cur_state == LEGUP_F_main_BB_236_71))
begin
main_236_238_reg <= main_236_238;
if (reset == 1'b0 && ^(main_236_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_238_reg"); $finish; end
end
end
always @(*) begin
/* main: %239*/
/*   %sum.1 = phi i32 [ %238, %236 ], [ %sum.0, %215 ]*/
if ((((cur_state == LEGUP_F_main_BB_215_70) & (memory_controller_waitrequest == 1'd0)) & (main_215_235 == 1'd0)))
begin
main_239_sum_1 = main__backedge_sum_0_reg;
end
/* main: %239*/
/*   %sum.1 = phi i32 [ %238, %236 ], [ %sum.0, %215 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_236_71) & (memory_controller_waitrequest == 1'd0))) */
begin
main_239_sum_1 = main_236_238;
end
end
always @(posedge clk) begin
/* main: %239*/
/*   %sum.1 = phi i32 [ %238, %236 ], [ %sum.0, %215 ]*/
if ((((cur_state == LEGUP_F_main_BB_215_70) & (memory_controller_waitrequest == 1'd0)) & (main_215_235 == 1'd0)))
begin
main_239_sum_1_reg <= main_239_sum_1;
if (reset == 1'b0 && ^(main_239_sum_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_sum_1_reg"); $finish; end
end
/* main: %239*/
/*   %sum.1 = phi i32 [ %238, %236 ], [ %sum.0, %215 ]*/
if (((cur_state == LEGUP_F_main_BB_236_71) & (memory_controller_waitrequest == 1'd0)))
begin
main_239_sum_1_reg <= main_239_sum_1;
if (reset == 1'b0 && ^(main_239_sum_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_sum_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %239*/
/*   %240 = add nsw i32 %i.0, 1*/
begin
main_239_240 = (main__backedge_i_0_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %239*/
/*   %240 = add nsw i32 %i.0, 1*/
if ((cur_state == LEGUP_F_main_BB_239_72))
begin
main_239_240_reg <= main_239_240;
if (reset == 1'b0 && ^(main_239_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_240_reg"); $finish; end
end
end
always @(*) begin
/* main: %241*/
/*   %.0 = phi i32 [ 0, %206 ], [ 0, %176 ], [ 1, %.preheader22 ]*/
if (((cur_state == LEGUP_F_main_BB__preheader22_12) & (memory_controller_waitrequest == 1'd0)))
begin
main_241__0 = 32'd1;
end
/* main: %241*/
/*   %.0 = phi i32 [ 0, %206 ], [ 0, %176 ], [ 1, %.preheader22 ]*/
else if (((cur_state == LEGUP_F_main_BB_176_52) & (memory_controller_waitrequest == 1'd0)))
begin
main_241__0 = 32'd0;
end
/* main: %241*/
/*   %.0 = phi i32 [ 0, %206 ], [ 0, %176 ], [ 1, %.preheader22 ]*/
else /* if (((cur_state == LEGUP_F_main_BB_206_63) & (memory_controller_waitrequest == 1'd0))) */
begin
main_241__0 = 32'd0;
end
end
always @(posedge clk) begin
/* main: %241*/
/*   %.0 = phi i32 [ 0, %206 ], [ 0, %176 ], [ 1, %.preheader22 ]*/
if (((cur_state == LEGUP_F_main_BB__preheader22_12) & (memory_controller_waitrequest == 1'd0)))
begin
main_241__0_reg <= main_241__0;
if (reset == 1'b0 && ^(main_241__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_241__0_reg"); $finish; end
end
/* main: %241*/
/*   %.0 = phi i32 [ 0, %206 ], [ 0, %176 ], [ 1, %.preheader22 ]*/
if (((cur_state == LEGUP_F_main_BB_176_52) & (memory_controller_waitrequest == 1'd0)))
begin
main_241__0_reg <= main_241__0;
if (reset == 1'b0 && ^(main_241__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_241__0_reg"); $finish; end
end
/* main: %241*/
/*   %.0 = phi i32 [ 0, %206 ], [ 0, %176 ], [ 1, %.preheader22 ]*/
if (((cur_state == LEGUP_F_main_BB_206_63) & (memory_controller_waitrequest == 1'd0)))
begin
main_241__0_reg <= main_241__0;
if (reset == 1'b0 && ^(main_241__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_241__0_reg"); $finish; end
end
end
always @(*) begin
main_0_1_address_a = 1'd0;
/* main: %.preheader24*/
/*   store i32 0, i32* %.sub8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_13))
begin
main_0_1_address_a = (main_0__sub8_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 2, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_14))
begin
main_0_1_address_a = (main_0_10_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 4, i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_15))
begin
main_0_1_address_a = (main_0_14_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 6, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_16))
begin
main_0_1_address_a = (main_0_18_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 7, i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_17))
begin
main_0_1_address_a = (main_0_22_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 8, i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_18))
begin
main_0_1_address_a = (main_0_26_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 10, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_19))
begin
main_0_1_address_a = (main_0_30_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 12, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_20))
begin
main_0_1_address_a = (main_0_34_reg >>> 3'd2);
end
/* main: %215*/
/*   %217 = load i32* %216, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_67))
begin
main_0_1_address_a = (main_215_216 >>> 3'd2);
end
end
always @(*) begin
main_0_1_write_enable_a = 1'd0;
/* main: %.preheader24*/
/*   store i32 0, i32* %.sub8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_13))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 2, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_14))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 4, i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_15))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 6, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_16))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 7, i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_17))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 8, i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_18))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 10, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_19))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 12, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_20))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %215*/
/*   %217 = load i32* %216, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_67))
begin
main_0_1_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_1_in_a = 1'd0;
/* main: %.preheader24*/
/*   store i32 0, i32* %.sub8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_13))
begin
main_0_1_in_a = 32'd0;
end
/* main: %.preheader24*/
/*   store i32 2, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_14))
begin
main_0_1_in_a = 32'd2;
end
/* main: %.preheader24*/
/*   store i32 4, i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_15))
begin
main_0_1_in_a = 32'd4;
end
/* main: %.preheader24*/
/*   store i32 6, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_16))
begin
main_0_1_in_a = 32'd6;
end
/* main: %.preheader24*/
/*   store i32 7, i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_17))
begin
main_0_1_in_a = 32'd7;
end
/* main: %.preheader24*/
/*   store i32 8, i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_18))
begin
main_0_1_in_a = 32'd8;
end
/* main: %.preheader24*/
/*   store i32 10, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_19))
begin
main_0_1_in_a = 32'd10;
end
/* main: %.preheader24*/
/*   store i32 12, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_20))
begin
main_0_1_in_a = 32'd12;
end
end
always @(*) begin
main_0_1_address_b = 1'd0;
/* main: %.preheader24*/
/*   store i32 1, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_13))
begin
main_0_1_address_b = (main_0_8_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 3, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_14))
begin
main_0_1_address_b = (main_0_12_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 5, i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_15))
begin
main_0_1_address_b = (main_0_16_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 7, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_16))
begin
main_0_1_address_b = (main_0_20_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 7, i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_17))
begin
main_0_1_address_b = (main_0_24_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 9, i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_18))
begin
main_0_1_address_b = (main_0_28_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 11, i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_19))
begin
main_0_1_address_b = (main_0_32_reg >>> 3'd2);
end
/* main: %136*/
/*   %138 = load i32* %137, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_136_40))
begin
main_0_1_address_b = (main_136_137 >>> 3'd2);
end
end
always @(*) begin
main_0_1_write_enable_b = 1'd0;
/* main: %.preheader24*/
/*   store i32 1, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_13))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 3, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_14))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 5, i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_15))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 7, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_16))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 7, i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_17))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 9, i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_18))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 11, i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_19))
begin
main_0_1_write_enable_b = 1'd1;
end
/* main: %136*/
/*   %138 = load i32* %137, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_136_40))
begin
main_0_1_write_enable_b = 1'd0;
end
end
always @(*) begin
main_0_1_in_b = 1'd0;
/* main: %.preheader24*/
/*   store i32 1, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_13))
begin
main_0_1_in_b = 32'd1;
end
/* main: %.preheader24*/
/*   store i32 3, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_14))
begin
main_0_1_in_b = 32'd3;
end
/* main: %.preheader24*/
/*   store i32 5, i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_15))
begin
main_0_1_in_b = 32'd5;
end
/* main: %.preheader24*/
/*   store i32 7, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_16))
begin
main_0_1_in_b = 32'd7;
end
/* main: %.preheader24*/
/*   store i32 7, i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_17))
begin
main_0_1_in_b = 32'd7;
end
/* main: %.preheader24*/
/*   store i32 9, i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_18))
begin
main_0_1_in_b = 32'd9;
end
/* main: %.preheader24*/
/*   store i32 11, i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_19))
begin
main_0_1_in_b = 32'd11;
end
end
always @(*) begin
main_0_2_address_a = 1'd0;
/* main: %.preheader24*/
/*   store i32 4, i32* %.sub9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_13))
begin
main_0_2_address_a = (main_0__sub9_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 6, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_14))
begin
main_0_2_address_a = (main_0_11_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 8, i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_15))
begin
main_0_2_address_a = (main_0_15_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 10, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_16))
begin
main_0_2_address_a = (main_0_19_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 5, i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_17))
begin
main_0_2_address_a = (main_0_23_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 11, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_18))
begin
main_0_2_address_a = (main_0_27_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 12, i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_19))
begin
main_0_2_address_a = (main_0_31_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 13, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_20))
begin
main_0_2_address_a = (main_0_35_reg >>> 3'd2);
end
/* main: %215*/
/*   %219 = load i32* %218, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_67))
begin
main_0_2_address_a = (main_215_218 >>> 3'd2);
end
end
always @(*) begin
main_0_2_write_enable_a = 1'd0;
/* main: %.preheader24*/
/*   store i32 4, i32* %.sub9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_13))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 6, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_14))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 8, i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_15))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 10, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_16))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 5, i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_17))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 11, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_18))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 12, i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_19))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 13, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_20))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %215*/
/*   %219 = load i32* %218, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_67))
begin
main_0_2_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_2_in_a = 1'd0;
/* main: %.preheader24*/
/*   store i32 4, i32* %.sub9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_13))
begin
main_0_2_in_a = 32'd4;
end
/* main: %.preheader24*/
/*   store i32 6, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_14))
begin
main_0_2_in_a = 32'd6;
end
/* main: %.preheader24*/
/*   store i32 8, i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_15))
begin
main_0_2_in_a = 32'd8;
end
/* main: %.preheader24*/
/*   store i32 10, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_16))
begin
main_0_2_in_a = 32'd10;
end
/* main: %.preheader24*/
/*   store i32 5, i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_17))
begin
main_0_2_in_a = 32'd5;
end
/* main: %.preheader24*/
/*   store i32 11, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_18))
begin
main_0_2_in_a = 32'd11;
end
/* main: %.preheader24*/
/*   store i32 12, i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_19))
begin
main_0_2_in_a = 32'd12;
end
/* main: %.preheader24*/
/*   store i32 13, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_20))
begin
main_0_2_in_a = 32'd13;
end
end
always @(*) begin
main_0_2_address_b = 1'd0;
/* main: %.preheader24*/
/*   store i32 5, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_13))
begin
main_0_2_address_b = (main_0_9_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 7, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_14))
begin
main_0_2_address_b = (main_0_13_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 9, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_15))
begin
main_0_2_address_b = (main_0_17_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 4, i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_16))
begin
main_0_2_address_b = (main_0_21_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 6, i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_17))
begin
main_0_2_address_b = (main_0_25_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 11, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_18))
begin
main_0_2_address_b = (main_0_29_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 13, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_19))
begin
main_0_2_address_b = (main_0_33_reg >>> 3'd2);
end
/* main: %136*/
/*   %140 = load i32* %139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_136_40))
begin
main_0_2_address_b = (main_136_139 >>> 3'd2);
end
end
always @(*) begin
main_0_2_write_enable_b = 1'd0;
/* main: %.preheader24*/
/*   store i32 5, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_13))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 7, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_14))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 9, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_15))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 4, i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_16))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 6, i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_17))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 11, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_18))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 13, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_19))
begin
main_0_2_write_enable_b = 1'd1;
end
/* main: %136*/
/*   %140 = load i32* %139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_136_40))
begin
main_0_2_write_enable_b = 1'd0;
end
end
always @(*) begin
main_0_2_in_b = 1'd0;
/* main: %.preheader24*/
/*   store i32 5, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_13))
begin
main_0_2_in_b = 32'd5;
end
/* main: %.preheader24*/
/*   store i32 7, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_14))
begin
main_0_2_in_b = 32'd7;
end
/* main: %.preheader24*/
/*   store i32 9, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_15))
begin
main_0_2_in_b = 32'd9;
end
/* main: %.preheader24*/
/*   store i32 4, i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_16))
begin
main_0_2_in_b = 32'd4;
end
/* main: %.preheader24*/
/*   store i32 6, i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_17))
begin
main_0_2_in_b = 32'd6;
end
/* main: %.preheader24*/
/*   store i32 11, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_18))
begin
main_0_2_in_b = 32'd11;
end
/* main: %.preheader24*/
/*   store i32 13, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_19))
begin
main_0_2_in_b = 32'd13;
end
end
always @(*) begin
main_0_3_address_a = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_3_address_a = (main_0_scevgep55_1_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32))
begin
main_0_3_address_a = (main_0_scevgep55_3_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33))
begin
main_0_3_address_a = (main_0_scevgep55_5_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34))
begin
main_0_3_address_a = (main_0_scevgep55_7_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35))
begin
main_0_3_address_a = (main_0_scevgep55_9_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_36))
begin
main_0_3_address_a = (main_0_scevgep55_11_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37))
begin
main_0_3_address_a = (main_0_scevgep55_13_reg >>> 3'd2);
end
/* main: %136*/
/*   %142 = load i32* %141, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_136_41))
begin
main_0_3_address_a = (main_136_141 >>> 3'd2);
end
/* main: %151*/
/*   %154 = load i32* %153, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_151_45))
begin
main_0_3_address_a = (main_151_153 >>> 3'd2);
end
/* main: %200*/
/*   store i32 %188, i32* %201, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_200_60))
begin
main_0_3_address_a = (main_200_201 >>> 3'd2);
end
/* main: %215*/
/*   %221 = load i32* %220, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_68))
begin
main_0_3_address_a = (main_215_220 >>> 3'd2);
end
end
always @(*) begin
main_0_3_write_enable_a = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_3_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32))
begin
main_0_3_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33))
begin
main_0_3_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34))
begin
main_0_3_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35))
begin
main_0_3_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_36))
begin
main_0_3_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37))
begin
main_0_3_write_enable_a = 1'd1;
end
/* main: %136*/
/*   %142 = load i32* %141, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_136_41))
begin
main_0_3_write_enable_a = 1'd0;
end
/* main: %151*/
/*   %154 = load i32* %153, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_151_45))
begin
main_0_3_write_enable_a = 1'd0;
end
/* main: %200*/
/*   store i32 %188, i32* %201, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_200_60))
begin
main_0_3_write_enable_a = 1'd1;
end
/* main: %215*/
/*   %221 = load i32* %220, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_68))
begin
main_0_3_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_3_in_a = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_3_in_a = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32))
begin
main_0_3_in_a = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33))
begin
main_0_3_in_a = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34))
begin
main_0_3_in_a = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35))
begin
main_0_3_in_a = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_36))
begin
main_0_3_in_a = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37))
begin
main_0_3_in_a = -32'd1;
end
/* main: %200*/
/*   store i32 %188, i32* %201, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_200_60))
begin
main_0_3_in_a = main_185_188_reg;
end
end
always @(*) begin
main_0_3_address_b = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_3_address_b = (main_0_scevgep55_2_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32))
begin
main_0_3_address_b = (main_0_scevgep55_4_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33))
begin
main_0_3_address_b = (main_0_scevgep55_6_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34))
begin
main_0_3_address_b = (main_0_scevgep55_8_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35))
begin
main_0_3_address_b = (main_0_scevgep55_10_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_36))
begin
main_0_3_address_b = (main_0_scevgep55_12_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 0, i32* %scevgep55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37))
begin
main_0_3_address_b = (main_0_scevgep55_reg >>> 3'd2);
end
/* main: %136*/
/*   %146 = load i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_136_41))
begin
main_0_3_address_b = (main_136_145 >>> 3'd2);
end
/* main: %151*/
/*   store i32 %157, i32* %158, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_151_46))
begin
main_0_3_address_b = (main_151_158_reg >>> 3'd2);
end
/* main: %215*/
/*   %223 = load i32* %222, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_68))
begin
main_0_3_address_b = (main_215_222 >>> 3'd2);
end
end
always @(*) begin
main_0_3_write_enable_b = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_3_write_enable_b = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32))
begin
main_0_3_write_enable_b = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33))
begin
main_0_3_write_enable_b = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34))
begin
main_0_3_write_enable_b = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35))
begin
main_0_3_write_enable_b = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_36))
begin
main_0_3_write_enable_b = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 0, i32* %scevgep55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37))
begin
main_0_3_write_enable_b = 1'd1;
end
/* main: %136*/
/*   %146 = load i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_136_41))
begin
main_0_3_write_enable_b = 1'd0;
end
/* main: %151*/
/*   store i32 %157, i32* %158, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_151_46))
begin
main_0_3_write_enable_b = 1'd1;
end
/* main: %215*/
/*   %223 = load i32* %222, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_68))
begin
main_0_3_write_enable_b = 1'd0;
end
end
always @(*) begin
main_0_3_in_b = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_3_in_b = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32))
begin
main_0_3_in_b = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33))
begin
main_0_3_in_b = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34))
begin
main_0_3_in_b = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35))
begin
main_0_3_in_b = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep55.12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_36))
begin
main_0_3_in_b = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 0, i32* %scevgep55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37))
begin
main_0_3_in_b = 32'd0;
end
/* main: %151*/
/*   store i32 %157, i32* %158, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_151_46))
begin
main_0_3_in_b = main_151_157;
end
end
always @(*) begin
main_0_4_address_a = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_4_address_a = (main_0_scevgep56_1_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32))
begin
main_0_4_address_a = (main_0_scevgep56_3_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33))
begin
main_0_4_address_a = (main_0_scevgep56_5_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34))
begin
main_0_4_address_a = (main_0_scevgep56_7_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35))
begin
main_0_4_address_a = (main_0_scevgep56_9_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_36))
begin
main_0_4_address_a = (main_0_scevgep56_11_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37))
begin
main_0_4_address_a = (main_0_scevgep56_13_reg >>> 3'd2);
end
/* main: %136*/
/*   %144 = load i32* %143, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_136_41))
begin
main_0_4_address_a = (main_136_143 >>> 3'd2);
end
/* main: %151*/
/*   store i32 %163, i32* %164, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_151_46))
begin
main_0_4_address_a = (main_151_164_reg >>> 3'd2);
end
/* main: %215*/
/*   %228 = load i32* %227, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_68))
begin
main_0_4_address_a = (main_215_227 >>> 3'd2);
end
end
always @(*) begin
main_0_4_write_enable_a = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_4_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32))
begin
main_0_4_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33))
begin
main_0_4_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34))
begin
main_0_4_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35))
begin
main_0_4_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_36))
begin
main_0_4_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37))
begin
main_0_4_write_enable_a = 1'd1;
end
/* main: %136*/
/*   %144 = load i32* %143, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_136_41))
begin
main_0_4_write_enable_a = 1'd0;
end
/* main: %151*/
/*   store i32 %163, i32* %164, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_151_46))
begin
main_0_4_write_enable_a = 1'd1;
end
/* main: %215*/
/*   %228 = load i32* %227, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_68))
begin
main_0_4_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_4_in_a = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_4_in_a = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32))
begin
main_0_4_in_a = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33))
begin
main_0_4_in_a = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34))
begin
main_0_4_in_a = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35))
begin
main_0_4_in_a = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_36))
begin
main_0_4_in_a = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37))
begin
main_0_4_in_a = -32'd1;
end
/* main: %151*/
/*   store i32 %163, i32* %164, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_151_46))
begin
main_0_4_in_a = main_151_163;
end
end
always @(*) begin
main_0_4_address_b = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_4_address_b = (main_0_scevgep56_2_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32))
begin
main_0_4_address_b = (main_0_scevgep56_4_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33))
begin
main_0_4_address_b = (main_0_scevgep56_6_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34))
begin
main_0_4_address_b = (main_0_scevgep56_8_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35))
begin
main_0_4_address_b = (main_0_scevgep56_10_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_36))
begin
main_0_4_address_b = (main_0_scevgep56_12_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 0, i32* %scevgep56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37))
begin
main_0_4_address_b = (main_0_scevgep56_reg >>> 3'd2);
end
/* main: %151*/
/*   %160 = load i32* %159, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_151_45))
begin
main_0_4_address_b = (main_151_159 >>> 3'd2);
end
/* main: %200*/
/*   store i32 %191, i32* %202, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_200_60))
begin
main_0_4_address_b = (main_200_202 >>> 3'd2);
end
/* main: %215*/
/*   %230 = load i32* %229, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_68))
begin
main_0_4_address_b = (main_215_229 >>> 3'd2);
end
end
always @(*) begin
main_0_4_write_enable_b = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_4_write_enable_b = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32))
begin
main_0_4_write_enable_b = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33))
begin
main_0_4_write_enable_b = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34))
begin
main_0_4_write_enable_b = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35))
begin
main_0_4_write_enable_b = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_36))
begin
main_0_4_write_enable_b = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 0, i32* %scevgep56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37))
begin
main_0_4_write_enable_b = 1'd1;
end
/* main: %151*/
/*   %160 = load i32* %159, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_151_45))
begin
main_0_4_write_enable_b = 1'd0;
end
/* main: %200*/
/*   store i32 %191, i32* %202, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_200_60))
begin
main_0_4_write_enable_b = 1'd1;
end
/* main: %215*/
/*   %230 = load i32* %229, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_215_68))
begin
main_0_4_write_enable_b = 1'd0;
end
end
always @(*) begin
main_0_4_in_b = 1'd0;
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_4_in_b = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_32))
begin
main_0_4_in_b = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_33))
begin
main_0_4_in_b = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_34))
begin
main_0_4_in_b = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_35))
begin
main_0_4_in_b = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 -1, i32* %scevgep56.12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_36))
begin
main_0_4_in_b = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 0, i32* %scevgep56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_37))
begin
main_0_4_in_b = 32'd0;
end
/* main: %200*/
/*   store i32 %191, i32* %202, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_200_60))
begin
main_0_4_in_b = main_185_191_reg;
end
end
always @(*) begin
main_0_5_address_a = 1'd0;
/* main: %.preheader22*/
/*   %90 = load i32* %.sub12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_4))
begin
main_0_5_address_a = (main_0__sub12_reg >>> 3'd2);
end
/* main: %.preheader22*/
/*   %94 = load i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_5))
begin
main_0_5_address_a = (main__preheader22_scevgep_2_reg >>> 3'd2);
end
/* main: %.preheader22*/
/*   %99 = load i32* %scevgep.139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_6))
begin
main_0_5_address_a = (main__preheader22_scevgep_139_reg >>> 3'd2);
end
/* main: %.preheader22*/
/*   %103 = load i32* %scevgep.2.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_7))
begin
main_0_5_address_a = (main__preheader22_scevgep_2_1_reg >>> 3'd2);
end
/* main: %.preheader22*/
/*   %108 = load i32* %scevgep.240, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_8))
begin
main_0_5_address_a = (main__preheader22_scevgep_240_reg >>> 3'd2);
end
/* main: %.preheader22*/
/*   %112 = load i32* %scevgep.2.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_9))
begin
main_0_5_address_a = (main__preheader22_scevgep_2_2_reg >>> 3'd2);
end
/* main: %.preheader22*/
/*   %117 = load i32* %scevgep.341, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_10))
begin
main_0_5_address_a = (main__preheader22_scevgep_341_reg >>> 3'd2);
end
/* main: %.preheader22*/
/*   %121 = load i32* %scevgep.2.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_11))
begin
main_0_5_address_a = (main__preheader22_scevgep_2_3_reg >>> 3'd2);
end
/* main: %130*/
/*   store i32 -1, i32* %s.i.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_130_29))
begin
main_0_5_address_a = (main_127_s_i_0_reg >>> 3'd2);
end
/* main: %legup_memset_4.exit*/
/*   store i32 0, i32* %.sub12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_5_address_a = (main_0__sub12_reg >>> 3'd2);
end
/* main: %185*/
/*   %196 = load i32* %195, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_185_58))
begin
main_0_5_address_a = (main_185_195 >>> 3'd2);
end
/* main: %200*/
/*   store i32 %b.0, i32* %195, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_200_60))
begin
main_0_5_address_a = (main_185_195_reg >>> 3'd2);
end
end
always @(*) begin
main_0_5_write_enable_a = 1'd0;
/* main: %.preheader22*/
/*   %90 = load i32* %.sub12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_4))
begin
main_0_5_write_enable_a = 1'd0;
end
/* main: %.preheader22*/
/*   %94 = load i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_5))
begin
main_0_5_write_enable_a = 1'd0;
end
/* main: %.preheader22*/
/*   %99 = load i32* %scevgep.139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_6))
begin
main_0_5_write_enable_a = 1'd0;
end
/* main: %.preheader22*/
/*   %103 = load i32* %scevgep.2.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_7))
begin
main_0_5_write_enable_a = 1'd0;
end
/* main: %.preheader22*/
/*   %108 = load i32* %scevgep.240, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_8))
begin
main_0_5_write_enable_a = 1'd0;
end
/* main: %.preheader22*/
/*   %112 = load i32* %scevgep.2.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_9))
begin
main_0_5_write_enable_a = 1'd0;
end
/* main: %.preheader22*/
/*   %117 = load i32* %scevgep.341, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_10))
begin
main_0_5_write_enable_a = 1'd0;
end
/* main: %.preheader22*/
/*   %121 = load i32* %scevgep.2.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_11))
begin
main_0_5_write_enable_a = 1'd0;
end
/* main: %130*/
/*   store i32 -1, i32* %s.i.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_130_29))
begin
main_0_5_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 0, i32* %.sub12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_5_write_enable_a = 1'd1;
end
/* main: %185*/
/*   %196 = load i32* %195, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_185_58))
begin
main_0_5_write_enable_a = 1'd0;
end
/* main: %200*/
/*   store i32 %b.0, i32* %195, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_200_60))
begin
main_0_5_write_enable_a = 1'd1;
end
end
always @(*) begin
main_0_5_in_a = 1'd0;
/* main: %130*/
/*   store i32 -1, i32* %s.i.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_130_29))
begin
main_0_5_in_a = -32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 0, i32* %.sub12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_31))
begin
main_0_5_in_a = 32'd0;
end
/* main: %200*/
/*   store i32 %b.0, i32* %195, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_200_60))
begin
main_0_5_in_a = main__backedge_b_0_reg;
end
end
always @(*) begin
main_0_5_address_b = 1'd0;
/* main: %.preheader22*/
/*   %92 = load i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_4))
begin
main_0_5_address_b = (main__preheader22_scevgep_1 >>> 3'd2);
end
/* main: %.preheader22*/
/*   %96 = load i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_5))
begin
main_0_5_address_b = (main__preheader22_scevgep_3_reg >>> 3'd2);
end
/* main: %.preheader22*/
/*   %101 = load i32* %scevgep.1.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_6))
begin
main_0_5_address_b = (main__preheader22_scevgep_1_1_reg >>> 3'd2);
end
/* main: %.preheader22*/
/*   %105 = load i32* %scevgep.3.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_7))
begin
main_0_5_address_b = (main__preheader22_scevgep_3_1_reg >>> 3'd2);
end
/* main: %.preheader22*/
/*   %110 = load i32* %scevgep.1.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_8))
begin
main_0_5_address_b = (main__preheader22_scevgep_1_2_reg >>> 3'd2);
end
/* main: %.preheader22*/
/*   %114 = load i32* %scevgep.3.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_9))
begin
main_0_5_address_b = (main__preheader22_scevgep_3_2_reg >>> 3'd2);
end
/* main: %.preheader22*/
/*   %119 = load i32* %scevgep.1.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_10))
begin
main_0_5_address_b = (main__preheader22_scevgep_1_3_reg >>> 3'd2);
end
/* main: %.preheader22*/
/*   %123 = load i32* %scevgep.3.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_11))
begin
main_0_5_address_b = (main__preheader22_scevgep_3_3_reg >>> 3'd2);
end
/* main: %151*/
/*   %169 = load i32* %168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_151_47))
begin
main_0_5_address_b = (main_151_168 >>> 3'd2);
end
/* main: %173*/
/*   store i32 %a.0, i32* %168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_173_49))
begin
main_0_5_address_b = (main_151_168_reg >>> 3'd2);
end
end
always @(*) begin
main_0_5_write_enable_b = 1'd0;
/* main: %.preheader22*/
/*   %92 = load i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_4))
begin
main_0_5_write_enable_b = 1'd0;
end
/* main: %.preheader22*/
/*   %96 = load i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_5))
begin
main_0_5_write_enable_b = 1'd0;
end
/* main: %.preheader22*/
/*   %101 = load i32* %scevgep.1.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_6))
begin
main_0_5_write_enable_b = 1'd0;
end
/* main: %.preheader22*/
/*   %105 = load i32* %scevgep.3.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_7))
begin
main_0_5_write_enable_b = 1'd0;
end
/* main: %.preheader22*/
/*   %110 = load i32* %scevgep.1.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_8))
begin
main_0_5_write_enable_b = 1'd0;
end
/* main: %.preheader22*/
/*   %114 = load i32* %scevgep.3.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_9))
begin
main_0_5_write_enable_b = 1'd0;
end
/* main: %.preheader22*/
/*   %119 = load i32* %scevgep.1.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_10))
begin
main_0_5_write_enable_b = 1'd0;
end
/* main: %.preheader22*/
/*   %123 = load i32* %scevgep.3.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader22_11))
begin
main_0_5_write_enable_b = 1'd0;
end
/* main: %151*/
/*   %169 = load i32* %168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_151_47))
begin
main_0_5_write_enable_b = 1'd0;
end
/* main: %173*/
/*   store i32 %a.0, i32* %168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_173_49))
begin
main_0_5_write_enable_b = 1'd1;
end
end
always @(*) begin
main_0_5_in_b = 1'd0;
/* main: %173*/
/*   store i32 %a.0, i32* %168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_173_49))
begin
main_0_5_in_b = main__backedge_a_0_reg;
end
end
always @(*) begin
main_0_6_address_a = 1'd0;
/* main: %.preheader24*/
/*   store i32 0, i32* %.sub13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_13))
begin
main_0_6_address_a = (main_0__sub13_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 0, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_14))
begin
main_0_6_address_a = (main_0_38_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_15))
begin
main_0_6_address_a = (main_0_42_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 1, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_16))
begin
main_0_6_address_a = (main_0_46_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 0, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_17))
begin
main_0_6_address_a = (main_0_50_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 0, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_18))
begin
main_0_6_address_a = (main_0_54_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_19))
begin
main_0_6_address_a = (main_0_58_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 1, i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_20))
begin
main_0_6_address_a = (main_0_62_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 -2, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_21))
begin
main_0_6_address_a = (main_0_66_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 2, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_22))
begin
main_0_6_address_a = (main_0_70_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 0, i32* %74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_23))
begin
main_0_6_address_a = (main_0_74_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 0, i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_24))
begin
main_0_6_address_a = (main_0_78_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 1, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_25))
begin
main_0_6_address_a = (main_0_82_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_26))
begin
main_0_6_address_a = (main_0_86_reg >>> 3'd2);
end
/* main: %151*/
/*   %156 = load i32* %155, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_151_44))
begin
main_0_6_address_a = (main_151_155 >>> 3'd2);
end
end
always @(*) begin
main_0_6_write_enable_a = 1'd0;
/* main: %.preheader24*/
/*   store i32 0, i32* %.sub13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_13))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 0, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_14))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_15))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 1, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_16))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 0, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_17))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 0, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_18))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_19))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 1, i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_20))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 -2, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_21))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 2, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_22))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 0, i32* %74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_23))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 0, i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_24))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 1, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_25))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_26))
begin
main_0_6_write_enable_a = 1'd1;
end
/* main: %151*/
/*   %156 = load i32* %155, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_151_44))
begin
main_0_6_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_6_in_a = 1'd0;
/* main: %.preheader24*/
/*   store i32 0, i32* %.sub13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_13))
begin
main_0_6_in_a = 32'd0;
end
/* main: %.preheader24*/
/*   store i32 0, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_14))
begin
main_0_6_in_a = 32'd0;
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_15))
begin
main_0_6_in_a = -32'd1;
end
/* main: %.preheader24*/
/*   store i32 1, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_16))
begin
main_0_6_in_a = 32'd1;
end
/* main: %.preheader24*/
/*   store i32 0, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_17))
begin
main_0_6_in_a = 32'd0;
end
/* main: %.preheader24*/
/*   store i32 0, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_18))
begin
main_0_6_in_a = 32'd0;
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_19))
begin
main_0_6_in_a = -32'd1;
end
/* main: %.preheader24*/
/*   store i32 1, i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_20))
begin
main_0_6_in_a = 32'd1;
end
/* main: %.preheader24*/
/*   store i32 -2, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_21))
begin
main_0_6_in_a = -32'd2;
end
/* main: %.preheader24*/
/*   store i32 2, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_22))
begin
main_0_6_in_a = 32'd2;
end
/* main: %.preheader24*/
/*   store i32 0, i32* %74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_23))
begin
main_0_6_in_a = 32'd0;
end
/* main: %.preheader24*/
/*   store i32 0, i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_24))
begin
main_0_6_in_a = 32'd0;
end
/* main: %.preheader24*/
/*   store i32 1, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_25))
begin
main_0_6_in_a = 32'd1;
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_26))
begin
main_0_6_in_a = -32'd1;
end
end
always @(*) begin
main_0_6_address_b = 1'd0;
/* main: %.preheader24*/
/*   store i32 1, i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_13))
begin
main_0_6_address_b = (main_0_36_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_14))
begin
main_0_6_address_b = (main_0_40_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 1, i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_15))
begin
main_0_6_address_b = (main_0_44_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_16))
begin
main_0_6_address_b = (main_0_48_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 2, i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_17))
begin
main_0_6_address_b = (main_0_52_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 -2, i32* %56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_18))
begin
main_0_6_address_b = (main_0_56_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 1, i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_19))
begin
main_0_6_address_b = (main_0_60_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_20))
begin
main_0_6_address_b = (main_0_64_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 2, i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_21))
begin
main_0_6_address_b = (main_0_68_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 -2, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_22))
begin
main_0_6_address_b = (main_0_72_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 4, i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_23))
begin
main_0_6_address_b = (main_0_76_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 -4, i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_24))
begin
main_0_6_address_b = (main_0_80_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 1, i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_25))
begin
main_0_6_address_b = (main_0_84_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_26))
begin
main_0_6_address_b = (main_0_88_reg >>> 3'd2);
end
/* main: %185*/
/*   %187 = load i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_185_56))
begin
main_0_6_address_b = (main_185_186 >>> 3'd2);
end
end
always @(*) begin
main_0_6_write_enable_b = 1'd0;
/* main: %.preheader24*/
/*   store i32 1, i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_13))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_14))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 1, i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_15))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_16))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 2, i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_17))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 -2, i32* %56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_18))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 1, i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_19))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_20))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 2, i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_21))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 -2, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_22))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 4, i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_23))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 -4, i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_24))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 1, i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_25))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_26))
begin
main_0_6_write_enable_b = 1'd1;
end
/* main: %185*/
/*   %187 = load i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_185_56))
begin
main_0_6_write_enable_b = 1'd0;
end
end
always @(*) begin
main_0_6_in_b = 1'd0;
/* main: %.preheader24*/
/*   store i32 1, i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_13))
begin
main_0_6_in_b = 32'd1;
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_14))
begin
main_0_6_in_b = -32'd1;
end
/* main: %.preheader24*/
/*   store i32 1, i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_15))
begin
main_0_6_in_b = 32'd1;
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_16))
begin
main_0_6_in_b = -32'd1;
end
/* main: %.preheader24*/
/*   store i32 2, i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_17))
begin
main_0_6_in_b = 32'd2;
end
/* main: %.preheader24*/
/*   store i32 -2, i32* %56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_18))
begin
main_0_6_in_b = -32'd2;
end
/* main: %.preheader24*/
/*   store i32 1, i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_19))
begin
main_0_6_in_b = 32'd1;
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_20))
begin
main_0_6_in_b = -32'd1;
end
/* main: %.preheader24*/
/*   store i32 2, i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_21))
begin
main_0_6_in_b = 32'd2;
end
/* main: %.preheader24*/
/*   store i32 -2, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_22))
begin
main_0_6_in_b = -32'd2;
end
/* main: %.preheader24*/
/*   store i32 4, i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_23))
begin
main_0_6_in_b = 32'd4;
end
/* main: %.preheader24*/
/*   store i32 -4, i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_24))
begin
main_0_6_in_b = -32'd4;
end
/* main: %.preheader24*/
/*   store i32 1, i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_25))
begin
main_0_6_in_b = 32'd1;
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_26))
begin
main_0_6_in_b = -32'd1;
end
end
always @(*) begin
main_0_7_address_a = 1'd0;
/* main: %.preheader24*/
/*   store i32 1, i32* %.sub14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_13))
begin
main_0_7_address_a = (main_0__sub14_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_14))
begin
main_0_7_address_a = (main_0_39_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 1, i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_15))
begin
main_0_7_address_a = (main_0_43_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_16))
begin
main_0_7_address_a = (main_0_47_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 2, i32* %51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_17))
begin
main_0_7_address_a = (main_0_51_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 -2, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_18))
begin
main_0_7_address_a = (main_0_55_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 2, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_19))
begin
main_0_7_address_a = (main_0_59_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 -2, i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_20))
begin
main_0_7_address_a = (main_0_63_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 1, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_21))
begin
main_0_7_address_a = (main_0_67_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_22))
begin
main_0_7_address_a = (main_0_71_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 4, i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_23))
begin
main_0_7_address_a = (main_0_75_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 -4, i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_24))
begin
main_0_7_address_a = (main_0_79_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 3, i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_25))
begin
main_0_7_address_a = (main_0_83_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 -3, i32* %87, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_26))
begin
main_0_7_address_a = (main_0_87_reg >>> 3'd2);
end
/* main: %151*/
/*   %162 = load i32* %161, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_151_44))
begin
main_0_7_address_a = (main_151_161 >>> 3'd2);
end
end
always @(*) begin
main_0_7_write_enable_a = 1'd0;
/* main: %.preheader24*/
/*   store i32 1, i32* %.sub14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_13))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_14))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 1, i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_15))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_16))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 2, i32* %51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_17))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 -2, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_18))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 2, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_19))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 -2, i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_20))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 1, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_21))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_22))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 4, i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_23))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 -4, i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_24))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 3, i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_25))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 -3, i32* %87, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_26))
begin
main_0_7_write_enable_a = 1'd1;
end
/* main: %151*/
/*   %162 = load i32* %161, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_151_44))
begin
main_0_7_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_7_in_a = 1'd0;
/* main: %.preheader24*/
/*   store i32 1, i32* %.sub14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_13))
begin
main_0_7_in_a = 32'd1;
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_14))
begin
main_0_7_in_a = -32'd1;
end
/* main: %.preheader24*/
/*   store i32 1, i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_15))
begin
main_0_7_in_a = 32'd1;
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_16))
begin
main_0_7_in_a = -32'd1;
end
/* main: %.preheader24*/
/*   store i32 2, i32* %51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_17))
begin
main_0_7_in_a = 32'd2;
end
/* main: %.preheader24*/
/*   store i32 -2, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_18))
begin
main_0_7_in_a = -32'd2;
end
/* main: %.preheader24*/
/*   store i32 2, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_19))
begin
main_0_7_in_a = 32'd2;
end
/* main: %.preheader24*/
/*   store i32 -2, i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_20))
begin
main_0_7_in_a = -32'd2;
end
/* main: %.preheader24*/
/*   store i32 1, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_21))
begin
main_0_7_in_a = 32'd1;
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_22))
begin
main_0_7_in_a = -32'd1;
end
/* main: %.preheader24*/
/*   store i32 4, i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_23))
begin
main_0_7_in_a = 32'd4;
end
/* main: %.preheader24*/
/*   store i32 -4, i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_24))
begin
main_0_7_in_a = -32'd4;
end
/* main: %.preheader24*/
/*   store i32 3, i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_25))
begin
main_0_7_in_a = 32'd3;
end
/* main: %.preheader24*/
/*   store i32 -3, i32* %87, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_26))
begin
main_0_7_in_a = -32'd3;
end
end
always @(*) begin
main_0_7_address_b = 1'd0;
/* main: %.preheader24*/
/*   store i32 0, i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_13))
begin
main_0_7_address_b = (main_0_37_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 0, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_14))
begin
main_0_7_address_b = (main_0_41_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 1, i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_15))
begin
main_0_7_address_b = (main_0_45_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_16))
begin
main_0_7_address_b = (main_0_49_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 0, i32* %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_17))
begin
main_0_7_address_b = (main_0_53_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 0, i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_18))
begin
main_0_7_address_b = (main_0_57_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 2, i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_19))
begin
main_0_7_address_b = (main_0_61_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 -2, i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_20))
begin
main_0_7_address_b = (main_0_65_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 1, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_21))
begin
main_0_7_address_b = (main_0_69_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_22))
begin
main_0_7_address_b = (main_0_73_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 0, i32* %77, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_23))
begin
main_0_7_address_b = (main_0_77_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 0, i32* %81, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_24))
begin
main_0_7_address_b = (main_0_81_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 -3, i32* %85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_25))
begin
main_0_7_address_b = (main_0_85_reg >>> 3'd2);
end
/* main: %.preheader24*/
/*   store i32 3, i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_26))
begin
main_0_7_address_b = (main_0_89_reg >>> 3'd2);
end
/* main: %185*/
/*   %190 = load i32* %189, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_185_56))
begin
main_0_7_address_b = (main_185_189 >>> 3'd2);
end
end
always @(*) begin
main_0_7_write_enable_b = 1'd0;
/* main: %.preheader24*/
/*   store i32 0, i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_13))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 0, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_14))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 1, i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_15))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_16))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 0, i32* %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_17))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 0, i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_18))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 2, i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_19))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 -2, i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_20))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 1, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_21))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_22))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 0, i32* %77, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_23))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 0, i32* %81, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_24))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 -3, i32* %85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_25))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %.preheader24*/
/*   store i32 3, i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_26))
begin
main_0_7_write_enable_b = 1'd1;
end
/* main: %185*/
/*   %190 = load i32* %189, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_185_56))
begin
main_0_7_write_enable_b = 1'd0;
end
end
always @(*) begin
main_0_7_in_b = 1'd0;
/* main: %.preheader24*/
/*   store i32 0, i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_13))
begin
main_0_7_in_b = 32'd0;
end
/* main: %.preheader24*/
/*   store i32 0, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_14))
begin
main_0_7_in_b = 32'd0;
end
/* main: %.preheader24*/
/*   store i32 1, i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_15))
begin
main_0_7_in_b = 32'd1;
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_16))
begin
main_0_7_in_b = -32'd1;
end
/* main: %.preheader24*/
/*   store i32 0, i32* %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_17))
begin
main_0_7_in_b = 32'd0;
end
/* main: %.preheader24*/
/*   store i32 0, i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_18))
begin
main_0_7_in_b = 32'd0;
end
/* main: %.preheader24*/
/*   store i32 2, i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_19))
begin
main_0_7_in_b = 32'd2;
end
/* main: %.preheader24*/
/*   store i32 -2, i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_20))
begin
main_0_7_in_b = -32'd2;
end
/* main: %.preheader24*/
/*   store i32 1, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_21))
begin
main_0_7_in_b = 32'd1;
end
/* main: %.preheader24*/
/*   store i32 -1, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_22))
begin
main_0_7_in_b = -32'd1;
end
/* main: %.preheader24*/
/*   store i32 0, i32* %77, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_23))
begin
main_0_7_in_b = 32'd0;
end
/* main: %.preheader24*/
/*   store i32 0, i32* %81, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_24))
begin
main_0_7_in_b = 32'd0;
end
/* main: %.preheader24*/
/*   store i32 -3, i32* %85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_25))
begin
main_0_7_in_b = -32'd3;
end
/* main: %.preheader24*/
/*   store i32 3, i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__preheader24_26))
begin
main_0_7_in_b = 32'd3;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %241*/
/*   ret i32 %.0*/
if ((cur_state == LEGUP_F_main_BB_241_73))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %241*/
/*   ret i32 %.0*/
if ((cur_state == LEGUP_F_main_BB_241_73))
begin
return_val <= main_241__0_reg;
if (reset == 1'b0 && ^(main_241__0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
